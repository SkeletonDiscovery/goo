<!-- -*- mode: Text; fill-column: 100 -*- vim: set textwidth=100 :
 !   EDITOR NOTES
 !
 !   Adding a new element involves editing the following sections:
 !    - section for the element itself
 !    - descriptions of the element's categories
 !    - images/content-venn.svg
 !    - syntax, if it's void or otherwise special
 !    - parser, if it's not phrasing-level
 !    - rendering
 !    - obsolete section
 !    - element, attribute, content model, and interface indices
 !
 !   Adding a new attribute involves editing the following sections:
 !    - The IDL and content attributes for the relevant elements
 !    - element and attribute indices
 !-->

<!--
 ! https://lists.w3.org/Archives/Public/www-archive/2014Apr/0034.html
 !-->

<!DOCTYPE html> <!-- Note: This file is NOT HTML, it's a proprietary language that is then post-processed into HTML. -->
<html lang="en-US-x-hixie">
 <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title w-nodev>HTML Standard</title>
  <title w-dev>HTML Standard, Edition for Web Developers</title>
  <meta name="theme-color" content="#3c790a">
  <link w-nodev crossorigin rel="stylesheet" href="https://resources.whatwg.org/spec.css">
  <link w-nodev w-noreview crossorigin rel="stylesheet" href="https://resources.whatwg.org/standard.css">
  <link w-noreview rel="stylesheet" crossorigin href="https://resources.whatwg.org/standard-shared-with-dev.css">
  <link w-nohtml w-nodev w-nosnap rel="stylesheet" crossorigin href="https://resources.whatwg.org/review-draft.css">
  <link w-nosnap w-noreview rel="icon" crossorigin href="https://resources.whatwg.org/logo.svg">
  <link w-nohtml w-nodev rel="icon" crossorigin href="https://resources.whatwg.org/logo-snapshot.svg">
  <link w-dev rel="stylesheet" crossorigin href="/dev/styles.css">
  <link w-nodev rel="stylesheet" crossorigin href="/styles.css">
  <script>
   function toggleStatus(div) {
     div.parentNode.classList.toggle('wrapped');
   }
   function setLinkFragment(link) {
     link.hash = location.hash;
   }
  </script>
 </head>
 <body>
  <script w-dev src="/dev/search.js" async></script>
  <script w-nodev w-noreview crossorigin src="/html-dfn.js" async></script>
  <script w-nodev w-noreview crossorigin src="https://resources.whatwg.org/file-issue.js" async data-file-issue-url="https://github.com/whatwg/html/issues/new"></script>
  <script w-nodev w-noreview w-nosplit crossorigin src="https://resources.whatwg.org/commit-snapshot-shortcut-key.js" async></script>
  <header class="head with-buttons" id="head">
   <a href="https://whatwg.org/" class="logo"><img crossorigin width="100" height="100" alt="WHATWG" src="https://resources.whatwg.org/logo.svg"></a>
   <hgroup w-nodev>
    <h1 class="allcaps">HTML</h1>
    <p w-nosnap w-noreview id="living-standard">Living Standard &mdash; Last Updated <span class="pubdate">[DATE: 01 Jan 1901]</span></p>
    <p w-nohtml w-noreview id="living-standard">Commit Snapshot &mdash; Last Updated <span class="pubdate">[DATE: 01 Jan 1901]</span></p>
    <p w-nohtml w-nosnap id="living-standard">Review Draft &mdash; Published <span class="pubdate">[DATE: 01 Jan 1901]</span></p>
   </hgroup>
   <hgroup w-dev>
    <h1><a href="/dev/" rel=home>HTML: The Living Standard</a></h1>
    <p id="dev-edition-h2">Edition for Web Developers &mdash; Last Updated <span class="pubdate">[DATE: 01 Jan 1901]</span></p>
   </hgroup>
   <nav w-nosplit w-nodev w-noreview>
    <!-- Note: be sure to keep an even number of <a>s, for small screens where they appear in two columns. -->
    <div>
     <a w-nohtml href="/" id="commit-snapshot-link"><span data-x=""><strong>One-Page Version</strong> <code data-x="">html.spec.whatwg.org</code></span></a>
     <a w-nosnap href="/"><span data-x=""><strong>One-Page Version</strong> <code data-x="">html.spec.whatwg.org</code></span></a>
     <a href="/multipage/" id="multipage-link" onclick="setLinkFragment(this);"><span data-x=""><strong>Multipage Version</strong> <code data-x="">/multipage</code></span></a>
     <a href="/dev/" onclick="setLinkFragment(this);"><span data-x=""><strong>Version for Web Devs</strong> <code data-x="">/dev</code></span></a>
     <a href="/print.pdf"><span data-x=""><strong>PDF Version</strong> <code data-x="">/print.pdf</code></span></a>
     <a href="https://github.com/whatwg/html/wiki/Translations"><span data-x=""><strong>Translations</strong> <code data-x="">日本語 • 简体中文</code></span></a>
    </div>
    <div>
     <a class="misc" href="https://github.com/whatwg/html/blob/main/FAQ.md"><span data-x=""><strong>FAQ</strong> <code data-x="">on GitHub</code></span></a>
     <a class="comms" href="https://whatwg.org/chat"><span data-x=""><strong>Chat</strong> <code data-x="">on Matrix</code></span></a>
    </div>
    <div>
     <a class="changes" href="https://github.com/whatwg/html"><span data-x=""><strong>Contribute on GitHub</strong> <code data-x="">whatwg/html repository</code></span></a>
     <a class="changes" href="https://github.com/whatwg/html/commits"><span data-x=""><strong>Commits</strong> <code data-x="">on GitHub</code></span></a>
     <a w-nosnap class="changes" href="/commit-snapshots/[SHA]" id="commit-snapshot-link"><span data-x=""><strong>Snapshot</strong> <code data-x="">as of this commit</code></span></a>
     <a class="changes" href="https://twitter.com/htmlstandard"><span data-x=""><strong>Twitter Updates</strong> <code data-x="">@htmlstandard</code></span></a>
    </div>
    <div>
     <a class="feedback" href="https://github.com/whatwg/html/issues"><span data-x=""><strong>Open Issues</strong> <code data-x="">filed on GitHub</code></span></a>
     <a class="feedback" href="https://whatwg.org/newbug"><span data-x=""><strong>Open an Issue</strong> <code data-x="">whatwg.org/newbug</code></span></a>
     <a class="feedback" href="https://github.com/web-platform-tests/wpt/tree/master/html"><span data-x=""><strong>Tests</strong> <code data-x="">web-platform-tests html/</code></span></a>
     <a class="feedback" href="https://github.com/web-platform-tests/wpt/labels/html"><span data-x=""><strong>Issues for Tests</strong> <code data-x="">ongoing work</code></span></a>
    </div>
   </nav>

   <div id="search" w-dev>
    <input name="query" type="search" placeholder="Search. Press '/'" autocomplete="off" id="query">
    <ol id="results"></ol>
   </div>
  </header>

  <details w-nohtml w-nodev w-noreview class="annoying-warning" open="">
   <summary>This is a Commit Snapshot of the standard</summary>

   <p>This document contains the contents of the standard as of the <a class="sha-link"></a>, and
   should only be used as a historical reference. This commit may not even have been merged into the
   main branch.</p>

   <p>Do not attempt to implement this version of the standard. Do not reference this version as
   authoritative in any way. Instead, see <a
   href="https://html.spec.whatwg.org/">https://html.spec.whatwg.org/</a> for the living
   standard.</p>
  </details>

  <details w-nohtml w-nodev w-nosnap class="annoying-warning" open>
   <summary>This is a Review Draft of the standard</summary>

   <p>This is a Review Draft. It is published primarily for purposes of patent review by Workstream
   Participants; it mirrors the <a href="https://html.spec.whatwg.org/">Living Standard</a> closely,
   redacting only text that is identified as "Objection Pending" or "Confirmation Pending".
   Developers should refer to the <a href="https://html.spec.whatwg.org/">Living Standard</a> for
   the most current error corrections and other developments.</p>

   <p>For information regarding patent commitments, please see the <a
   href="https://whatwg.org/ipr-policy">IPR Policy</a> and <a
   href="https://github.com/whatwg/html/labels/exclusion%20notices">exclusion notices</a>.</p>

   <p>Do not attempt to implement this version of the standard. Do not reference this version as
   authoritative in any way. Instead, see <a
   href="https://html.spec.whatwg.org/">https://html.spec.whatwg.org/</a> for the Living
   Standard.</p>
  </details>

  <hr w-nodev w-nosplit>

  <h2 class="no-num no-toc" w-nosplit>Table of contents</h2>
  <!--smalltoc-->

  <h2 class="no-num no-toc" id="contents" w-nosplit w-nodev>Full table of contents</h2>
  <!--toc-->

  <div w-dev w-nosplit>

  <h2 class="no-num no-toc" id="about-dev-edition">About this specification</h2>

  <p>This specification is like no other — it has been processed with <em>you</em>, the humble web
  developer, in mind.</p>

  <p>The focus of this specification is readability and ease of access. Unlike the <a
  href="/multipage/">full HTML Standard</a>, this "developer's edition" removes information that
  only browser vendors need know. It is automatically produced from the full specification by our
  build tooling, and thus always in sync with the latest developments in HTML.</p>

  <p>To read about its conception, construction, and future, read the <a
  href="https://web.archive.org/web/20150220020906/http://archive.germanforblack.com:80/articles/html5-for-web-developers">original
  press release</a>, and the <a href="https://blog.whatwg.org/developers-edition-comeback">blog post
  about its relaunch</a>.</p>

  <p>Finally, feel free to <a href="https://github.com/whatwg/html/labels/dev%20edition">contribute
  on GitHub</a> to make this edition better for everyone!</p>

  </div>

  <h2 split-filename="introduction" id="introduction">Introduction</h2>

  <div w-nodev>

  <h3 id="abstract">Where does this specification fit?</h3>

  <p>This specification defines a big part of the web platform, in lots of detail. Its place in the
  web platform specification stack relative to other specifications can be best summed up as
  follows:</p>

  <svg viewBox="0 0 398 359" width=398 height=359 role=img aria-label="It consists of everything else, above such core technologies as HTTP, TLS, DOM, Unicode, Web IDL, MIME, URL, XML, JavaScript, and Encoding; below higher-level technologies like CSS, SVG, MathML, and Service Workers; and to the side of technologies like IndexedDB, Fetch, CSP, AV1, Opus, and PNG." id="abstractimg">
   <rect width=398 height=80 />
   <text x=199 y=45 class=horizontal>CSS SVG MathML Service&thinsp;Workers</text>
   <rect width=67 height=177 y=85 />
   <text transform="translate(25 173.5) rotate(-90)" class="left">IDB Fetch CSP</text>
   <text transform="translate(50 173.5) rotate(-90)" class="left">AV1 Opus PNG</text>
   <!-- https://www.flickr.com/photos/wonderlane/2986252088/ -->
   <image x=72 y=85 width=326 height=177 xlink:href="/images/abstract.jpeg"/>
   <text x=130 y=250 class=right>THIS SPECIFICATION</text>
   <rect width=398 height=92 y=267 />
   <text x=199 y=300 class=horizontal>HTTP TLS DOM Unicode Web&thinsp;IDL</text>
   <text x=199 y=330 class=horizontal>MIME URL XML JavaScript Encoding</text>
  </svg>

  </div>


  <h3 id="is-this-html5?">Is this HTML5?</h3>

  <!-- NON-NORMATIVE SECTION -->

  <p>In short: Yes.</p>

  <p>In more length: the term "HTML5" is widely used as a buzzword to refer to modern web
  technologies, many of which (though by no means all) are developed at the WHATWG. This document is
  one such; others are available from <a href="https://spec.whatwg.org/">the WHATWG Standards
  overview</a>.</p>


  <h3>Background</h3>

  <!-- NON-NORMATIVE SECTION -->

  <p>HTML is the World Wide Web's core markup language. Originally, HTML was primarily designed as a
  language for semantically describing scientific documents. Its general design, however, has
  enabled it to be adapted, over the subsequent years, to describe a number of other types of
  documents and even applications.</p>


  <h3>Audience</h3>

  <!-- NON-NORMATIVE SECTION -->

  <p>This specification is intended for authors of documents and scripts that use the features
  defined in this specification<span w-nodev>, implementers of tools that operate on pages that
  use the features defined in this specification, and individuals wishing to establish the
  correctness of documents or implementations with respect to the requirements of this
  specification</span>.</p>

  <p>This document is probably not suited to readers who do not already have at least a passing
  familiarity with web technologies, as in places it sacrifices clarity for precision, and brevity
  for completeness. More approachable tutorials and authoring guides can provide a gentler
  introduction to the topic.</p>

  <p>In particular, familiarity with the basics of DOM is necessary for a complete understanding of
  some of the more technical parts of this specification. An understanding of Web IDL, HTTP, XML,
  Unicode, character encodings, JavaScript, and CSS will also be helpful in places but is not
  essential.</p>


  <h3>Scope</h3>

  <!-- NON-NORMATIVE SECTION -->

  <p>This specification is limited to providing a semantic-level markup language and associated
  semantic-level scripting APIs for authoring accessible pages on the web ranging from static
  documents to dynamic applications.</p>

  <p>The scope of this specification does not include providing mechanisms for media-specific
  customization of presentation (although default rendering rules for web browsers are included at
  the end of this specification, and several mechanisms for hooking into CSS are provided as part of
  the language).</p>

  <p>The scope of this specification is not to describe an entire operating system. In particular,
  hardware configuration software, image manipulation tools, and applications that users would be
  expected to use with high-end workstations on a daily basis are out of scope. In terms of
  applications, this specification is targeted specifically at applications that would be expected
  to be used by users on an occasional basis, or regularly but from disparate locations, with low
  CPU requirements. Examples of such applications include online purchasing systems, searching
  systems, games (especially multiplayer online games), public telephone books or address books,
  communications software (email clients, instant messaging clients, discussion software), document
  editing software, etc.</p>


  <h3>History</h3>

  <!-- NON-NORMATIVE SECTION -->

  <p>For its first five years (1990-1995), HTML went through a number of revisions and experienced a
  number of extensions, primarily hosted first at CERN, and then at the IETF.</p>

  <p>With the creation of the W3C, HTML's development changed venue again. A first abortive attempt
  at extending HTML in 1995 known as HTML 3.0 then made way to a more pragmatic approach known as
  HTML 3.2, which was completed in 1997. HTML4 quickly followed later that same year.</p>

  <p>The following year, the W3C membership decided to stop evolving HTML and instead begin work on
  an XML-based equivalent, called XHTML. <!-- https://www.w3.org/MarkUp/future/#summary --> This
  effort started with a reformulation of HTML4 in XML, known as XHTML 1.0, which added no new
  features except the new serialization, and which was completed in 2000. After XHTML 1.0, the W3C's
  focus turned to making it easier for other working groups to extend XHTML, under the banner of
  XHTML Modularization. In parallel with this, the W3C also worked on a new language that was not
  compatible with the earlier HTML and XHTML languages, calling it XHTML2.</p>

  <p>Around the time that HTML's evolution was stopped in 1998, parts of the API for HTML developed
  by browser vendors were specified and published under the name DOM Level 1 (in 1998) and DOM Level
  2 Core and DOM Level 2 HTML (starting in 2000 and culminating in 2003). These efforts then petered
  out, with some DOM Level 3 specifications published in 2004 but the working group being closed
  before all the Level 3 drafts were completed.</p>

  <p>In 2003, the publication of XForms, a technology which was positioned as the next generation of
  web forms, sparked a renewed interest in evolving HTML itself, rather than finding replacements
  for it. This interest was borne from the realization that XML's deployment as a web technology was
  limited to entirely new technologies (like RSS and later Atom), rather than as a replacement for
  existing deployed technologies (like HTML).</p>

  <p>A proof of concept to show that it was possible to extend HTML4's forms to provide many of the
  features that XForms 1.0 introduced, without requiring browsers to implement rendering engines
  that were incompatible with existing HTML web pages, was the first result of this renewed
  interest. At this early stage, while the draft was already publicly available, and input was
  already being solicited from all sources, the specification was only under Opera Software's
  copyright.</p>

  <p>The idea that HTML's evolution should be reopened was tested at a W3C workshop in 2004, where
  some of the principles that underlie the HTML5 work (described below), as well as the
  aforementioned early draft proposal covering just forms-related features, were presented to the
  W3C jointly by Mozilla and Opera. The proposal was rejected on the grounds that the proposal
  conflicted with the previously chosen direction for the web's evolution; the W3C staff and
  membership voted to continue developing XML-based replacements instead.</p>

  <p>Shortly thereafter, Apple, Mozilla, and Opera jointly announced their intent to continue
  working on the effort under the umbrella of a new venue called the WHATWG. A public mailing list
  was created, and the draft was moved to the WHATWG site. The copyright was subsequently amended to
  be jointly owned by all three vendors, and to allow reuse of the specification.</p>

  <p>The WHATWG was based on several core principles, in particular that technologies need to be
  backwards compatible, that specifications and implementations need to match even if this means
  changing the specification rather than the implementations, and that specifications need to be
  detailed enough that implementations can achieve complete interoperability without
  reverse-engineering each other.</p>

  <p>The latter requirement in particular required that the scope of the HTML5 specification include
  what had previously been specified in three separate documents: HTML4, XHTML1, and DOM2 HTML. It
  also meant including significantly more detail than had previously been considered the norm.</p>

  <p>In 2006, the W3C indicated an interest to participate in the development of HTML5 after all,
  and in 2007 formed a working group chartered to work with the WHATWG on the development of the
  HTML5 specification. Apple, Mozilla, and Opera allowed the W3C to publish the specification under
  the W3C copyright, while keeping a version with the less restrictive license on the WHATWG
  site.</p>

  <p>For a number of years, both groups then worked together. In 2011, however, the groups came to
  the conclusion that they had different goals: the W3C wanted to publish a "finished" version of
  "HTML5", while the WHATWG wanted to continue working on a Living Standard for HTML, continuously
  maintaining the specification rather than freezing it in a state with known problems, and adding
  new features as needed to evolve the platform.</p>

  <p>In 2019, the WHATWG and W3C <a href="https://www.w3.org/blog/news/archives/7753">signed an
  agreement</a> to collaborate on a single version of HTML going forward: this document.</p>



  <h3>Design notes</h3>

  <!-- NON-NORMATIVE SECTION -->

  <p>It must be admitted that many aspects of HTML appear at first glance to be nonsensical and
  inconsistent.</p>

  <p>HTML, its supporting DOM APIs, as well as many of its supporting technologies, have been
  developed over a period of several decades by a wide array of people with different priorities
  who, in many cases, did not know of each other's existence.</p>

  <p>Features have thus arisen from many sources, and have not always been designed in especially
  consistent ways. Furthermore, because of the unique characteristics of the web, implementation
  bugs have often become de-facto, and now de-jure, standards, as content is often unintentionally
  written in ways that rely on them before they can be fixed.</p>

  <p>Despite all this, efforts have been made to adhere to certain design goals. These are described
  in the next few subsections.</p>


  <div w-nodev>

  <!--en-GB--><h4 id="serialisability-of-script-execution">Serializability of script execution</h4>

  <!-- NON-NORMATIVE SECTION -->

  <p>To avoid exposing web authors to the complexities of multithreading, the HTML and DOM APIs are
  designed such that no script can ever detect the simultaneous execution of other scripts. Even
  with <span data-x="Worker">workers</span>, the intent is that the behavior of implementations can
  be thought of as completely serializing the execution of all scripts in all globals.</p>

  <p>The exception to this general design principle is the JavaScript <code>SharedArrayBuffer</code>
  class. Using <code>SharedArrayBuffer</code> objects, it can in fact be observed that scripts in
  other <span data-x="agent">agents</span> are executing simultaneously. Furthermore, due to the
  JavaScript memory model, there are situations which not only are un-representable via serialized
  <em>script</em> execution, but also un-representable via serialized <em>statement</em> execution
  among those scripts.</p>

  </div>



  <h4>Compliance with other specifications</h4>

  <!-- NON-NORMATIVE SECTION -->

  <p>This specification interacts with and relies on a wide variety of other specifications. In
  certain circumstances, unfortunately, conflicting needs have led to this specification violating
  the requirements of these other specifications. Whenever this has occurred, the transgressions
  have each been noted as a "<dfn>willful violation</dfn>", and the reason for the violation has
  been noted.</p>



  <h4>Extensibility</h4>

  <!-- NON-NORMATIVE SECTION -->

  <p>HTML has a wide array of extensibility mechanisms that can be used for adding semantics in a
  safe manner:</p>

  <ul>

   <li><p>Authors can use the <code data-x="attr-class">class</code> attribute to extend elements,
   effectively creating their own elements, while using the most applicable existing "real" HTML
   element, so that browsers and other tools that don't know of the extension can still support it
   somewhat well. This is the tack used by microformats, for example.</p></li>

   <li><p>Authors can include data for inline client-side scripts or server-side site-wide scripts
   to process using the <code data-x="attr-data-*">data-*=""</code> attributes. These are guaranteed
   to never be touched by browsers, and allow scripts to include data on HTML elements that scripts
   can then look for and process.</p></li>

   <li><p>Authors can use the <code data-x="meta">&lt;meta name="" content=""></code> mechanism to
   include page-wide metadata.</p></li>

   <li><p>Authors can use the <code data-x="attr-hyperlink-rel">rel=""</code> mechanism to annotate
   links with specific meanings by registering <span data-x="concept-rel-extensions">extensions to
   the predefined set of link types</span>. This is also used by microformats.</p></li>

   <li><p>Authors can embed raw data using the <code data-x="script">&lt;script type=""></code>
   mechanism with a custom type, for further handling by inline or server-side scripts.</p></li>

   <li><p>Authors can extend APIs using the JavaScript prototyping mechanism. This is widely used by
   script libraries, for instance.</p></li>

   <li><p>Authors can use the microdata feature (the <code
   data-x="attr-itemscope">itemscope=""</code> and <code data-x="attr-itemprop">itemprop=""</code>
   attributes) to embed nested name-value pairs of data to be shared with other applications and
   sites.</p></li>

   <li><p>Authors can define, share, and use <span data-x="custom element">custom elements</span>
   to extend the vocabulary of HTML. The requirements of <span data-x="valid custom element
   name">valid custom element names</span> ensure forward compatibility (since no elements will be
   added to HTML, SVG, or MathML with hyphen-containing local names in the future).</p></li>

  </ul>




  <h3 id="html-vs-xhtml">HTML vs XML syntax</h3>

  <!-- NON-NORMATIVE SECTION -->

  <p>This specification defines an abstract language for describing documents and applications, and
  some APIs for interacting with in-memory representations of resources that use this language.</p>

  <p>The in-memory representation is known as "DOM HTML", or "the DOM" for short.</p>

  <p>There are various concrete syntaxes that can be used to transmit resources that use this
  abstract language, two of which are defined in this specification.</p>

  <p>The first such concrete syntax is the HTML syntax. This is the format suggested for most
  authors. It is compatible with most legacy web browsers. If a document is transmitted with the
  <code>text/html</code> <span>MIME type</span>, then it will be processed as an HTML document by
  web browsers. This specification defines the latest HTML syntax, known simply as "HTML".</p>

  <p>The second concrete syntax is XML. When a document is transmitted with an <span>XML MIME
  type</span>, such as <code>application/xhtml+xml</code>, then it is treated as an XML document by
  web browsers, to be parsed by an XML processor. Authors are reminded that the processing for XML
  and HTML differs; in particular, even minor syntax errors will prevent a document labeled as XML
  from being rendered fully, whereas they would be ignored in the HTML syntax.</p>

  <p class="note">The XML syntax for HTML was formerly referred to as "XHTML", but this
  specification does not use that term (among other reasons, because no such term is used for the
  HTML syntaxes of MathML and SVG).</p>

  <p>The DOM, the HTML syntax, and the XML syntax cannot all represent the same content. For
  example, namespaces cannot be represented using the HTML syntax, but they are supported in the DOM
  and in the XML syntax. Similarly, documents that use the <code>noscript</code> feature can be
  represented using the HTML syntax, but cannot be represented with the DOM or in the XML syntax.
  Comments that contain the string "<code data-x="">--&gt;</code>" can only be represented in the
  DOM, not in the HTML and XML syntaxes.</p>


  <h3>Structure of this specification</h3>

  <!-- NON-NORMATIVE SECTION -->

  <p>This specification is divided into the following major sections:</p>

  <dl>
   <dt><a href="#introduction">Introduction</a></dt>
   <dd>Non-normative materials providing a context for the HTML standard.</dd>

   <dt><a href="#infrastructure">Common infrastructure</a></dt>
   <dd>The conformance classes, algorithms, definitions, and the common underpinnings of the rest of
   the specification.</dd>

   <dt><a href="#dom">Semantics, structure, and APIs of HTML documents</a></dt>
   <dd>Documents are built from elements. These elements form a tree using the DOM. This section
   defines the features of this DOM, as well as introducing the features common to all elements, and
   the concepts used in defining elements.</dd>

   <dt><a href="#semantics">The elements of HTML</a></dt>
   <dd>Each element has a predefined meaning, which is explained in this section. Rules for authors
   on how to use the element<span w-nodev>, along with user agent requirements for how to
   handle each element,</span> are also given. This includes large signature features of HTML such
   as video playback and subtitles, form controls and form submission, and a 2D graphics API known
   as the HTML canvas.</dd>

   <dt><a href="#microdata">Microdata</a></dt>
   <dd>This specification introduces a mechanism for adding machine-readable annotations to
   documents, so that tools can extract trees of name-value pairs from the document. This section
   describes this mechanism<span w-nodev> and some algorithms that can be used to convert HTML
   documents into other formats</span>. This section also defines some sample Microdata vocabularies
   for contact information, calendar events, and licensing works.</dd>

   <dt><a href="#editing">User interaction</a></dt>
   <dd>HTML documents can provide a number of mechanisms for users to interact with and modify
   content, which are described in this section, such as how focus works, and drag-and-drop.</dd>

   <dt><a href="#browsers">Loading web pages</a></dt>
   <dd>HTML documents do not exist in a vacuum &mdash; this section defines many of the features
   that affect environments that deal with multiple pages, such as web browsers.</dd>

   <dt><a href="#webappapis">Web application APIs</a></dt>
   <dd>This section introduces basic features for scripting of applications in HTML.</dd>

   <dt><a href="#workers">Web workers</a></dt>
   <dd>This section defines an API for background threads in JavaScript.</dd>

   <dt><a href="#worklets">Worklets</a></dt>
   <dd>This section defines infrastructure for APIs that need to run JavaScript separately from the
   main JavaScript execution environment.</dd>

   <dt><a href="#comms">The communication APIs</a></dt>
   <dd>This section describes some mechanisms that applications written in HTML can use to
   communicate with other applications from different domains running on the same client. It also
   introduces a server-push event stream mechanism known as Server Sent Events or
   <code>EventSource</code>, and a two-way full-duplex socket protocol for scripts known as Web
   Sockets.</dd>

   <dt><a href="#webstorage">Web storage</a></dt>
   <dd>This section defines a client-side storage mechanism based on name-value pairs.</dd>

   <dt><a href="#syntax">The HTML syntax</a></dt>
   <dt><a href="#xhtml">The XML syntax</a></dt>
   <dd>All of these features would be for naught if they couldn't be represented in a serialized
   form and sent to other people, and so these sections define the syntaxes of HTML and XML<span
   w-nodev>, along with rules for how to parse content using those syntaxes</span>.</dd>

   <dt w-nodev><a href="#rendering">Rendering</a></dt>
   <dd w-nodev>This section defines the default rendering rules for web browsers.</dd>
  </dl>

  <p>There are also some appendices, listing <a href="#obsolete">obsolete features</a> and <a
  href="#iana">IANA considerations</a>, and several indices.</p>


  <div w-nodev>

  <h4>How to read this specification</h4>

  <p>This specification should be read like all other specifications. First, it should be read
  cover-to-cover, multiple times. Then, it should be read backwards at least once. Then it should be
  read by picking random sections from the contents list and following all the cross-references.</p>

  <p>As described in the conformance requirements section below, this specification describes
  conformance criteria for a variety of conformance classes. In particular, there are conformance
  requirements that apply to <em>producers</em>, for example authors and the documents they create,
  and there are conformance requirements that apply to <em>consumers</em>, for example web browsers.
  They can be distinguished by what they are requiring: a requirement on a producer states what is
  allowed, while a requirement on a consumer states how software is to act.</p>

  <div class="example">

   <p>For example, "the <code data-x="">foo</code> attribute's value must be a <span>valid
   integer</span>" is a requirement on producers, as it lays out the allowed values; in contrast,
   the requirement "the <code data-x="">foo</code> attribute's value must be parsed using the
   <span>rules for parsing integers</span>" is a requirement on consumers, as it describes how to
   process the content.</p>

  </div>

  <p><strong>Requirements on producers have no bearing whatsoever on consumers.</strong></p>

  <div class="example">

   <p>Continuing the above example, a requirement stating that a particular attribute's value is
   constrained to being a <span>valid integer</span> emphatically does <em>not</em> imply anything
   about the requirements on consumers. It might be that the consumers are in fact required to treat
   the attribute as an opaque string, completely unaffected by whether the value conforms to the
   requirements or not. It might be (as in the previous example) that the consumers are required to
   parse the value using specific rules that define how invalid (non-numeric in this case) values
   are to be processed.</p>

  </div>

  </div>



  <h4>Typographic conventions</h4>

  <p>This is a definition, requirement, or explanation.</p>

  <p class="note">This is a note.</p>

  <p class="example">This is an example.</p>

  <p class="XXX">This is an open issue.</p>

  <p class="warning">This is a warning.</p>

  <pre class="extract" w-nodev><code class="idl">[Exposed=Window]
interface <dfn data-x="">Example</dfn> {
  // this is an IDL definition
};</code></pre>

  <dl class="domintro">
   <dt><code data-x=""><var>variable</var> = <var>object</var>.<span data-x="x-that">method</span>([<var>optionalArgument</var>])</code></dt>

   <dd><p>This is a note to authors describing the usage of an interface.</p></dd>
  </dl>

  <pre><code class="css">/* this is a CSS fragment */</code></pre>

  <p>The defining instance of a term is marked up like <dfn data-x="x-this">this</dfn>. Uses of that
  term are marked up like <span data-x="x-this">this</span> or like <i data-x="x-this">this</i>.</p>

  <p>The defining instance of an element, attribute, or API is marked up like <dfn><code
  data-x="x-that">this</code></dfn>. References to that element, attribute, or API are marked up
  like <code data-x="x-that">this</code>.</p>

  <p>Other code fragments are marked up <code data-x="">like this</code>.</p>

  <p>Variables are marked up like <var>this</var>.</p>

  <p w-nodev>In an algorithm, steps in <span data-x="synchronous section">synchronous
  sections</span> are marked with &#x231B;.</p>

  <p>In some cases, requirements are given in the form of lists with conditions and corresponding
  requirements. In such cases, the requirements that apply to a condition are always the first set
  of requirements that follow the condition, even in the case of there being multiple sets of
  conditions for those requirements. Such cases are presented as follows:</p>

  <dl class="switch">

   <dt>This is a condition
   <dt>This is another condition
   <dd>This is the requirement that applies to the conditions above.

   <dt>This is a third condition
   <dd>This is the requirement that applies to the third condition.
  </dl>




  <h3>A quick introduction to HTML</h3>

  <!-- NON-NORMATIVE SECTION -->

  <p>A basic HTML document looks like this:</p>

  <pre id="intro-early-example"><code class="html">&lt;!DOCTYPE html>
&lt;html lang="en">
 &lt;head>
  &lt;title>Sample page&lt;/title>
 &lt;/head>
 &lt;body>
  &lt;h1>Sample page&lt;/h1>
  &lt;p>This is a &lt;a href="demo.html">simple&lt;/a> sample.&lt;/p>
  &lt;!-- this is a comment -->
 &lt;/body>
&lt;/html></code></pre>

  <p>HTML documents consist of a tree of elements and text. Each element is denoted in the source by
  a <span data-x="syntax-start-tag">start tag</span>, such as "<code data-x="">&lt;body></code>", and
  an <span data-x="syntax-end-tag">end tag</span>, such as "<code data-x="">&lt;/body></code>".
  (Certain start tags and end tags can in certain cases be <span
  data-x="syntax-tag-omission">omitted</span> and are implied by other tags.)</p>

  <p>Tags have to be nested such that elements are all completely within each other, without
  overlapping:</p>

  <pre class="bad"><code class="html">&lt;p>This is &lt;em>very &lt;strong>wrong&lt;/em>!&lt;/strong>&lt;/p></code></pre>
  <pre><code class="html">&lt;p>This &lt;em>is &lt;strong>correct&lt;/strong>.&lt;/em>&lt;/p></code></pre>

  <p>This specification defines a set of elements that can be used in HTML, along with rules about
  the ways in which the elements can be nested.</p>

  <p>Elements can have attributes, which control how the elements work. In the example below, there
  is a <span>hyperlink</span>, formed using the <code>a</code> element and its <code
  data-x="attr-hyperlink-href">href</code> attribute:</p>

  <pre><code class="html">&lt;a href="demo.html">simple&lt;/a></code></pre>

  <p><span data-x="syntax-attributes">Attributes</span> are placed inside the start tag, and consist
  of a <span data-x="syntax-attribute-name">name</span> and a <span
  data-x="syntax-attribute-value">value</span>, separated by an "<code data-x="">=</code>" character.
  The attribute value can remain <a href="#unquoted">unquoted</a> if it doesn't contain <span>ASCII
  whitespace</span> or any of <code data-x="">"</code> <code data-x="">'</code> <code
  data-x="">`</code> <code data-x="">=</code> <code data-x="">&lt;</code> or <code
  data-x="">&gt;</code>. Otherwise, it has to be quoted using either single or double quotes. The
  value, along with the "<code data-x="">=</code>" character, can be omitted altogether if the value
  is the empty string.</p>

  <pre><code class="html">&lt;!-- empty attributes -->
&lt;input name=address disabled>
&lt;input name=address disabled="">

&lt;!-- attributes with a value -->
&lt;input name=address maxlength=200>
&lt;input name=address maxlength='200'>
&lt;input name=address maxlength="200"></code></pre>

  <p>HTML user agents (e.g., web browsers) then <i>parse</i> this markup, turning it into a DOM
  (Document Object Model) tree. A DOM tree is an in-memory representation of a document.</p>

  <p>DOM trees contain several kinds of nodes, in particular a <code>DocumentType</code> node,
  <code>Element</code> nodes, <code>Text</code> nodes, <code>Comment</code> nodes, and in some cases
  <code>ProcessingInstruction</code> nodes.</p>

  <p>The <a href="#intro-early-example">markup snippet at the top of this section</a> would be
  turned into the following DOM tree:</p>

  <ul class="domTree"><li class="t10">DOCTYPE: <code data-x="">html</code></li><li class="t1"><code>html</code> <span data-x="" class="t2"><code class="attribute name" data-x="attr-lang">lang</code>="<code class="attribute value" data-x="">en</code>"</span><ul><li class="t1"><code>head</code><ul><li class="t3"><code>#text</code>: <span data-x="">&#x23CE;&#x2423;&#x2423;</span></li><li class="t1"><code>title</code><ul><li class="t3"><code>#text</code>: <span data-x="">Sample page</span></li></ul></li><li class="t3"><code>#text</code>: <span data-x="">&#x23CE;&#x2423;</span></li></ul></li><li class="t3"><code>#text</code>: <span data-x="">&#x23CE;&#x2423;</span></li><li class="t1"><code>body</code><ul><li class="t3"><code>#text</code>: <span data-x="">&#x23CE;&#x2423;&#x2423;</span></li><li class="t1"><code>h1</code><ul><li class="t3"><code>#text</code>: <span data-x="">Sample page</span></li></ul></li><li class="t3"><code>#text</code>: <span data-x="">&#x23CE;&#x2423;&#x2423;</span></li><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <span data-x="">This is a <!--grammar-check-override--></span></li><li class="t1"><code>a</code> <span data-x="" class="t2"><code class="attribute name" data-x="attr-hyperlink-href">href</code>="<code class="attribute value" data-x="">demo.html</code>"</span><ul><li class="t3"><code>#text</code>: <span data-x="">simple</span></li></ul></li><li class="t3"><code>#text</code>: <span data-x=""> sample.</span></li></ul></li><li class="t3"><code>#text</code>: <span data-x="">&#x23CE;&#x2423;&#x2423;</span></li><li class="t8"><code>#comment</code>: <span data-x=""> this is a comment </span></li><li class="t3"><code>#text</code>: <span data-x="">&#x23CE;&#x2423;&#x23CE;</span></li></ul></li></ul></li></ul>

  <p>The <span>document element</span> of this tree is the <code>html</code> element, which is the
  element always found in that position in HTML documents. It contains two elements,
  <code>head</code> and <code>body</code>, as well as a <code>Text</code> node between them.</p>

  <p>There are many more <code>Text</code> nodes in the DOM tree than one would initially expect,
  because the source contains a number of spaces (represented here by "&#x2423;") and line breaks
  ("&#x23CE;") that all end up as <code>Text</code> nodes in the DOM. However, for historical
  reasons not all of the spaces and line breaks in the original markup appear in the DOM. In
  particular, all the whitespace before <code>head</code> start tag ends up being dropped silently,
  and all the whitespace after the <code>body</code> end tag ends up placed at the end of the
  <code>body</code>.</p>

  <p>The <code>head</code> element contains a <code>title</code> element, which itself contains a
  <code>Text</code> node with the text "Sample page". Similarly, the <code>body</code> element
  contains an <code>h1</code> element, a <code>p</code> element, and a comment.</p>

  <hr>

  <p>This DOM tree can be manipulated from scripts in the page. Scripts (typically in JavaScript)
  are small programs that can be embedded using the <code>script</code> element or using <span>event
  handler content attributes</span>. For example, here is a form with a script that sets the value
  of the form's <code>output</code> element to say "Hello World":</p>

  <pre><code class="html">&lt;<span>form</span> <span data-x="attr-form-name">name</span>="main">
 Result: &lt;<span>output</span> <span data-x="attr-fe-name">name</span>="result">&lt;/output>
 &lt;<span>script</span>>
  <span data-x="Document">document</span>.<span data-x="dom-document-forms">forms</span>.main.<span data-x="dom-form-elements">elements</span>.result.<span data-x="dom-output-value">value</span> = 'Hello World';
 &lt;/script>
&lt;/form></code></pre>

  <p>Each element in the DOM tree is represented by an object, and these objects have APIs so that
  they can be manipulated. For instance, a link (e.g. the <code>a</code> element in the tree above)
  can have its "<code data-x="attr-hyperlink-href">href</code>" attribute changed in several
  ways:</p>

  <pre><code class="js">var a = <span data-x="Document">document</span>.<span data-x="dom-document-links">links</span>[0]; // obtain the first link in the document
a.<span data-x="dom-hyperlink-href">href</span> = 'sample.html'; // change the destination URL of the link
a.<span data-x="dom-hyperlink-protocol">protocol</span> = 'https'; // change just the scheme part of the URL
a.setAttribute('href', 'https://example.com/'); // change the content attribute directly</code></pre>

  <p>Since DOM trees are used as the way to represent HTML documents when they are processed and
  presented by implementations (especially interactive implementations like web browsers), this
  specification is mostly phrased in terms of DOM trees, instead of the markup described above.</p>

  <hr>

  <p>HTML documents represent a media-independent description of interactive content. HTML documents
  might be rendered to a screen, or through a speech synthesizer, or on a braille display. To
  influence exactly how such rendering takes place, authors can use a styling language such as
  CSS.</p>

  <p>In the following example, the page has been made yellow-on-blue using CSS.</p>

  <pre><code class="html">&lt;!DOCTYPE html>
&lt;html lang="en">
 &lt;head>
  &lt;title>Sample styled page&lt;/title>
  &lt;style>
   body { background: navy; color: yellow; }
  &lt;/style>
 &lt;/head>
 &lt;body>
  &lt;h1>Sample styled page&lt;/h1>
  &lt;p>This page is just a demo.&lt;/p>
 &lt;/body>
&lt;/html></code></pre>

  <p>For more details on how to use HTML, authors are encouraged to consult tutorials and guides.
  Some of the examples included in this specification might also be of use, but the novice author is
  cautioned that this specification, by necessity, defines the language with a level of detail that
  might be difficult to understand at first.</p>



  <h4>Writing secure applications with HTML</h4>

  <!-- NON-NORMATIVE SECTION -->

  <p>When HTML is used to create interactive sites, care needs to be taken to avoid introducing
  vulnerabilities through which attackers can compromise the integrity of the site itself or of the
  site's users.</p>

  <p>A comprehensive study of this matter is beyond the scope of this document, and authors are
  strongly encouraged to study the matter in more detail. However, this section attempts to provide
  a quick introduction to some common pitfalls in HTML application development.</p>

  <p>The security model of the web is based on the concept of "origins", and correspondingly many of
  the potential attacks on the web involve cross-origin actions. <ref spec=ORIGIN></p>

  <dl>
   <dt>Not validating user input</dt>
   <dt>Cross-site scripting (XSS)</dt>
   <dt>SQL injection</dt>

   <dd>
    <p>When accepting untrusted input, e.g. user-generated content such as text comments, values in
    URL parameters, messages from third-party sites, etc, it is imperative that the data be
    validated before use, and properly escaped when displayed. Failing to do this can allow a
    hostile user to perform a variety of attacks, ranging from the potentially benign, such as
    providing bogus user information like a negative age, to the serious, such as running scripts
    every time a user looks at a page that includes the information, potentially propagating the
    attack in the process, to the catastrophic, such as deleting all data in the server.</p>

    <p>When writing filters to validate user input, it is imperative that filters always be
    safelist-based, allowing known-safe constructs and disallowing all other input. Blocklist-based
    filters that disallow known-bad inputs and allow everything else are not secure, as not
    everything that is bad is yet known (for example, because it might be invented in the
    future).</p>

    <div class="example">

     <p>For example, suppose a page looked at its URL's query string to determine what to display,
     and the site then redirected the user to that page to display a message, as in:</p>

     <pre><code class="html">&lt;ul>
 &lt;li>&lt;a href="message.cgi?say=Hello">Say Hello&lt;/a>
 &lt;li>&lt;a href="message.cgi?say=Welcome">Say Welcome&lt;/a>
 &lt;li>&lt;a href="message.cgi?say=Kittens">Say Kittens&lt;/a>
&lt;/ul></code></pre>

     <p>If the message was just displayed to the user without escaping, a hostile attacker could
     then craft a URL that contained a script element:</p>

     <pre>https://example.com/message.cgi?say=%3Cscript%3Ealert%28%27Oh%20no%21%27%29%3C/script%3E</pre>

     <p>If the attacker then convinced a victim user to visit this page, a script of the attacker's
     choosing would run on the page. Such a script could do any number of hostile actions, limited
     only by what the site offers: if the site is an e-commerce shop, for instance, such a script
     could cause the user to unknowingly make arbitrarily many unwanted purchases.</p>

     <p>This is called a cross-site scripting attack.</p>

    </div>

    <p>There are many constructs that can be used to try to trick a site into executing code. Here
    are some that authors are encouraged to consider when writing safelist filters:</p>

    <ul>

     <li>When allowing harmless-seeming elements like <code>img</code>, it is important to safelist
     any provided attributes as well. If one allowed all attributes then an attacker could, for
     instance, use the <code data-x="handler-onload">onload</code> attribute to run arbitrary
     script.</li>

     <li>When allowing URLs to be provided (e.g. for links), the scheme of each URL also needs to be
     explicitly safelisted, as there are many schemes that can be abused. The most prominent
     example is "<code data-x="javascript protocol">javascript:</code>", but user agents can
     implement (and indeed, have historically implemented) others.</li> <!-- IE had vbscript:,
     Netscape had livescript:, etc. -->

     <li>Allowing a <code>base</code> element to be inserted means any <code>script</code> elements
     in the page with relative links can be hijacked, and similarly that any form submissions can
     get redirected to a hostile site.</li>

    </ul>
   </dd>


   <dt>Cross-site request forgery (CSRF)</dt>

   <dd>
    <p>If a site allows a user to make form submissions with user-specific side-effects, for example
    posting messages on a forum under the user's name, making purchases, or applying for a passport,
    it is important to verify that the request was made by the user intentionally, rather than by
    another site tricking the user into making the request unknowingly.</p>

    <p>This problem exists because HTML forms can be submitted to other origins.</p>

    <p>Sites can prevent such attacks by populating forms with user-specific hidden tokens, or by
    checking `<code data-x="http-origin">Origin</code>` headers on all requests.</p>
   </dd>



   <dt>Clickjacking</dt>

   <dd>
    <p>A page that provides users with an interface to perform actions that the user might not wish
    to perform needs to be designed so as to avoid the possibility that users can be tricked into
    activating the interface.</p>

    <p>One way that a user could be so tricked is if a hostile site places the victim site in a
    small <code>iframe</code> and then convinces the user to click, for instance by having the user
    play a reaction game. Once the user is playing the game, the hostile site can quickly position
    the iframe under the mouse cursor just as the user is about to click, thus tricking the user
    into clicking the victim site's interface.</p>

    <p>To avoid this, sites that do not expect to be used in frames are encouraged to only enable
    their interface if they detect that they are not in a frame (e.g. by comparing the <code
    data-x="dom-window">window</code> object to the value of the <code data-x="dom-top">top</code>
    attribute).</p>
   </dd>
  </dl>


  <h4>Common pitfalls to avoid when using the scripting APIs</h4>

  <!-- NON-NORMATIVE SECTION -->

  <p>Scripts in HTML have "run-to-completion" semantics, meaning that the browser will generally run
  the script uninterrupted before doing anything else, such as firing further events or continuing
  to parse the document.</p>

  <p>On the other hand, parsing of HTML files happens incrementally, meaning that
  the parser can pause at any point to let scripts run. This is generally a good thing, but it does
  mean that authors need to be careful to avoid hooking event handlers after the events could have
  possibly fired.</p>

  <p>There are two techniques for doing this reliably: use <span>event handler content
  attributes</span>, or create the element and add the event handlers in the same script. The latter
  is safe because, as mentioned earlier, scripts are run to completion before further events can
  fire.</p>

  <div class="example">

   <p>One way this could manifest itself is with <code>img</code> elements and the <code
   data-x="event-load">load</code> event. The event could fire as soon as the element has been
   parsed, especially if the image has already been cached (which is common).</p>

   <p>Here, the author uses the <code data-x="handler-onload">onload</code> handler on an
   <code>img</code> element to catch the <code data-x="event-load">load</code> event:</p>

   <pre><code class="html">&lt;img src="games.png" alt="Games" onload="gamesLogoHasLoaded(event)"></code></pre>

   <p>If the element is being added by script, then so long as the event handlers are added in the
   same script, the event will still not be missed:</p>

   <pre><code class="html">&lt;script>
 var img = new Image();
 img.src = 'games.png';
 img.alt = 'Games';
 img.onload = gamesLogoHasLoaded;
 // img.addEventListener('load', gamesLogoHasLoaded, false); // would work also
&lt;/script></code></pre>

   <p>However, if the author first created the <code>img</code> element and then in a separate
   script added the event listeners, there's a chance that the <code data-x="event-load">load</code>
   event would be fired in between, leading it to be missed:</p>

   <pre class="bad"><code class="html">&lt;!-- Do not use this style, it has a race condition! -->
 &lt;img id="games" src="games.png" alt="Games">
 &lt;!-- the 'load' event might fire here while the parser is taking a
      break, in which case you will not see it! -->
 &lt;script>
  var img = document.getElementById('games');
  img.onload = gamesLogoHasLoaded; // might never fire!
 &lt;/script></code></pre>

  </div>



  <h4>How to catch mistakes when writing HTML: validators and conformance checkers</h4>

  <!-- NON-NORMATIVE SECTION -->

  <p>Authors are encouraged to make use of conformance checkers (also known as <i>validators</i>) to
  catch common mistakes. The WHATWG maintains a list of such tools at: <a
  href="https://whatwg.org/validator/">https://whatwg.org/validator/</a></p>



  <h3>Conformance requirements for authors</h3>

  <!-- NON-NORMATIVE SECTION -->

  <p>Unlike previous versions of the HTML specification, this specification defines in some detail
  the required processing for invalid documents as well as valid documents.</p> <!-- This has led to
  some questioning the purpose of conformance criteria: if there is no ambiguity in how something
  will be processed, why disallow it? -->

  <p>However, even though the processing of invalid content is in most cases well-defined,
  conformance requirements for documents are still important: in practice, interoperability (the
  situation in which all implementations process particular content in a reliable and identical or
  equivalent way) is not the only goal of document conformance requirements. This section details
  some of the more common reasons for still distinguishing between a conforming document and one
  with errors.</p>


  <h4>Presentational markup</h4>

  <!-- NON-NORMATIVE SECTION -->

  <p>The majority of presentational features from previous versions of HTML are no longer allowed.
  Presentational markup in general has been found to have a number of problems:</p>

  <dl>
   <dt>The use of presentational elements leads to poorer accessibility</dt>

   <dd>
    <p>While it is possible to use presentational markup in a way that provides users of assistive
    technologies (ATs) with an acceptable experience (e.g. using ARIA), doing so is significantly
    more difficult than doing so when using semantically-appropriate markup. Furthermore, even using
    such techniques doesn't help make pages accessible for non-AT non-graphical users, such as users
    of text-mode browsers.</p>

    <p>Using media-independent markup, on the other hand, provides an easy way for documents to be
    authored in such a way that they work for more users (e.g. users of text browsers).</p>
   </dd>


   <dt>Higher cost of maintenance</dt>

   <dd>
    <p>It is significantly easier to maintain a site written in such a way that the markup is
    style-independent. For example, changing the color of a site that uses <code
    data-x="">&lt;font&nbsp;color=""></code> throughout requires changes across the entire site,
    whereas a similar change to a site based on CSS can be done by changing a single file.</p>
   </dd>


   <dt>Larger document sizes</dt>

   <dd>
    <p>Presentational markup tends to be much more redundant, and thus results in larger document
    sizes.</p>
   </dd>
  </dl>

  <p>For those reasons, presentational markup has been removed from HTML in this version. This
  change should not come as a surprise; HTML4 deprecated presentational markup many years ago and
  provided a mode (HTML4 Transitional) to help authors move away from presentational markup; later,
  XHTML 1.1 went further and obsoleted those features altogether.</p>

  <p>The only remaining presentational markup features in HTML are the <code
  data-x="attr-style">style</code> attribute and the <code>style</code> element. Use of the <code
  data-x="attr-style">style</code> attribute is somewhat discouraged in production environments, but
  it can be useful for rapid prototyping (where its rules can be directly moved into a separate
  style sheet later) and for providing specific styles in unusual cases where a separate style sheet
  would be inconvenient. Similarly, the <code>style</code> element can be useful in syndication or
  for page-specific styles, but in general an external style sheet is likely to be more convenient
  when the styles apply to multiple pages.</p>

  <p>It is also worth noting that some elements that were previously presentational have been
  redefined in this specification to be media-independent: <code>b</code>, <code>i</code>,
  <code>hr</code>, <code>s</code>, <code>small</code>, and <code>u</code>.</p>


  <h4>Syntax errors</h4>

  <!-- NON-NORMATIVE SECTION -->

  <p>The syntax of HTML is constrained to avoid a wide variety of problems.</p>

  <dl>
   <dt>Unintuitive error-handling behavior</dt>

   <dd>
    <p>Certain invalid syntax constructs, when parsed, result in DOM trees that are highly
    unintuitive.</p>

    <div class="example">

     <p>For example, the following markup fragment results in a DOM with an <code>hr</code> element
     that is an <em>earlier</em> sibling of the corresponding <code>table</code> element:</p>

     <pre class="bad"><code class="html">&lt;table>&lt;hr>...</code></pre>

    </div>
   </dd>


   <dt>Errors with optional error recovery</dt>

   <dd>
    <p>To allow user agents to be used in controlled environments without having to implement the
    more bizarre and convoluted error handling rules, user agents are permitted to fail whenever
    encountering a <span>parse error</span>.</p>
   </dd>


   <dt>Errors where the error-handling behavior is not compatible with streaming user agents</dt>

   <dd>
    <p>Some error-handling behavior, such as the behavior for the <code
    data-x="">&lt;table>&lt;hr>...</code> example mentioned above, are incompatible with streaming
    user agents (user agents that process HTML files in one pass, without storing state). To avoid
    interoperability problems with such user agents, any syntax resulting in such behavior is
    considered invalid.</p>
   </dd>


   <dt>Errors that can result in infoset coercion</dt>

   <dd>
    <p>When a user agent based on XML is connected to an HTML parser, it is possible that certain
    invariants that XML enforces, such as element or attribute names never contain multiple colons,
    will be violated by an HTML file. Handling this can require that the parser coerce the HTML DOM
    into an XML-compatible infoset. Most syntax constructs that require such handling are considered
    invalid. (Comments containing two consecutive hyphens, or ending with a hyphen, are exceptions
    that are allowed in the HTML syntax.)</p>
   </dd>


   <dt>Errors that result in disproportionately poor performance</dt>

   <dd>
    <p>Certain syntax constructs can result in disproportionately poor performance. To discourage the
    use of such constructs, they are typically made non-conforming.</p>

    <div class="example">

     <p>For example, the following markup results in poor performance, since all the unclosed
     <code>i</code> elements have to be reconstructed in each paragraph, resulting in progressively
     more elements in each paragraph:</p>

     <pre class="bad"><code class="html">&lt;p>&lt;i>She dreamt.
&lt;p>&lt;i>She dreamt that she ate breakfast.
&lt;p>&lt;i>Then lunch.
&lt;p>&lt;i>And finally dinner.</code></pre>

     <p>The resulting DOM for this fragment would be:</p>

     <ul class="domTree"><li class="t1"><code>p</code><ul><li class="t1"><code>i</code><ul><li class="t3"><code>#text</code>: <span data-x="">She dreamt.</span></li></ul></li></ul></li><li class="t1"><code>p</code><ul><li class="t1"><code>i</code><ul><li class="t1"><code>i</code><ul><li class="t3"><code>#text</code>: <span data-x="">She dreamt that she ate breakfast.</span></li></ul></li></ul></li></ul></li><li class="t1"><code>p</code><ul><li class="t1"><code>i</code><ul><li class="t1"><code>i</code><ul><li class="t1"><code>i</code><ul><li class="t3"><code>#text</code>: <span data-x="">Then lunch.</span></li></ul></li></ul></li></ul></li></ul></li><li class="t1"><code>p</code><ul><li class="t1"><code>i</code><ul><li class="t1"><code>i</code><ul><li class="t1"><code>i</code><ul><li class="t1"><code>i</code><ul><li class="t3"><code>#text</code>: <span data-x="">And finally dinner.</span></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>

    </div>
   </dd>


   <dt>Errors involving fragile syntax constructs</dt>

   <dd>
    <p>There are syntax constructs that, for historical reasons, are relatively fragile. To help
    reduce the number of users who accidentally run into such problems, they are made
    non-conforming.</p>

    <div class="example">

     <p>For example, the parsing of certain named character references in attributes happens even
     with the closing semicolon being omitted. It is safe to include an ampersand followed by
     letters that do not form a named character reference, but if the letters are changed to a
     string that <em>does</em> form a named character reference, they will be interpreted as that
     character instead.</p>

     <p>In this fragment, the attribute's value is "<code data-x="">?bill&amp;ted</code>":</p>

     <pre class="bad"><code class="html">&lt;a href="?bill&amp;ted">Bill and Ted&lt;/a></code></pre>

     <p>In the following fragment, however, the attribute's value is actually "<code
     data-x="">?art&copy;</code>", <em>not</em> the intended "<code data-x="">?art&amp;copy</code>",
     because even without the final semicolon, "<code data-x="">&amp;copy</code>" is handled the same
     as "<code data-x="">&amp;copy;</code>" and thus gets interpreted as "<code
     data-x="">&copy;</code>":</p>

     <pre class="bad"><code class="html">&lt;a href="?art&amp;copy">Art and Copy&lt;/a></code></pre>

     <p>To avoid this problem, all named character references are required to end with a semicolon,
     and uses of named character references without a semicolon are flagged as errors.</p>

     <p>Thus, the correct way to express the above cases is as
     follows:</p>

     <pre><code class="html">&lt;a href="?bill&amp;ted">Bill and Ted&lt;/a> &lt;!-- &amp;ted is ok, since it's not a named character reference --></code></pre>
     <pre><code class="html">&lt;a href="?art&amp;amp;copy">Art and Copy&lt;/a> &lt;!-- the &amp; has to be escaped, since &amp;copy <em>is</em> a named character reference --></code></pre>

    </div>
   </dd>


   <dt>Errors involving known interoperability problems in legacy user agents</dt>

   <dd>
    <p>Certain syntax constructs are known to cause especially subtle or serious problems in legacy
    user agents, and are therefore marked as non-conforming to help authors avoid them.</p>

    <div class="example">

     <p>For example, this is why the U+0060 GRAVE ACCENT character (`) is not allowed in unquoted
     attributes. In certain legacy user agents, <!-- namely IE --> it is sometimes treated as a
     quote character.</p>

    </div>

    <div class="example">

     <p>Another example of this is the DOCTYPE, which is required to trigger <span>no-quirks
     mode</span>, because the behavior of legacy user agents in <span>quirks mode</span> is often
     largely undocumented.</p>

    </div>
   </dd>


   <dt>Errors that risk exposing authors to security attacks</dt>

   <dd>
    <p>Certain restrictions exist purely to avoid known security problems.</p>

    <div class="example">

     <p>For example, the restriction on using UTF-7 exists purely to avoid authors falling prey to a
     known cross-site-scripting attack using UTF-7. <ref spec=UTF7></p>

    </div>
   </dd>


   <dt>Cases where the author's intent is unclear</dt>

   <dd>
    <p>Markup where the author's intent is very unclear is often made non-conforming. Correcting
    these errors early makes later maintenance easier.</p>

    <div class="example">

     <p>For example, it is unclear whether the author intended the following to be an
     <code>h1</code> heading or an <code>h2</code> heading:</p>

     <pre class="bad"><code class="html">&lt;h1>Contact details&lt;/h2></code></pre>

    </div>
   </dd>


   <dt>Cases that are likely to be typos</dt>

   <dd>
    <p>When a user makes a simple typo, it is helpful if the error can be caught early, as this can
    save the author a lot of debugging time. This specification therefore usually considers it an
    error to use element names, attribute names, and so forth, that do not match the names defined
    in this specification.</p>

    <div class="example">

     <p>For example, if the author typed <code data-x="">&lt;capton></code> instead of <code
     data-x="">&lt;caption></code>, this would be flagged as an error and the author could correct
     the typo immediately.</p>

    </div>
   </dd>


   <dt>Errors that could interfere with new syntax in the future</dt>

   <dd>
    <p>In order to allow the language syntax to be extended in the future, certain otherwise
    harmless features are disallowed.</p>

    <div class="example">

     <p>For example, "attributes" in end tags are ignored currently, but they are invalid, in case a
     future change to the language makes use of that syntax feature without conflicting with
     already-deployed (and valid!) content.</p>

    </div>
   </dd>
  </dl>

  <p>Some authors find it helpful to be in the practice of always quoting all attributes and always
  including all optional tags, preferring the consistency derived from such custom over the minor
  benefits of terseness afforded by making use of the flexibility of the HTML syntax. To aid such
  authors, conformance checkers can provide modes of operation wherein such conventions are
  enforced.</p>



  <h4>Restrictions on content models and on attribute values</h4>

  <!-- NON-NORMATIVE SECTION -->

  <p>Beyond the syntax of the language, this specification also places restrictions on how elements
  and attributes can be specified. These restrictions are present for similar reasons:</p>

  <dl>

   <dt>Errors involving content with dubious semantics</dt>

   <dd>
    <p>To avoid misuse of elements with defined meanings, content models are defined that restrict
    how elements can be nested when such nestings would be of dubious value.</p>

    <p class="example">For example, this specification disallows nesting a <code>section</code>
    element inside a <code>kbd</code> element, since it is highly unlikely for an author to indicate
    that an entire section <!--non-normative-->should be keyed in.</p>
   </dd>


   <dt>Errors that involve a conflict in expressed semantics</dt>

   <dd>
    <p>Similarly, to draw the author's attention to mistakes in the use of elements, clear
    contradictions in the semantics expressed are also considered conformance errors.</p>

    <div class="example">

     <p>In the fragments below, for example, the semantics are nonsensical: a separator cannot
     simultaneously be a cell, nor can a radio button be a progress bar.</p>

     <pre class="bad"><code class="html">&lt;hr role="cell"></code></pre>
     <pre class="bad"><code class="html">&lt;input type=radio role=progressbar></code></pre>

    </div>

    <p class="example">Another example is the restrictions on the content models of the
    <code>ul</code> element, which only allows <code>li</code> element children. Lists by definition
    consist just of zero or more list items, so if a <code>ul</code> element contains something
    other than an <code>li</code> element, it's not clear what was meant.</p>
   </dd>


   <dt>Cases where the default styles are likely to lead to confusion</dt>

   <dd>
    <p>Certain elements have default styles or behaviors that make certain combinations likely to
    lead to confusion. Where these have equivalent alternatives without this problem, the confusing
    combinations are disallowed.</p>

    <p class="example">For example, <code>div</code> elements are rendered as <span
    data-x="block box">block boxes</span>, and <code>span</code> elements as <span
    data-x="inline box">inline boxes</span>. Putting a <span>block box</span> in an
    <span>inline box</span> is unnecessarily confusing; since either nesting just <code>div</code>
    elements, or nesting just <code>span</code> elements, or nesting <code>span</code> elements
    inside <code>div</code> elements all serve the same purpose as nesting a <code>div</code>
    element in a <code>span</code> element, but only the latter involves a <span>block box</span> in
    an <span>inline box</span>, the latter combination is disallowed.</p>

    <p class="example">Another example would be the way <span>interactive content</span> cannot be
    nested. For example, a <code>button</code> element cannot contain a <code>textarea</code>
    element. This is because the default behavior of such nesting interactive elements would be
    highly confusing to users. Instead of nesting these elements, they can be placed side by
    side.</p>
   </dd>


   <dt>Errors that indicate a likely misunderstanding of the specification</dt>

   <dd>
    <p>Sometimes, something is disallowed because allowing it would likely cause author
    confusion.</p>

    <p class="example">For example, setting the <code data-x="attr-fe-disabled">disabled</code>
    attribute to the value "<code data-x="">false</code>" is disallowed, because despite the
    appearance of meaning that the element is enabled, it in fact means that the element is
    <em>disabled</em> (what matters for implementations is the presence of the attribute, not its
    value).</p>
   </dd>


   <dt>Errors involving limits that have been imposed merely to simplify the language</dt>

   <dd>
    <p>Some conformance errors simplify the language that authors need to learn.</p>

    <p class="example">For example, the <code>area</code> element's <code
    data-x="attr-area-shape">shape</code> attribute, despite accepting both <code
    data-x="attr-area-shape-keyword-circ">circ</code> and <code
    data-x="attr-area-shape-keyword-circle">circle</code> values in practice as synonyms, disallows
    the use of the <code data-x="attr-area-shape-keyword-circ">circ</code> value, so as to simplify
    tutorials and other learning aids. There would be no benefit to allowing both, but it would
    cause extra confusion when teaching the language.</p>
   </dd>


   <dt>Errors that involve peculiarities of the parser</dt>

   <dd>
    <p>Certain elements are parsed in somewhat eccentric ways (typically for historical reasons),
    and their content model restrictions are intended to avoid exposing the author to these
    issues.</p>

    <div class="example">

     <p>For example, a <code>form</code> element isn't allowed inside <span>phrasing content</span>,
     because when parsed as HTML, a <code>form</code> element's start tag will imply a
     <code>p</code> element's end tag. Thus, the following markup results in two <span
     data-x="paragraph">paragraphs</span>, not one:</p>

     <pre><code class="html">&lt;p>Welcome. &lt;form>&lt;label>Name:&lt;/label> &lt;input>&lt;/form></code></pre>

     <p>It is parsed exactly like the following:</p>

     <pre><code class="html">&lt;p>Welcome. &lt;/p>&lt;form>&lt;label>Name:&lt;/label> &lt;input>&lt;/form></code></pre>

    </div>
   </dd>


   <dt>Errors that would likely result in scripts failing in hard-to-debug ways</dt>

   <dd>
    <p>Some errors are intended to help prevent script problems that would be hard to debug.</p>

    <p class="example">This is why, for instance, it is non-conforming to have two <code
    data-x="attr-id">id</code> attributes with the same value. Duplicate IDs lead to the wrong
    element being selected, with sometimes disastrous effects whose cause is hard to determine.</p>
   </dd>


   <dt>Errors that waste authoring time</dt>

   <dd>
    <p>Some constructs are disallowed because historically they have been the cause of a lot of
    wasted authoring time, and by encouraging authors to avoid making them, authors can save time in
    future efforts.</p>

    <p class="example">For example, a <code>script</code> element's <code
    data-x="attr-script-src">src</code> attribute causes the element's contents to be ignored.
    However, this isn't obvious, especially if the element's contents appear to be executable script
    &mdash; which can lead to authors spending a lot of time trying to debug the inline script
    without realizing that it is not executing. To reduce this problem, this specification makes it
    non-conforming to have executable script in a <code>script</code> element when the <code
    data-x="attr-script-src">src</code> attribute is present. This means that authors who are
    validating their documents are less likely to waste time with this kind of mistake.</p>
   </dd>


   <dt>Errors that involve areas that affect authors migrating between the HTML and XML
   syntaxes</dt>

   <dd>
    <p>Some authors like to write files that can be interpreted as both XML and HTML with similar
    results. Though this practice is discouraged in general due to the myriad of subtle
    complications involved (especially when involving scripting, styling, or any kind of automated
    serialization), this specification has a few restrictions intended to at least somewhat mitigate
    the difficulties. This makes it easier for authors to use this as a transitionary step when
    migrating between the HTML and XML syntaxes.</p>

    <p class="example">For example, there are somewhat complicated rules surrounding the <code
    data-x="attr-lang">lang</code> and <code data-x="attr-xml-lang">xml:lang</code> attributes
    intended to keep the two synchronized.</p>

    <p class="example">Another example would be the restrictions on the values of <code
    data-x="">xmlns</code> attributes in the HTML serialization, which are intended to ensure that
    elements in conforming documents end up in the same namespaces whether processed as HTML or
    XML.</p>
   </dd>


   <dt>Errors that involve areas reserved for future expansion</dt>

   <dd>
    <p>As with the restrictions on the syntax intended to allow for new syntax in future revisions
    of the language, some restrictions on the content models of elements and values of attributes
    are intended to allow for future expansion of the HTML vocabulary.</p>

    <p class="example">For example, limiting the values of the <code
    data-x="attr-hyperlink-target">target</code> attribute that start with an U+005F LOW LINE
    character (_) to only specific predefined values allows new predefined values to be introduced
    at a future time without conflicting with author-defined values.</p>
   </dd>


   <dt>Errors that indicate a mis-use of other specifications</dt>

   <dd>
    <p>Certain restrictions are intended to support the restrictions made by other
    specifications.</p>

    <p class="example">For example, requiring that attributes that take media query lists use only
    <em>valid</em> media query lists reinforces the importance of following the conformance rules of
    that specification.</p>
   </dd>
  </dl>



  <h3>Suggested reading</h3>

  <!-- NON-NORMATIVE SECTION -->

  <p>The following documents might be of interest to readers of this specification.</p>

  <dl>
   <dt><cite>Character Model for the World Wide Web 1.0: Fundamentals</cite> <ref spec=CHARMOD></dt>

   <dd><blockquote><p>This Architectural Specification provides authors of specifications, software
   developers, and content developers with a common reference for interoperable text manipulation on
   the World Wide Web, building on the Universal Character Set, defined jointly by the Unicode
   Standard and ISO/IEC 10646. Topics addressed include use of the terms 'character', 'encoding' and
   'string', a reference processing model, choice and identification of character encodings,
   character escaping, and string indexing.</p></blockquote></dd>

   <dt><cite>Unicode Security Considerations</cite> <ref spec=UTR36></dt>

   <dd><blockquote><p>Because Unicode contains such a large number of characters and incorporates
   the varied writing systems of the world, incorrect usage can expose programs or systems to
   possible security attacks. This is especially important as more and more products are
   internationalized. This document describes some of the security considerations that programmers,
   system analysts, standards developers, and users should take into account, and provides specific
   recommendations to reduce the risk of problems.</p></blockquote></dd>

   <dt><cite>Web Content Accessibility Guidelines (WCAG)</cite> <ref spec=WCAG></dt>

   <dd><blockquote><p>Web Content Accessibility Guidelines (WCAG) covers a wide range of
   recommendations for making web content more accessible. Following these guidelines will make
   content accessible to a wider range of people with disabilities, including blindness and low
   vision, deafness and hearing loss, learning disabilities, cognitive limitations, limited
   movement, speech disabilities, photosensitivity and combinations of these. Following these
   guidelines will also often make your web content more usable to users in
   general.</p></blockquote></dd>

   <dt w-nodev><cite>Authoring Tool Accessibility Guidelines (ATAG) 2.0</cite> <ref spec=ATAG></dt>

   <dd w-nodev><blockquote><p>This specification provides guidelines for designing web content
   authoring tools that are more accessible for people with disabilities. An authoring tool that
   conforms to these guidelines will promote accessibility by providing an accessible user interface
   to authors with disabilities as well as by enabling, supporting, and promoting the production of
   accessible web content by all authors.</p></blockquote></dd>

   <dt w-nodev><cite>User Agent Accessibility Guidelines (UAAG) 2.0</cite> <ref spec=UAAG></dt>

   <dd w-nodev><blockquote><p>This document provides guidelines for designing user agents that
   lower barriers to web accessibility for people with disabilities. User agents include browsers
   and other types of software that retrieve and render web content. A user agent that conforms to
   these guidelines will promote accessibility through its own user interface and through other
   internal facilities, including its ability to communicate with other technologies (especially
   assistive technologies). Furthermore, all users, not just users with disabilities, should find
   conforming user agents to be more usable.</p></blockquote></dd>
  </dl>



  <h2 split-filename="infrastructure" id="infrastructure">Common infrastructure</h2>

  <p>This specification depends on <cite>Infra</cite>. <ref spec=INFRA></p>

  <h3>Terminology</h3>

  <p>This specification refers to both HTML and XML attributes and IDL attributes, often in the same
  context. When it is not clear which is being referred to, they are referred to as <dfn
  data-x="" data-lt="content attribute" export>content attributes</dfn> for HTML and XML attributes,
  and <dfn data-x="">IDL attributes</dfn> for those defined on IDL interfaces. Similarly, the term
  "properties" is used for both JavaScript object properties and CSS properties. When these are
  ambiguous they are qualified as <dfn data-x="">object properties</dfn> and <dfn data-x="">CSS properties</dfn> respectively.</p>

  <p>Generally, when the specification states that a feature applies to <span>the HTML syntax</span>
  or <span>the XML syntax</span>, it also includes the other. When a feature specifically only
  applies to one of the two languages, it is called out by explicitly stating that it does not apply
  to the other format, as in "for HTML, ... (this does not apply to XML)".</p>

  <p>This specification uses the term <dfn data-x="">document</dfn> to refer to any use of HTML,
  ranging from short static documents to long essays or reports with rich multimedia, as well as to
  fully-fledged interactive applications. The term is used to refer both to <code>Document</code>
  objects and their descendant DOM trees, and to serialized byte streams using the <span data-x="the
  HTML syntax">HTML syntax</span> or the <span data-x="the XML syntax">XML syntax</span>, depending
  on context.</p>

  <p>In the context of the DOM structures, the terms <span data-x="HTML documents">HTML
  document</span> and <span data-x="XML documents">XML document</span> are used as defined in
  <cite>DOM</cite>, and refer specifically to two different modes that <code>Document</code> objects
  can find themselves in. <ref spec=DOM> (Such uses are always hyperlinked to their
  definition.)</p>

  <p>In the context of byte streams, the term HTML document refers to resources labeled as
  <code>text/html</code>, and the term XML document refers to resources labeled with an <span>XML
  MIME type</span>.</p>

  <hr>

  <p>For simplicity, terms such as <dfn data-x="">shown</dfn>, <dfn data-x="">displayed</dfn>, and
  <dfn data-x="">visible</dfn> might sometimes be used when referring to the way a document is
  rendered to the user. These terms are not meant to imply a visual medium; they must be considered
  to apply to other media in equivalent ways.</p>


  <div w-nodev>

  <h4>Parallelism</h4>

  <p>To run steps <dfn export>in parallel</dfn> means those steps are to be run, one after another,
  at the same time as other logic in the standard (e.g., at the same time as the <span>event
  loop</span>). This standard does not define the precise mechanism by which this is achieved, be it
  time-sharing cooperative multitasking, fibers, threads, processes, using different hyperthreads,
  cores, CPUs, machines, etc. By contrast, an operation that is to run <dfn>immediately</dfn> must
  interrupt the currently running task, run itself, and then resume the previously running task.</p>

  <p class="note">For guidance on writing specifications that leverage parallelism, see <a
  href="#event-loop-for-spec-authors">Dealing with the event loop from other specifications</a>.</p>

  <p>To avoid race conditions between different <span>in parallel</span> algorithms that operate on
  the same data, a <span>parallel queue</span> can be used.</p>

  <p>A <dfn export>parallel queue</dfn> represents a queue of algorithm steps that must be run in
  series.</p>

  <p>A <span>parallel queue</span> has an <dfn>algorithm queue</dfn> (a <span>queue</span>),
  initially empty.</p>

  <p>To <dfn data-x="enqueue the following steps" data-lt="enqueue steps|enqueue the following
  steps" export for="parallel queue">enqueue steps</dfn> to a <span>parallel queue</span>,
  <span>enqueue</span> the algorithm steps to the <span>parallel queue</span>'s <span>algorithm
  queue</span>.</p>

  <p>To <dfn data-x="starting a new parallel queue" data-lt="start a new parallel queue|starting a
  new parallel queue" export>start a new parallel queue</dfn>, run the following steps:</p>

  <ol>
   <li><p>Let <var>parallelQueue</var> be a new <span>parallel queue</span>.</p></li>

   <li>
    <p>Run the following steps <span>in parallel</span>:</p>

    <ol>
     <li>
      <p>While true:</p>

      <ol>
       <li><p>Let <var>steps</var> be the result of <span data-x="dequeue">dequeueing</span> from
       <var>parallelQueue</var>'s <span>algorithm queue</span>.</p></li>

       <li><p>If <var>steps</var> is not nothing, then run <var>steps</var>.</p></li>

       <li><p><span>Assert</span>: running <var>steps</var> did not throw an exception, as steps
       running <span>in parallel</span> are not allowed to throw.</p></li>
      </ol>

      <p class="note">Implementations are not expected to implement this as a continuously running
      loop. Algorithms in standards are to be easy to understand and are not necessarily great for
      battery life or performance.</p>
     </li>
    </ol>
   </li>

   <li><p>Return <var>parallelQueue</var>.</p></li>
  </ol>

  <p class="note">Steps running <span>in parallel</span> can themselves run other steps in <span>in
  parallel</span>. E.g., inside a <span>parallel queue</span> it can be useful to run a series of
  steps in parallel with the queue.</p>

  <div class="example">
   <p>Imagine a standard defined <var>nameList</var> (a <span>list</span>), along with a method to
   add a <var>name</var> to <var>nameList</var>, unless <var>nameList</var> already <span
   data-x="list contains">contains</span> <var>name</var>, in which case it rejects.</p>

   <p>The following solution suffers from race conditions:</p>

   <ol>
    <li><p>Let <var>p</var> be a new promise.</p></li>

    <li>
     <p>Run the following steps <span>in parallel</span>:</p>

     <ol>
      <li><p>If <var>nameList</var> <span data-x="list contains">contains</span> <var>name</var>,
      reject <var>p</var> with a <code>TypeError</code> and abort these steps.</p></li>

      <li><p>Do some potentially lengthy work.</p></li>

      <li><p><span data-x="list append">Append</span> <var>name</var> to
      <var>nameList</var>.</p></li>

      <li><p>Resolve <var>p</var> with undefined.</p></li>
     </ol>
    </li>

    <li><p>Return <var>p</var>.</p></li>
   </ol>

   <p>Two invocations of the above could run simultaneously, meaning <var>name</var> isn't in
   <var>nameList</var> during step 2.1, but it <em>might be added</em> before step 2.3 runs,
   meaning <var>name</var> ends up in <var>nameList</var> twice.</p>

   <p>Parallel queues solve this. The standard would let <var>nameListQueue</var> be the result of
   <span>starting a new parallel queue</span>, then:</p>

   <ol>
    <li><p>Let <var>p</var> be a new promise.</p></li>

    <li>
     <p><mark><span>Enqueue the following steps</span> to <var>nameListQueue</var>:</mark></p>

     <ol>
      <li><p>If <var>nameList</var> <span data-x="list contains">contains</span> <var>name</var>,
      reject <var>p</var> with a <code>TypeError</code> and abort these steps.</p></li>

      <li><p>Do some potentially lengthy work.</p></li>

      <li><p><span data-x="list append">Append</span> <var>name</var> to
      <var>nameList</var>.</p></li>

      <li><p>Resolve <var>p</var> with undefined.</p></li>
     </ol>
    </li>

    <li><p>Return <var>p</var>.</p></li>
   </ol>

   <p>The steps would now queue and the race is avoided.</p>
  </div>

  </div>


  <h4>Resources</h4>

  <p>The specification uses the term <dfn data-x="">supported</dfn> when referring to whether a user
  agent has an implementation capable of decoding the semantics of an external resource. A format or
  type is said to be <i>supported</i> if the implementation can process an external resource of that
  format or type without critical aspects of the resource being ignored. Whether a specific resource
  is <i>supported</i> can depend on what features of the resource's format are in use.</p>

  <p class="example">For example, a PNG image would be considered to be in a supported format if its
  pixel data could be decoded and rendered, even if, unbeknownst to the implementation, the image
  also contained animation data.</p>

  <p class="example">An MPEG-4 video file would not be considered to be in a supported format if the
  compression format used was not supported, even if the implementation could determine the
  dimensions of the movie from the file's metadata.</p>

  <p>What some specifications, in particular the HTTP specifications, refer to as a
  <i>representation</i> is referred to in this specification as a <dfn data-x="">resource</dfn>.
  <ref spec=HTTP></p>

  <p>A resource's <dfn>critical subresources</dfn> are those that the resource needs to have
  available to be correctly processed. Which resources are considered critical or not is defined by
  the specification that defines the resource's format.</p>

  <p>For <span data-x="CSS style sheet">CSS style sheets</span>, we tentatively define here that
  their critical subresources are other style sheets imported via <code data-x="">@import</code>
  rules, including those indirectly imported by other imported style sheets.</p>

  <p class="XXX">This definition is not fully interoperable; furthermore, some user agents seem to
  count resources like background images or web fonts as critical subresources. Ideally, the CSS
  Working Group would define this; see <a
  href="https://github.com/w3c/csswg-drafts/issues/1088">w3c/csswg-drafts issue #1088</a> to track
  progress on that front.</p>


  <h4 id="xml">XML compatibility</h4>

  <p id="html-namespace">To ease migration from HTML to XML, user agents conforming to this
  specification will place elements in HTML in the <code data-x="HTML
  namespace">http://www.w3.org/1999/xhtml</code> namespace, at least for the purposes of the DOM and
  CSS. The term "<dfn export>HTML elements</dfn>" refers to any element in that namespace, even in
  XML documents.</p>

  <p>Except where otherwise stated, all elements defined or mentioned in this specification are in
  the <span>HTML namespace</span> ("<code data-x="">http://www.w3.org/1999/xhtml</code>"), and all
  attributes defined or mentioned in this specification have no namespace.</p>

  <p>The term <dfn>element type</dfn> is used to refer to the set of elements that have a given
  local name and namespace. For example, <code>button</code> elements are elements with the element
  type <code>button</code>, meaning they have the local name "<code data-x="">button</code>" and
  (implicitly as defined above) the <span>HTML namespace</span>.</p>

  <p>Attribute names are said to be <dfn>XML-compatible</dfn> if they match the <code
  data-x="xml-Name">Name</code> production defined in XML and they contain no U+003A COLON
  characters (:). <ref spec=XML></p>


  <h4>DOM trees</h4>

  <p>When it is stated that some element or attribute is <dfn data-x="ignore">ignored</dfn>, or
  treated as some other value, or handled as if it was something else, this refers only to the
  processing of the node after it is in the DOM. <span w-nodev>A user agent must not mutate the
  DOM in such situations.</span></p>

  <p>A content attribute is said to <dfn data-x="">change</dfn> value only if its new value is
  different than its previous value; setting an attribute to a value it already has does not change
  it.</p>

  <p>The term <dfn data-x="">empty</dfn>, when used for an attribute value, <code>Text</code> node,
  or string, means that the <span>length</span> of the text is zero (i.e., not even containing <span
  data-x="control">controls</span> or U+0020 SPACE).</p>

  <p>An HTML element can have specific <dfn>HTML element insertion steps</dfn> defined for the
  element's <span data-x="concept-element-local-name">local name</span>. Similarly, an HTML element
  can have specific <dfn>HTML element removing steps</dfn> defined for the element's <span
  data-x="concept-element-local-name">local name</span>.</p>

  <p>The <span data-x="concept-node-insert-ext">insertion steps</span> for the HTML Standard, given
  <var>insertedNode</var>, are defined as the following:</p>

  <ol>
   <li><p>If <var>insertedNode</var> is an element whose <span
   data-x="concept-element-namespace">namespace</span> is the <span>HTML namespace</span>, and this
   standard defines <span data-x="html element insertion steps">HTML element insertion steps</span>
   for <var>insertedNode</var>'s <span data-x="concept-element-local-name">local name</span>, then
   run the corresponding <span>HTML element insertion steps</span> given
   <var>insertedNode</var>.</p></li>

   <li>
    <p>If <var>insertedNode</var> is a <span>form-associated element</span> or the ancestor of a
    <span>form-associated element</span>, then:</p>

    <ol>
     <li><p>If the <span>form-associated element</span>'s <span>parser inserted flag</span> is set,
     then return.</p></li>

     <li><p><span>Reset the form owner</span> of the <span>form-associated element</span>.</p></li>
    </ol>
   </li>
  </ol>

  <p>The <span data-x="concept-node-remove-ext">removing steps</span> for the HTML Standard, given
  <var>removedNode</var> and optionally <var>oldParent</var>, are defined as the following:</p>

  <ol>
   <li id="node-remove-focus-fixup">
    <p>If <var>removedNode</var>'s <span>node document</span>'s <span data-x="focused area of the
    document">focused area</span> is <var>removedNode</var>, then set <var>removedNode</var>'s
    <span>node document</span>'s <span data-x="focused area of the document">focused area</span> to
    <var>removedNode</var>'s <span>node document</span>'s <span>viewport</span>.</p>

    <p class="note">This does <em>not</em> perform the <span>unfocusing steps</span>,
    <span>focusing steps</span>, or <span>focus update steps</span>, and thus no <code
    data-x="event-blur">blur</code> or <code data-x="event-change">change</code> events are
    fired.</p>
   </li>

   <li><p>If <var>removedNode</var> is an element whose <span
   data-x="concept-element-namespace">namespace</span> is the <span>HTML namespace</span>, and this
   standard defines <span data-x="html element removing steps">HTML element removing steps</span>
   for <var>removedNode</var>'s <span data-x="concept-element-local-name">local name</span>, then
   run the corresponding <span>HTML element removing steps</span> given <var>removedNode</var> and
   optionally <var>oldParent</var>.</p></li>

   <li>
    <p>If <var>removedNode</var> is a <span>form-associated element</span> or the ancestor of a
    <span>form-associated element</span>, then:</p>

    <ol>
     <li><p>If the <span>form-associated element</span> has a <span>form owner</span> and the
     <span>form-associated element</span> and its <span>form owner</span> are no longer in the same
     <span>tree</span>, then <span>reset the form owner</span> of the <span>form-associated
     element</span>.</p></li>
    </ol>
   </li>

   <li><p>If <var>removedNode</var>'s <code data-x="attr-popover">popover</code> attribute is not in
   the <span data-x="attr-popover-none-state">no popover state</span>, then run the <span>hide
   popover algorithm</span> given <var>removedNode</var>, false, false, and false.</p></li>
  </ol>

  <p>A <dfn id="insert-an-element-into-a-document" data-x="node is inserted into a document"
  data-lt="inserted into a document|node is inserted into a document" export>node is inserted into a
  document</dfn> when the <span data-x="concept-node-insert-ext">insertion steps</span> are invoked
  with it as the argument and it is now <span>in a document tree</span>.  Analogously, a <dfn
  id="remove-an-element-from-a-document" data-x="node is removed from a document" data-lt="removed
  from a document|node is removed from a document" export>node is removed from a document</dfn> when
  the <span data-x="concept-node-remove-ext">removing steps</span> are invoked with it as the
  argument and it is now no longer <span>in a document tree</span>.</p>

  <p>A node <dfn export>becomes connected</dfn> when the <span
  data-x="concept-node-insert-ext">insertion steps</span> are invoked with it as the argument and it
  is now <span>connected</span>. Analogously, a node <dfn data-lt="become disconnected"
  export>becomes disconnected</dfn> when the <span data-x="concept-node-remove-ext">removing
  steps</span> are invoked with it as the argument and it is now no longer
  <span>connected</span>.</p>

  <p>A node is <dfn export>browsing-context connected</dfn> when it is <span>connected</span> and
  its <span data-x="shadow-including root">shadow-including root</span>'s <span
  data-x="concept-document-bc">browsing context</span> is non-null. A node <dfn data-lt="become
  browsing-context connected" export>becomes browsing-context connected</dfn> when the <span
  data-x="concept-node-insert-ext">insertion steps</span> are invoked with it as the argument and it
  is now <span>browsing-context connected</span>. A node <dfn data-lt="become browsing-context
  disconnected" export>becomes browsing-context disconnected</dfn> either when the <span
  data-x="concept-node-remove-ext">removing steps</span> are invoked with it as the argument and it
  is now no longer <span>browsing-context connected</span>, or when its <span>shadow-including
  root</span>'s <span data-x="concept-document-bc">browsing context</span> becomes null.


  <h4>Scripting</h4>

  <p>The construction "a <code data-x="">Foo</code> object", where <code data-x="">Foo</code> is
  actually an interface, is sometimes used instead of the more accurate "an object implementing the
  interface <code data-x="">Foo</code>".</p>

  <p>An IDL attribute is said to be <dfn data-x="">getting</dfn> when its value is being retrieved
  (e.g. by author script), and is said to be <dfn data-x="">setting</dfn> when a new value is
  assigned to it.</p>

  <p>If a DOM object is said to be <dfn>live</dfn>, then the attributes and methods on that object
  <span w-nodev>must</span> operate on the actual underlying data, not a snapshot of the
  data.</p>


  <h4>Plugins</h4>

  <p>The term <dfn>plugin</dfn> refers to an <span>implementation-defined</span> set of content
  handlers used by the user agent that can take part in the user agent's rendering of a
  <code>Document</code> object, but that neither act as <span data-x="child navigable">child
  navigables</span> of the <code>Document</code> nor introduce any <code>Node</code> objects to the
  <code>Document</code>'s DOM.</p>

  <p>Typically such content handlers are provided by third parties, though a user agent can also
  designate built-in content handlers as plugins.</p>

  <div w-nodev>

  <p>A user agent must not consider the types <code>text/plain</code> and
  <code>application/octet-stream</code> as having a registered <span>plugin</span>.</p> <!-- because
  of the way <object> elements handles those types, if nothing else (it also doesn't make any sense
  to have a plugin registered for those types, of course) -->

  </div>

  <p class="example">One example of a plugin would be a PDF viewer that is instantiated in a
  <span>navigable</span> when the user navigates to a PDF file. This would count as a plugin
  regardless of whether the party that implemented the PDF viewer component was the same as that
  which implemented the user agent itself. However, a PDF viewer application that launches separate
  from the user agent (as opposed to using the same interface) is not a plugin by this
  definition.</p>

  <p class="note">This specification does not define a mechanism for interacting with plugins, as it
  is expected to be user-agent- and platform-specific. Some UAs might opt to support a plugin
  mechanism such as the Netscape Plugin API; others might use remote content converters or have
  built-in support for certain types. Indeed, this specification doesn't require user agents to
  support plugins at all. <ref spec=NPAPI></p>

  <div w-nodev>

  <p class="warning">Browsers should take extreme care when interacting with external content
  intended for <span data-x="plugin">plugins</span>. When third-party software is run with the same
  privileges as the user agent itself, vulnerabilities in the third-party software become as
  dangerous as those in the user agent.</p>

  <p>
  <!--INSERT TRACKING-->
  Since different users having different sets of <span data-x="plugin">plugins</span> provides a
  tracking vector that increases the chances of users being uniquely identified, user agents are
  encouraged to support the exact same set of <span data-x="plugin">plugins</span> for each
  user.</p>

  </div>



  <h4 id="encoding-terminology">Character encodings</h4>

  <p>A <dfn data-x="encoding" data-x-href="https://encoding.spec.whatwg.org/#encoding">character
  encoding</dfn>, or just <i>encoding</i> where that is not ambiguous, is a defined way to convert
  between byte streams and Unicode strings, as defined in <cite>Encoding</cite>. An
  <span>encoding</span> has an <dfn data-x-href="https://encoding.spec.whatwg.org/#name">encoding
  name</dfn> and one or more <dfn data-x="encoding label"
  data-x-href="https://encoding.spec.whatwg.org/#label">encoding labels</dfn>, referred to as the
  encoding's <i>name</i> and <i>labels</i> in the Encoding standard. <ref spec=ENCODING></p>



  <div w-nodev>

  <h4>Conformance classes</h4>

  <p>This specification describes the conformance criteria for <span w-nodev>user agents
  (relevant to implementers) and</span> documents<span w-nodev> (relevant to authors and
  authoring tool implementers)</span>.</p>

  <p><dfn>Conforming documents</dfn> are those that comply with all the conformance criteria for
  documents. For readability, some of these conformance requirements are phrased as conformance
  requirements on authors; such requirements are implicitly requirements on documents: by
  definition, all documents are assumed to have had an author. (In some cases, that author may
  itself be a user agent &mdash; such user agents are subject to additional rules, as explained
  below.)</p>

  <p class="example">For example, if a requirement states that "authors <!--non-normative-->must not
  use the <code data-x="">foobar</code> element", it would imply that documents are not allowed to
  contain elements named <code data-x="">foobar</code>.</p>

  <p class="note impl">There is no implied relationship between document conformance requirements
  and implementation conformance requirements. User agents are not free to handle non-conformant
  documents as they please; the processing model described in this specification applies to
  implementations regardless of the conformity of the input documents.</p>

  <p>User agents fall into several (overlapping) categories with different conformance
  requirements.</p>

  <dl>
   <dt id="interactive">Web browsers and other interactive user agents</dt>

   <dd>
    <p>Web browsers that support <span>the XML syntax</span> must process elements and attributes
    from the <span>HTML namespace</span> found in XML documents as described in this specification,
    so that users can interact with them, unless the semantics of those elements have been
    overridden by other specifications.</p>

    <p class="example">A conforming web browser would, upon finding a <code>script</code> element in
    an XML document, execute the script contained in that element. However, if the element is found
    within a transformation expressed in XSLT (assuming the user agent also supports XSLT), then the
    processor would instead treat the <code>script</code> element as an opaque element that forms
    part of the transform.</p>

    <p>Web browsers that support <span>the HTML syntax</span> must process documents labeled with an
    <span>HTML MIME type</span> as described in this specification, so that users can interact with
    them.</p>

    <p>User agents that support scripting must also be conforming implementations of the IDL
    fragments in this specification, as described in <cite>Web IDL</cite>. <ref
    spec=WEBIDL></p>

    <p class="note">Unless explicitly stated, specifications that override the semantics of HTML
    elements do not override the requirements on DOM objects representing those elements. For
    example, the <code>script</code> element in the example above would still implement the
    <code>HTMLScriptElement</code> interface.</p>
   </dd>

   <dt id="non-interactive">Non-interactive presentation user agents</dt>

   <dd>
    <p>User agents that process HTML and XML documents purely to render non-interactive versions of
    them must comply to the same conformance criteria as web browsers, except that they are exempt
    from requirements regarding user interaction.</p>

    <p class="note">Typical examples of non-interactive presentation user agents are printers
    (static UAs) and overhead displays (dynamic UAs). It is expected that most static
    non-interactive presentation user agents will also opt to <a href="#non-scripted">lack scripting
    support</a>.</p>

    <p class="example">A non-interactive but dynamic presentation UA would still execute scripts,
    allowing forms to be dynamically submitted, and so forth. However, since the concept of "focus"
    is irrelevant when the user cannot interact with the document, the UA would not need to support
    any of the focus-related DOM APIs.</p>
   </dd>

   <dt id="renderingUA">Visual user agents that support the suggested default rendering</dt>

   <dd>
    <p>User agents, whether interactive or not, may be designated (possibly as a user option) as
    supporting the suggested default rendering defined by this specification.</p>

    <p>This is not required. In particular, even user agents that do implement the suggested default
    rendering are encouraged to offer settings that override this default to improve the experience
    for the user, e.g. changing the color contrast, using different focus styles, or otherwise
    making the experience more accessible and usable to the user.</p>

    <p>User agents that are designated as supporting the suggested default rendering must, while so
    designated, implement the rules <a href="#rendering">the Rendering section</a> defines as the
    behavior that user agents are <em>expected</em> to implement.</p>
   </dd>

   <dt id="non-scripted">User agents with no scripting support</dt>

   <dd>
    <p>Implementations that do not support scripting (or which have their scripting features
    disabled entirely) are exempt from supporting the events and DOM interfaces mentioned in this
    specification. For the parts of this specification that are defined in terms of an events model
    or in terms of the DOM, such user agents must still act as if events and the DOM were
    supported.</p>

    <p class="note">Scripting can form an integral part of an application. Web browsers that do not
    support scripting, or that have scripting disabled, might be unable to fully convey the author's
    intent.</p>
   </dd>


   <dt>Conformance checkers</dt>

   <dd id="conformance-checkers">

    <p>Conformance checkers must verify that a document conforms to the applicable conformance
    criteria described in this specification. Automated conformance checkers are exempt from
    detecting errors that require interpretation of the author's intent (for example, while a
    document is non-conforming if the content of a <code>blockquote</code> element is not a quote,
    conformance checkers running without the input of human judgement do not have to check that
    <code>blockquote</code> elements only contain quoted material).</p>

    <p>Conformance checkers must check that the input document conforms when parsed without a
    <span data-x="concept-document-bc">browsing context</span> (meaning that no scripts are run, and
    that the parser's <span>scripting flag</span> is disabled), and should also check that the input
    document conforms when parsed with a <span data-x="concept-document-bc">browsing context</span>
    in which scripts execute, and that the scripts never cause non-conforming states to occur other
    than transiently during script execution itself. (This is only a "SHOULD" and not a "MUST"
    requirement because it has been proven to be impossible. <ref spec=COMPUTABLE>)</p>

    <p>The term "HTML validator" can be used to refer to a conformance checker that itself conforms
    to the applicable requirements of this specification.</p>

    <div class="note">

     <p>XML DTDs cannot express all the conformance requirements of this specification. Therefore, a
     validating XML processor and a DTD cannot constitute a conformance checker. Also, since neither
     of the two authoring formats defined in this specification are applications of SGML, a
     validating SGML system cannot constitute a conformance checker either.</p>

     <p>To put it another way, there are three types of conformance criteria:</p>

     <ol>
      <li>Criteria that can be expressed in a DTD.</li>

      <li>Criteria that cannot be expressed by a DTD, but can still be checked by a machine.</li>

      <li>Criteria that can only be checked by a human.</li>
     </ol>

     <p>A conformance checker must check for the first two. A simple DTD-based validator only checks
     for the first class of errors and is therefore not a conforming conformance checker according
     to this specification.</p>

    </div>
   </dd>


   <dt>Data mining tools</dt>

   <dd id="data-mining">

    <p>Applications and tools that process HTML and XML documents for reasons other than to either
    render the documents or check them for conformance should act in accordance with the semantics
    of the documents that they process.</p>

    <p class="example">A tool that generates <span data-x="outline">document outlines</span> but
    increases the nesting level for each paragraph and does not increase the nesting level for
    <span data-x="concept-heading">headings</span> would not be conforming.</p>
   </dd>


   <dt id="editors">Authoring tools and markup generators</dt>

   <dd>
    <p>Authoring tools and markup generators must generate <span>conforming documents</span>.
    Conformance criteria that apply to authors also apply to authoring tools, where appropriate.</p>

    <p>Authoring tools are exempt from the strict requirements of using elements only for their
    specified purpose, but only to the extent that authoring tools are not yet able to determine
    author intent. However, authoring tools must not automatically misuse elements or encourage
    their users to do so.</p>

    <p class="example">For example, it is not conforming to use an <code>address</code> element for
    arbitrary contact information; that element can only be used for marking up contact information
    for its nearest <code>article</code> or <code>body</code> element ancestor. However, since an
    authoring tool is likely unable to determine the difference, an authoring tool is exempt from
    that requirement. This does not mean, though, that authoring tools can use <code>address</code>
    elements for any block of italics text (for instance); it just means that the authoring tool
    doesn't have to verify that when the user uses a tool for inserting contact information for an
    <code>article</code> element, that the user really is doing that and not inserting something
    else instead.</p>

    <p class="note">In terms of conformance checking, an editor has to output documents that conform
    to the same extent that a conformance checker will verify.</p>

    <p>When an authoring tool is used to edit a non-conforming document, it may preserve the
    conformance errors in sections of the document that were not edited during the editing session
    (i.e. an editing tool is allowed to round-trip erroneous content). However, an authoring tool
    must not claim that the output is conformant if errors have been so preserved.</p>

    <p>Authoring tools are expected to come in two broad varieties: tools that work from structure
    or semantic data, and tools that work on a What-You-See-Is-What-You-Get media-specific editing
    basis (WYSIWYG).</p>

    <p>The former is the preferred mechanism for tools that author HTML, since the structure in the
    source information can be used to make informed choices regarding which HTML elements and
    attributes are most appropriate.</p>

    <p>However, WYSIWYG tools are legitimate. WYSIWYG tools should use elements they know are
    appropriate, and should not use elements that they do not know to be appropriate. This might in
    certain extreme cases mean limiting the use of flow elements to just a few elements, like
    <code>div</code>, <code>b</code>, <code>i</code>, and <code>span</code> and making liberal use
    of the <code data-x="attr-style">style</code> attribute.</p>

    <p>All authoring tools, whether WYSIWYG or not, should make a best effort attempt at enabling
    users to create well-structured, semantically rich, media-independent content.</p>
   </dd>
  </dl>

  <p>For compatibility with existing content and prior specifications, this specification describes
  two authoring formats: one based on <span data-x="the XML syntax">XML</span>, and one using a <a
  href="#writing">custom format</a> inspired by SGML (referred to as <span>the HTML syntax</span>).
  Implementations must support at least one of these two formats, although supporting both is
  encouraged.</p>

  <p>Some conformance requirements are phrased as requirements on elements, attributes, methods or
  objects. Such requirements fall into two categories: those describing content model restrictions,
  and those describing implementation behavior. Those in the former category are requirements on
  documents and authoring tools. Those in the second category are requirements on user agents.
  Similarly, some conformance requirements are phrased as requirements on authors; such requirements
  are to be interpreted as conformance requirements on the documents that authors produce. (In other
  words, this specification does not distinguish between conformance criteria on authors and
  conformance criteria on documents.)</p>

  </div>


  <h4>Dependencies</h4>

  <!--
    data-noexport="" is used here to avoid the definition scraper (Shepherd) from picking up any of the terms found
    within this section. This is *not* used in accordance to the Bikeshed data model, which requires data-noexport=""
    to exist only on <dfn> or <hN> elements. (That is why we use data-noexport="" instead of noexport=""; Wattsi will
    only translate noexport="" according to the Bikeshed data model.)

    We may be able to remove this once all definitions are sufficiently marked up and Shepherd stops trying to infer
    definitions by scraping HTML.
  -->
  <div data-noexport="">

  <p>This specification relies on several other underlying specifications.</p>

  <dl>
   <dt>Infra</dt>

   <dd>
    <p>The following terms are defined in <cite>Infra</cite>: <ref spec=INFRA></p>

    <ul class="brief">
     <li>The general iteration terms <dfn data-x-href="https://infra.spec.whatwg.org/#iteration-while">while</dfn>,
             <dfn data-x-href="https://infra.spec.whatwg.org/#iteration-continue">continue</dfn>, and
             <dfn data-x-href="https://infra.spec.whatwg.org/#iteration-break">break</dfn>.</li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#assert">Assert</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#implementation-defined">implementation-defined</dfn></li>
     <li id="fingerprint"><span id="fingerprinting-vector"></span>
     <!-- INSERT TRACKING -->
     <dfn data-x-href="https://infra.spec.whatwg.org/#tracking-vector">tracking vector</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#code-point">code point</dfn> and its synonym
         <dfn data-x-href="https://infra.spec.whatwg.org/#code-point">character</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#surrogate">surrogate</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#scalar-value">scalar value</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#tuple">tuple</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#noncharacter">noncharacter</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#string">string</dfn>,
         <dfn data-x-href="https://infra.spec.whatwg.org/#code-unit">code unit</dfn>,
         <dfn data-x-href="https://infra.spec.whatwg.org/#code-unit-prefix">code unit prefix</dfn>,
         <dfn data-x-href="https://infra.spec.whatwg.org/#code-unit-less-than">code unit less than</dfn>,
         <dfn data-x-href="https://infra.spec.whatwg.org/#string-starts-with">starts with</dfn>,
         <dfn data-x-href="https://infra.spec.whatwg.org/#string-ends-with">ends with</dfn>,
         <dfn data-x-href="https://infra.spec.whatwg.org/#string-length">length</dfn>, and
         <dfn data-x-href="https://infra.spec.whatwg.org/#string-code-point-length">code point length</dfn></li>
     <li id="case-sensitive">The string equality operations <dfn data-x-href="https://infra.spec.whatwg.org/#string-is">is</dfn> and
         <dfn data-x-href="https://infra.spec.whatwg.org/#string-is">identical to</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#scalar-value-string">scalar value string</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#javascript-string-convert">convert</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#ascii-string">ASCII string</dfn></li>
     <li><dfn id="space-characters" data-x-href="https://infra.spec.whatwg.org/#ascii-whitespace">ASCII whitespace</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#control">control</dfn></li>
     <li><dfn data-x="ASCII digits" data-x-href="https://infra.spec.whatwg.org/#ascii-digit">ASCII digit</dfn></li>
     <li><dfn id="uppercase-ascii-hex-digits" data-x-href="https://infra.spec.whatwg.org/#ascii-upper-hex-digit">ASCII upper hex digit</dfn></li>
     <li><dfn id="lowercase-ascii-hex-digits" data-x-href="https://infra.spec.whatwg.org/#ascii-lower-hex-digit">ASCII lower hex digit</dfn></li>
     <li><dfn data-x="ASCII hex digits" data-x-href="https://infra.spec.whatwg.org/#ascii-hex-digit">ASCII hex digit</dfn></li>
     <li><dfn id="uppercase-ascii-letters" data-x-href="https://infra.spec.whatwg.org/#ascii-upper-alpha">ASCII upper alpha</dfn></li>
     <li><dfn id="lowercase-ascii-letters" data-x-href="https://infra.spec.whatwg.org/#ascii-lower-alpha">ASCII lower alpha</dfn></li>
     <li><dfn id="ascii-letters" data-x-href="https://infra.spec.whatwg.org/#ascii-alpha">ASCII alpha</dfn></li>
     <li><dfn id="alphanumeric-ascii-characters" data-x-href="https://infra.spec.whatwg.org/#ascii-alphanumeric">ASCII alphanumeric</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#isomorphic-decode">isomorphic decode</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#isomorphic-encode">isomorphic encode</dfn></li>
     <li><dfn data-x="converted to ASCII lowercase" data-x-href="https://infra.spec.whatwg.org/#ascii-lowercase">ASCII lowercase</dfn></li>
     <li><dfn data-x="converted to ASCII uppercase" data-x-href="https://infra.spec.whatwg.org/#ascii-uppercase">ASCII uppercase</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#ascii-case-insensitive">ASCII case-insensitive</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#strip-newlines">strip newlines</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#normalize-newlines">normalize newlines</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace">strip leading and trailing ASCII whitespace</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace">strip and collapse ASCII whitespace</dfn></li>
     <li><dfn id="split-a-string-on-spaces" data-x-href="https://infra.spec.whatwg.org/#split-on-ascii-whitespace">split a string on ASCII whitespace</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#split-on-commas">split a string on commas</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#collect-a-sequence-of-code-points">collect a sequence of code points</dfn> and its associated
         <dfn data-x-href="https://infra.spec.whatwg.org/#string-position-variable">position variable</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#skip-ascii-whitespace">skip ASCII whitespace</dfn></li>
     <li>The <dfn data-x-href="https://infra.spec.whatwg.org/#ordered-map">ordered map</dfn> data structure and the associated definitions for
             <dfn data-x="map key" data-x-href="https://infra.spec.whatwg.org/#map-key">key</dfn>,
             <dfn data-x="map value" data-x-href="https://infra.spec.whatwg.org/#map-value">value</dfn>,
             <dfn data-x="map empty" data-x-href="https://infra.spec.whatwg.org/#map-is-empty">empty</dfn>,
             <dfn data-x="map entry" data-x-href="https://infra.spec.whatwg.org/#map-entry">entry</dfn>,
             <dfn data-x="map exists" data-x-href="https://infra.spec.whatwg.org/#map-exists">exists</dfn>,
             <dfn data-x="map get" data-x-href="https://infra.spec.whatwg.org/#map-get">getting the value of an entry</dfn>,
             <dfn data-x="map set" data-x-href="https://infra.spec.whatwg.org/#map-set">setting the value of an entry</dfn>,
             <dfn data-x="map remove" data-x-href="https://infra.spec.whatwg.org/#map-remove">removing an entry</dfn>,
             <dfn data-x="map clear" data-x-href="https://infra.spec.whatwg.org/#map-clear">clear</dfn>,
             <dfn data-x="map get the keys" data-x-href="https://infra.spec.whatwg.org/#map-getting-the-keys">getting the keys</dfn>,
             <dfn data-x="map get the values" data-x-href="https://infra.spec.whatwg.org/#map-getting-the-values">getting the values</dfn>,
             <dfn data-x="map sort descending" data-x-href="https://infra.spec.whatwg.org/#map-sort-in-descending-order">sorting in descending order</dfn>,
             <dfn data-x="map size" data-x-href="https://infra.spec.whatwg.org/#map-size">size</dfn>, and
             <dfn data-x="map iterate" data-x-href="https://infra.spec.whatwg.org/#map-iterate">iterate</dfn></li>
     <li>The <dfn data-x-href="https://infra.spec.whatwg.org/#list">list</dfn> data structure and the associated definitions for
             <dfn data-x="list append" data-x-href="https://infra.spec.whatwg.org/#list-append">append</dfn>,
             <dfn data-x="list extend" data-x-href="https://infra.spec.whatwg.org/#list-extend">extend</dfn>,
             <dfn data-x="list prepend" data-x-href="https://infra.spec.whatwg.org/#list-prepend">prepend</dfn>,
             <dfn data-x="list replace" data-x-href="https://infra.spec.whatwg.org/#list-replace">replace</dfn>,
             <dfn data-x="list remove" data-x-href="https://infra.spec.whatwg.org/#list-remove">remove</dfn>,
             <dfn data-x="list empty" data-x-href="https://infra.spec.whatwg.org/#list-empty">empty</dfn>,
             <dfn data-x="list contains" data-x-href="https://infra.spec.whatwg.org/#list-contain">contains</dfn>,
             <dfn data-x="list size" data-x-href="https://infra.spec.whatwg.org/#list-size">size</dfn>,
             <dfn data-x-href="https://infra.spec.whatwg.org/#list-get-the-indices">indices</dfn>,
             <dfn data-x="list is empty" data-x-href="https://infra.spec.whatwg.org/#list-is-empty">is empty</dfn>,
             <dfn data-x="list item" data-x-href="https://infra.spec.whatwg.org/#list-item">item</dfn>,
             <dfn data-x="list iterate" data-x-href="https://infra.spec.whatwg.org/#list-iterate">iterate</dfn>, and
             <dfn data-x="list clone" data-x-href="https://infra.spec.whatwg.org/#list-clone">clone</dfn>
             <dfn data-x="list sort" data-x-href="https://infra.spec.whatwg.org/#list-sort-in-ascending-order">sort in ascending order</dfn>
             <dfn data-x="list sort descending" data-x-href="https://infra.spec.whatwg.org/#list-sort-in-descending-order">sort in descending order</dfn></li>
     <li>The <dfn data-x-href="https://infra.spec.whatwg.org/#stack">stack</dfn> data structure and the associated definitions for
             <dfn data-x="stack push" data-x-href="https://infra.spec.whatwg.org/#stack-push">push</dfn> and
             <dfn data-x="stack pop" data-x-href="https://infra.spec.whatwg.org/#stack-pop">pop</dfn></li>
     <li>The <dfn data-x-href="https://infra.spec.whatwg.org/#queue">queue</dfn> data structure and the associated definitions for
             <dfn data-x-href="https://infra.spec.whatwg.org/#queue-enqueue">enqueue</dfn> and
             <dfn data-x-href="https://infra.spec.whatwg.org/#queue-dequeue">dequeue</dfn></li>
     <li>The <dfn data-x="set" data-x-href="https://infra.spec.whatwg.org/#ordered-set">ordered set</dfn> data structure and the associated definition for
             <dfn data-x="set append" data-x-href="https://infra.spec.whatwg.org/#set-append">append</dfn> and
             <dfn data-x="set union" data-x-href="https://infra.spec.whatwg.org/#set-union">union</dfn></li>
     <li>The <dfn data-x-href="https://infra.spec.whatwg.org/#struct">struct</dfn> specification type and the associated definition for
             <dfn data-x="struct item" data-x-href="https://infra.spec.whatwg.org/#struct-item">item</dfn></li>
     <li>The <dfn data-x-href="https://infra.spec.whatwg.org/#byte-sequence">byte sequence</dfn> data structure</li>
     <li>The <dfn data-x-href="https://infra.spec.whatwg.org/#forgiving-base64-encode">forgiving-base64 encode</dfn> and
             <dfn data-x-href="https://infra.spec.whatwg.org/#forgiving-base64-decode">forgiving-base64 decode</dfn> algorithms</li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#the-exclusive-range">exclusive range</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#parse-a-json-string-to-an-infra-value">parse a JSON string to an Infra value</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#html-namespace">HTML namespace</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#mathml-namespace">MathML namespace</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#svg-namespace">SVG namespace</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#xlink-namespace">XLink namespace</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#xml-namespace">XML namespace</dfn></li>
     <li><dfn data-x-href="https://infra.spec.whatwg.org/#xmlns-namespace">XMLNS namespace</dfn></li>
    </ul>
   </dd>

   <dt>Unicode and Encoding</dt>

   <dd>
    <p>The Unicode character set is used to represent textual data, and <cite>Encoding</cite>
    defines requirements around <span data-x="encoding">character encodings</span>. <ref
    spec=UNICODE></p>

    <p class="note">This specification <a href="#encoding-terminology">introduces terminology</a>
    based on the terms defined in those specifications, as described earlier.</p>

    <p>The following terms are used as defined in <cite>Encoding</cite>: <ref
    spec=ENCODING></p>

    <ul class="brief">
     <li><dfn data-x-href="https://encoding.spec.whatwg.org/#concept-encoding-get">Getting an
     encoding</dfn></li>

     <li><dfn data-x-href="https://encoding.spec.whatwg.org/#get-an-output-encoding">Get an output
     encoding</dfn></li>

     <li>The generic <dfn data-x-href="https://encoding.spec.whatwg.org/#decode">decode</dfn>
     algorithm which takes a byte stream and an encoding and returns a character stream</li>

     <li>The <dfn data-x-href="https://encoding.spec.whatwg.org/#utf-8-decode">UTF-8 decode</dfn>
     algorithm which takes a byte stream and returns a character stream, additionally stripping one
     leading UTF-8 Byte Order Mark (BOM), if any</li>

     <li>The <dfn data-x-href="https://encoding.spec.whatwg.org/#utf-8-decode-without-bom">UTF-8
     decode without BOM</dfn> algorithm which is identical to <span>UTF-8 decode</span> except that
     it does not strip one leading UTF-8 Byte Order Mark (BOM)</li>

     <li>The <dfn data-x-href="https://encoding.spec.whatwg.org/#encode">encode</dfn> algorithm
     which takes a character stream and an encoding and returns a byte stream</li>

     <li>The <dfn data-x-href="https://encoding.spec.whatwg.org/#utf-8-encode">UTF-8 encode</dfn>
     algorithm which takes a character stream and returns a byte stream</li>

     <li>The <dfn data-x-href="https://encoding.spec.whatwg.org/#bom-sniff">BOM sniff</dfn>
     algorithm which takes a byte stream and returns an encoding or null.</li>
    </ul>
   </dd>


   <dt>XML and related specifications</dt>

   <dd>
    <p>Implementations that support <span>the XML syntax</span> for HTML must support some version
    of XML, as well as its corresponding namespaces specification, because that syntax uses an XML
    serialization with namespaces. <ref spec=XML> <ref spec=XMLNS></p>

    <p>Data mining tools and other user agents that perform operations on content without running
    scripts, evaluating CSS or XPath expressions, or otherwise exposing the resulting DOM to
    arbitrary content, may "support namespaces" by just asserting that their DOM node analogues are
    in certain namespaces, without actually exposing the namespace strings.</p>

    <p class="note">In <span>the HTML syntax</span>, namespace prefixes and namespace declarations
    do not have the same effect as in XML. For instance, the colon has no special meaning in HTML
    element names.</p>

    <hr>

    <p>The attribute with the name <dfn
    data-x-href="https://www.w3.org/TR/xml/#sec-white-space"><code
    data-x="attr-xml-space">space</code></dfn> in the <span>XML namespace</span> is defined by
    <cite>Extensible Markup Language</cite> (<cite>XML</cite>). <ref spec=XML></p>

    <p>The <dfn data-x-href="https://www.w3.org/TR/xml/#NT-Name"><code
    data-x="xml-Name">Name</code></dfn> production is defined in <cite>XML</cite>. <ref
    spec=XML></p>

    <p>This specification also references the <dfn
    data-x-href="https://www.w3.org/TR/xml-stylesheet/#the-xml-stylesheet-processing-instruction"><code>&lt;?xml-stylesheet?></code></dfn>
    processing instruction, defined in <cite>Associating Style Sheets with XML documents</cite>.
    <ref spec=XMLSSPI></p>

    <p>This specification also non-normatively mentions the <dfn><code>XSLTProcessor</code></dfn>
    interface and its <dfn><code
    data-x="dom-XSLTProcessor-transformToFragment">transformToFragment()</code></dfn> and <dfn><code
    data-x="dom-XSLTProcessor-transformToDocument">transformToDocument()</code></dfn> methods. <ref
    spec=XSLTP></p>
   </dd>


   <dt>URLs</dt>

   <dd>
    <p>The following terms are defined in <cite>URL</cite>: <ref spec=URL></p>

    <ul class="brief">
     <li><dfn data-x="concept-host" data-x-href="https://url.spec.whatwg.org/#concept-host">host</dfn></li>
     <li><dfn data-x-href="https://url.spec.whatwg.org/#host-public-suffix">public suffix</dfn></li>
     <li><dfn data-x="concept-domain" data-x-href="https://url.spec.whatwg.org/#concept-domain">domain</dfn></li>
     <li><dfn data-x-href="https://url.spec.whatwg.org/#ip-address">IP address</dfn></li>
     <li><dfn data-x-href="https://url.spec.whatwg.org/#concept-url">URL</dfn></li>
     <li><dfn data-x="concept-url-origin" data-x-href="https://url.spec.whatwg.org/#concept-url-origin">Origin</dfn> of URLs</li>
     <li><dfn data-x-href="https://url.spec.whatwg.org/#syntax-url-absolute">Absolute URL</dfn></li>
     <li><dfn data-x-href="https://url.spec.whatwg.org/#syntax-url-relative">Relative URL</dfn></li>
     <li><dfn data-x-href="https://url.spec.whatwg.org/#host-registrable-domain">registrable domain</dfn></li>
     <li>The <dfn data-x-href="https://url.spec.whatwg.org/#concept-url-parser">URL parser</dfn>
     <li>The <dfn data-x-href="https://url.spec.whatwg.org/#concept-basic-url-parser">basic URL parser</dfn> and its
      <dfn data-x="basic url parser url" data-x-href="https://url.spec.whatwg.org/#basic-url-parser-url"><var>url</var></dfn> and
      <dfn data-x="basic url parser state override" data-x-href="https://url.spec.whatwg.org/#basic-url-parser-state-override"><var>state override</var></dfn>
      arguments, as well as these parser states:
      <ul class="brief">
       <li><dfn data-x-href="https://url.spec.whatwg.org/#scheme-start-state">scheme start state</dfn></li>
       <li><dfn data-x-href="https://url.spec.whatwg.org/#host-state">host state</dfn></li>
       <li><dfn data-x-href="https://url.spec.whatwg.org/#hostname-state">hostname state</dfn></li>
       <li><dfn data-x-href="https://url.spec.whatwg.org/#port-state">port state</dfn></li>
       <li><dfn data-x-href="https://url.spec.whatwg.org/#path-start-state">path start state</dfn></li>
       <li><dfn data-x-href="https://url.spec.whatwg.org/#query-state">query state</dfn></li>
       <li><dfn data-x-href="https://url.spec.whatwg.org/#fragment-state">fragment state</dfn></li>
      </ul>
     <li>
      <dfn data-x-href="https://url.spec.whatwg.org/#concept-url">URL record</dfn>, as well as its
      individual components:
      <ul class="brief">
       <li><dfn data-x="concept-url-scheme" data-x-href="https://url.spec.whatwg.org/#concept-url-scheme">scheme</dfn></li>
       <li><dfn data-x="concept-url-username" data-x-href="https://url.spec.whatwg.org/#concept-url-username">username</dfn></li>
       <li><dfn data-x="concept-url-password" data-x-href="https://url.spec.whatwg.org/#concept-url-password">password</dfn></li>
       <li><dfn data-x="concept-url-host" data-x-href="https://url.spec.whatwg.org/#concept-url-host">host</dfn></li>
       <li><dfn data-x="concept-url-port" data-x-href="https://url.spec.whatwg.org/#concept-url-port">port</dfn></li>
       <li><dfn data-x="concept-url-path" data-x-href="https://url.spec.whatwg.org/#concept-url-path">path</dfn></li>
       <li><dfn data-x="concept-url-query" data-x-href="https://url.spec.whatwg.org/#concept-url-query">query</dfn></li>
       <li><dfn data-x="concept-url-fragment" data-x-href="https://url.spec.whatwg.org/#concept-url-fragment">fragment</dfn></li>
       <li><dfn data-x="concept-url-blob-entry" data-x-href="https://url.spec.whatwg.org/#concept-url-blob-entry">blob URL entry</dfn></li>
      </ul>
     </li>
     <li><dfn data-x-href="https://url.spec.whatwg.org/#valid-url-string">valid URL string</dfn></li>
     <li>The <dfn data-x-href="https://url.spec.whatwg.org/#cannot-have-a-username-password-port">cannot have a username/password/port</dfn> concept</li>
     <li>The <dfn data-x-href="https://url.spec.whatwg.org/#url-opaque-path">opaque path</dfn> concept</li>
     <li><dfn data-x="concept-url-serializer" data-x-href="https://url.spec.whatwg.org/#concept-url-serializer">URL serializer</dfn> and its
         <dfn data-x="url serializer exclude fragment" data-x-href="https://url.spec.whatwg.org/#url-serializer-exclude-fragment">exclude fragment</dfn> argument</li>
     <li><dfn data-x-href="https://url.spec.whatwg.org/#url-path-serializer">URL path serializer</dfn></li>
     <li>The <dfn data-x-href="https://url.spec.whatwg.org/#concept-host-parser">host parser</dfn></li>
     <li>The <dfn data-x="host serializer" data-x-href="https://url.spec.whatwg.org/#concept-host-serializer">host serializer</dfn></li>
     <li><dfn data-x-href="https://url.spec.whatwg.org/#concept-host-equals">Host equals</dfn></li>
     <li><dfn data-x="concept-url-equals" data-x-href="https://url.spec.whatwg.org/#concept-url-equals">URL equals</dfn> and its
         <dfn data-x="url equals exclude fragments" data-x-href="https://url.spec.whatwg.org/#url-equals-exclude-fragments">exclude fragments</dfn> argument</li>
     <li><dfn data-x="serialize an integer" data-x-href="https://url.spec.whatwg.org/#serialize-an-integer">serialize an integer</dfn></li>
     <li><dfn data-x-href="https://url.spec.whatwg.org/#default-encode-set">Default encode set</dfn></li>
     <li><dfn data-x-href="https://url.spec.whatwg.org/#component-percent-encode-set">component percent-encode set</dfn></li>
     <li><dfn data-x-href="https://url.spec.whatwg.org/#string-utf-8-percent-encode">UTF-8 percent-encode</dfn></li>
     <li><dfn data-x-href="https://url.spec.whatwg.org/#string-percent-decode">percent-decode</dfn></li>
     <li><dfn data-x-href="https://url.spec.whatwg.org/#set-the-username">set the username</dfn></li>
     <li><dfn data-x-href="https://url.spec.whatwg.org/#set-the-password">set the password</dfn></li>
     <li>The <dfn data-x-href="https://url.spec.whatwg.org/#concept-urlencoded"><code>application/x-www-form-urlencoded</code></dfn> format</li>
     <li>The <dfn data-x-href="https://url.spec.whatwg.org/#concept-urlencoded-serializer"><code>application/x-www-form-urlencoded</code> serializer</dfn></li>
     <li><dfn data-x-href="https://url.spec.whatwg.org/#is-special">is special</dfn></li>
    </ul>

    <p>A number of schemes and protocols are referenced by this specification also:</p>

    <ul class="brief">
     <li>The <dfn data-x="about protocol" data-x-href="https://www.rfc-editor.org/rfc/rfc6694#section-2"><code>about:</code></dfn> scheme <ref spec=ABOUT></li>
     <li>The <dfn data-x="blob protocol" data-x-href="https://w3c.github.io/FileAPI/#DefinitionOfScheme"><code>blob:</code></dfn> scheme <ref spec=FILEAPI></li>
     <li>The <dfn data-x="data protocol" data-x-href="https://www.rfc-editor.org/rfc/rfc2397#section-2"><code>data:</code></dfn> scheme <ref spec=RFC2397></li>
     <li>The <dfn data-x="http protocol" data-x-href="https://httpwg.org/specs/rfc7230.html#http.uri"><code>http:</code></dfn> scheme <ref spec=HTTP></li>
     <li>The <dfn data-x="https protocol" data-x-href="https://httpwg.org/specs/rfc7230.html#https.uri"><code>https:</code></dfn> scheme <ref spec=HTTP></li>
     <li>The <dfn data-x="mailto protocol" data-x-href="https://www.rfc-editor.org/rfc/rfc6068#section-2"><code>mailto:</code></dfn> scheme <ref spec=MAILTO></li>
     <li>The <dfn data-x="sms protocol" data-x-href="https://www.rfc-editor.org/rfc/rfc5724#section-2"><code>sms:</code></dfn> scheme <ref spec=SMS></li>
     <li>The <dfn data-x="urn protocol" data-x-href="https://www.rfc-editor.org/rfc/rfc2141#section-2"><code>urn:</code></dfn> scheme <ref spec=URN></li>
    </ul>

    <p><dfn data-x-href="https://www.w3.org/TR/media-frags/#media-fragment-syntax">Media fragment
    syntax</dfn> is defined in <cite>Media Fragments URI</cite>. <ref
    spec=MEDIAFRAG></p>
   </dd>


   <dt>HTTP and related specifications</dt>

   <dd>
    <p>The following terms are defined in the HTTP specifications: <ref spec=HTTP></p>

    <ul class="brief">
     <li>`<dfn data-x="http-accept" data-x-href="https://httpwg.org/specs/rfc7231.html#header.accept"><code>Accept</code></dfn>` header</li>
     <li>`<dfn data-x="http-accept-language" data-x-href="https://httpwg.org/specs/rfc7231.html#header.accept-language"><code>Accept-Language</code></dfn>` header</li>
     <li>`<dfn data-x="http-cache-control" data-x-href="https://httpwg.org/specs/rfc7234.html#header.cache-control"><code>Cache-Control</code></dfn>` header</li>
     <li>`<dfn data-x="http-content-disposition" data-x-href="https://httpwg.org/specs/rfc6266.html"><code>Content-Disposition</code></dfn>` header</li>
     <li>`<dfn data-x="http-content-language" data-x-href="https://httpwg.org/specs/rfc7231.html#header.content-language"><code>Content-Language</code></dfn>` header</li>
     <li>`<dfn data-x="http-content-range" data-x-href="https://httpwg.org/specs/rfc7233.html#header.content-range"><code>Content-Range</code></dfn>` header</li>
     <li>`<dfn data-x="http-last-modified" data-x-href="https://httpwg.org/specs/rfc7232.html#header.last-modified"><code>Last-Modified</code></dfn>` header</li>
     <li>`<dfn data-x="http-range" data-x-href="https://httpwg.org/specs/rfc7233.html#header.range"><code>Range</code></dfn>` header</li>
     <li>`<dfn data-x="http-referer" data-x-href="https://httpwg.org/specs/rfc7231.html#header.referer"><code>Referer</code></dfn>` header</li>
    </ul>

    <p>The following terms are defined in <cite>HTTP State Management Mechanism</cite>: <ref spec=COOKIES></p>

    <ul class="brief">
     <li><dfn data-x-href="https://httpwg.org/specs/rfc6265.html#sane-cookie-syntax">cookie-string</dfn></li>
     <li><dfn data-x-href="https://httpwg.org/specs/rfc6265.html#storage-model">receives a set-cookie-string</dfn></li>
     <li>`<dfn data-x="http-cookie" data-x-href="https://httpwg.org/specs/rfc6265.html#cookie"><code>Cookie</code></dfn>` header</li>
    </ul>

    <p>The following term is defined in <cite>Web Linking</cite>: <ref spec=WEBLINK></p>

    <ul class="brief">
     <li>`<dfn data-x="http-link" data-x-href="https://httpwg.org/specs/rfc8288.html#header"><code>Link</code></dfn>` header</li>
     <li><dfn data-x="parsing a link field value" data-x-href="https://httpwg.org/specs/rfc8288.html#parse-fv">Parsing a `<code>Link</code>` field value</dfn></li>
    </ul>

    <p>The following terms are defined in <cite>Structured Field Values for HTTP</cite>: <ref
    spec=STRUCTURED-FIELDS></p>

    <ul class="brief">
     <li><dfn data-x="http-structured-header" data-x-href="https://httpwg.org/specs/rfc8941.html">structured header</dfn></li>
     <li><dfn data-x="http-structured-header-boolean" data-x-href="https://httpwg.org/specs/rfc8941.html#boolean">boolean</dfn></li>
     <li><dfn data-x="http-structured-header-token" data-x-href="https://httpwg.org/specs/rfc8941.html#token">token</dfn></li>
     <li><dfn data-x="http-structured-header-parameters" data-x-href="https://httpwg.org/specs/rfc8941.html#param">parameters</dfn></li>
    </ul>

    <p>The following terms are defined in <cite>MIME Sniffing</cite>: <ref spec=MIMESNIFF></p>

    <ul class="brief">
     <li><dfn data-x-href="https://mimesniff.spec.whatwg.org/#mime-type">MIME type</dfn></li>
     <li><dfn data-x-href="https://mimesniff.spec.whatwg.org/#mime-type-essence">MIME type essence</dfn></li>
     <li><dfn data-x-href="https://mimesniff.spec.whatwg.org/#valid-mime-type">valid MIME type string</dfn></li>
     <li><dfn data-x-href="https://mimesniff.spec.whatwg.org/#valid-mime-type-with-no-parameters">valid MIME type string with no parameters</dfn></li>
     <li><dfn data-x-href="https://mimesniff.spec.whatwg.org/#html-mime-type">HTML MIME type</dfn></li>
     <li><dfn data-x-href="https://mimesniff.spec.whatwg.org/#javascript-mime-type">JavaScript MIME type</dfn> and
         <dfn data-x-href="https://mimesniff.spec.whatwg.org/#javascript-mime-type-essence-match">JavaScript MIME type essence match</dfn></li>
     <li><dfn data-x-href="https://mimesniff.spec.whatwg.org/#json-mime-type">JSON MIME type</dfn></li>
     <li><dfn data-x-href="https://mimesniff.spec.whatwg.org/#xml-mime-type">XML MIME type</dfn></li>
     <li><dfn data-x-href="https://mimesniff.spec.whatwg.org/#image-mime-type">image MIME type</dfn></li>
     <li><dfn data-x-href="https://mimesniff.spec.whatwg.org/#audio-or-video-mime-type">audio or video MIME type</dfn></li>
     <li><dfn data-x-href="https://mimesniff.spec.whatwg.org/#font-mime-type">font MIME type</dfn></li>
     <li><dfn data-x-href="https://mimesniff.spec.whatwg.org/#parse-a-mime-type">parse a MIME type</dfn></li>
     <li><dfn data-x-href="https://mimesniff.spec.whatwg.org/#supported-by-the-user-agent">is MIME type supported by the user agent?</dfn></li>
    </ul>
   </dd>


   <dt>Fetch</dt>

   <dd>
    <p>The following terms are defined in <cite>Fetch</cite>: <ref spec=FETCH></p>

    <ul class="brief">
     <li><dfn data-x="header-abnf" data-x-href="https://fetch.spec.whatwg.org/#abnf">ABNF</dfn></li>
     <li><dfn><code>about:blank</code></dfn></li>
     <li>An <dfn data-x-href="https://fetch.spec.whatwg.org/#http-scheme">HTTP(S) scheme</dfn></li>
     <li>A URL which <dfn data-x="is-local" data-x-href="https://fetch.spec.whatwg.org/#is-local">is local</dfn></li>
     <li>A <dfn data-x-href="https://fetch.spec.whatwg.org/#local-scheme">local scheme</dfn></li>
     <li>A <dfn data-x-href="https://fetch.spec.whatwg.org/#fetch-scheme">fetch scheme</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#http-cors-protocol">CORS protocol</dfn></li>
     <li><dfn data-x="default-user-agent-value" data-x-href="https://fetch.spec.whatwg.org/#default-user-agent-value">default `<code>User-Agent</code>` value</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#concept-header-extract-mime-type">extract a MIME type</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#legacy-extract-an-encoding">legacy extract an encoding</dfn></li>
     <li><dfn data-x="concept-fetch" data-x-href="https://fetch.spec.whatwg.org/#concept-fetch">fetch</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#fetch-controller">fetch controller</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#fetch-controller-process-the-next-manual-redirect">process the next manual redirect</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#ok-status">ok status</dfn></li>
     <li><dfn data-x="navigation-request" data-x-href="https://fetch.spec.whatwg.org/#navigation-request">navigation request</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#concept-network-error">network error</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#concept-aborted-network-error">aborted network error</dfn></li>
     <li>`<dfn data-x="http-origin" data-x-href="https://fetch.spec.whatwg.org/#http-origin"><code>Origin</code></dfn>` header</li>
     <li>`<dfn data-x-href="https://fetch.spec.whatwg.org/#http-cross-origin-resource-policy"><code>Cross-Origin-Resource-Policy</code></dfn>` header</li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#concept-header-list-get-structured-header">getting a structured field value</dfn></li>
     <li><dfn data-x="concept-header-list" data-x-href="https://fetch.spec.whatwg.org/#concept-header-list">header list</dfn></li>
     <li><dfn data-x="concept-header-list-set" data-x-href="https://fetch.spec.whatwg.org/#concept-header-list-set">set</dfn></li>
     <li><dfn data-x="concept-header-list-get-decode-split" data-x-href="https://fetch.spec.whatwg.org/#concept-header-list-get-decode-split">get, decode, and split</dfn></li>
     <li><dfn data-x="fetch-controller-abort" data-x-href="https://fetch.spec.whatwg.org/#fetch-controller-abort">abort</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#cross-origin-resource-policy-check">cross-origin resource policy check</dfn></li>
     <li>the <dfn data-x-href="https://fetch.spec.whatwg.org/#requestcredentials"><code>RequestCredentials</code></dfn> enumeration</li>
     <li>the <dfn data-x-href="https://fetch.spec.whatwg.org/#requestdestination"><code>RequestDestination</code></dfn> enumeration</li>
     <li>the <dfn data-x-href="https://fetch.spec.whatwg.org/#dom-global-fetch"><code>fetch()</code></dfn> method</li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#finalize-and-report-timing">report timing</dfn></li>
     <li><dfn data-x="serialize-a-response-url-for-reporting" data-x-href="https://fetch.spec.whatwg.org/#serialize-a-response-url-for-reporting">serialize a response URL for reporting</dfn></li>
     <li><dfn data-x="body safely extract" data-x-href="https://fetch.spec.whatwg.org/#bodyinit-safely-extract">safely extracting a body</dfn></li>
     <li><dfn data-x="body-incrementally-read" data-x-href="https://fetch.spec.whatwg.org/#body-incrementally-read">incrementally reading a body</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#process-response-end-of-body">processResponseConsumeBody</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#fetch-processresponseendofbody">processResponseEndOfBody</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#process-response">processResponse</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#fetch-useparallelqueue">useParallelQueue</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#fetch-processearlyhintsresponse">processEarlyHintsResponse</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#concept-connection-pool">connection pool</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#concept-connection-obtain">obtain a connection</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#determine-the-network-partition-key">determine the network partition key</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#extract-full-timing-info">extract full timing info</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#byte-sequence-as-a-body">as a body</dfn></li>
     <li><dfn data-x="response-body-info" data-x-href="https://fetch.spec.whatwg.org/#response-body-info">response body info</dfn></li>
     <li><dfn data-x-href="https://fetch.spec.whatwg.org/#resolve-an-origin">resolve an origin</dfn></li>
     <li>
      <dfn data-x="concept-response"
      data-x-href="https://fetch.spec.whatwg.org/#concept-response">response</dfn> and its
      associated:
      <ul class="brief">
       <li><dfn data-x="concept-response-type" data-x-href="https://fetch.spec.whatwg.org/#concept-response-type">type</dfn></li>
       <li><dfn data-x="concept-response-url" data-x-href="https://fetch.spec.whatwg.org/#concept-response-url">URL</dfn></li>
       <li><dfn data-x="concept-response-url-list" data-x-href="https://fetch.spec.whatwg.org/#concept-response-url-list">URL list</dfn></li>
       <li><dfn data-x="concept-response-status" data-x-href="https://fetch.spec.whatwg.org/#concept-response-status">status</dfn></li>
       <li><dfn data-x="concept-response-header-list" data-x-href="https://fetch.spec.whatwg.org/#concept-response-header-list">header list</dfn></li>
       <li><dfn data-x="concept-response-body" data-x-href="https://fetch.spec.whatwg.org/#concept-response-body">body</dfn></li>
       <li><dfn data-x="concept-response-body-info" data-x-href="https://fetch.spec.whatwg.org/#concept-response-body-info">body info</dfn></li>
       <li><dfn data-x="concept-internal-response" data-x-href="https://fetch.spec.whatwg.org/#concept-internal-response">internal response</dfn></li>
       <li><dfn data-x="concept-response-location-url" data-x-href="https://fetch.spec.whatwg.org/#concept-response-location-url">location URL</dfn></li>
       <li><dfn data-x="concept-response-timing-info" data-x-href="https://fetch.spec.whatwg.org/#concept-response-timing-info">timing info</dfn></li>
       <li><dfn data-x="concept-response-service-worker-timing-info" data-x-href="https://fetch.spec.whatwg.org/#response-service-worker-timing-info">service worker timing info</dfn></li>
       <li><dfn data-x="concept-response-has-cross-origin-redirects" data-x-href="https://fetch.spec.whatwg.org/#response-has-cross-origin-redirects">has-cross-origin-redirects</dfn></li>
       <li><dfn data-x="concept-response-timing-allow-passed" data-x-href="https://fetch.spec.whatwg.org/#concept-response-timing-allow-passed">timing allow passed</dfn></li>
       <li>
        <dfn data-x-href="https://wicg.github.io/background-fetch/#extract-content-range-values">extract content-range values</dfn>
        <!-- TODO: move this to FETCH -->
       </li>
      </ul>
     </li>
     <li>
      <dfn data-x="concept-request"
      data-x-href="https://fetch.spec.whatwg.org/#concept-request">request</dfn> and its associated:
      <ul class="brief">
       <li><dfn data-x="concept-request-url" data-x-href="https://fetch.spec.whatwg.org/#concept-request-url">URL</dfn></li>
       <li><dfn data-x="concept-request-method" data-x-href="https://fetch.spec.whatwg.org/#concept-request-method">method</dfn></li>
       <li><dfn data-x="concept-request-header-list" data-x-href="https://fetch.spec.whatwg.org/#concept-request-header-list">header list</dfn></li>
       <li><dfn data-x="concept-request-body" data-x-href="https://fetch.spec.whatwg.org/#concept-request-body">body</dfn></li>
       <li><dfn data-x="concept-request-client" data-x-href="https://fetch.spec.whatwg.org/#concept-request-client">client</dfn></li>
       <li><dfn data-x="concept-request-url-list" data-x-href="https://fetch.spec.whatwg.org/#concept-request-url-list">URL list</dfn></li>
       <li><dfn data-x="concept-request-current-url" data-x-href="https://fetch.spec.whatwg.org/#concept-request-current-url">current URL</dfn></li>
       <li><dfn data-x="concept-request-reserved-client" data-x-href="https://fetch.spec.whatwg.org/#concept-request-reserved-client">reserved client</dfn></li>
       <li><dfn data-x="concept-request-replaces-client-id" data-x-href="https://fetch.spec.whatwg.org/#concept-request-replaces-client-id">replaces client id</dfn></li>
       <li><dfn data-x="concept-request-initiator" data-x-href="https://fetch.spec.whatwg.org/#concept-request-initiator">initiator</dfn></li>
       <li><dfn data-x="concept-request-destination" data-x-href="https://fetch.spec.whatwg.org/#concept-request-destination">destination</dfn></li>
       <li><dfn data-x="concept-potential-destination" data-x-href="https://fetch.spec.whatwg.org/#concept-potential-destination">potential destination</dfn></li>
       <li><dfn data-x="concept-potential-destination-translate" data-x-href="https://fetch.spec.whatwg.org/#concept-potential-destination-translate">translating</dfn> a <span data-x="concept-potential-destination">potential destination</span></li>
       <li><dfn data-x="concept-script-like-destination" data-x-href="https://fetch.spec.whatwg.org/#request-destination-script-like">script-like</dfn> <span data-x="concept-request-destination">destinations</span></li>
       <li><dfn data-x="concept-request-priority" data-x-href="https://fetch.spec.whatwg.org/#request-priority">priority</dfn></li>
       <li><dfn data-x="concept-request-origin" data-x-href="https://fetch.spec.whatwg.org/#concept-request-origin">origin</dfn></li>
       <li><dfn data-x="concept-request-referrer" data-x-href="https://fetch.spec.whatwg.org/#concept-request-referrer">referrer</dfn></li>
       <li><dfn data-x-href="https://fetch.spec.whatwg.org/#synchronous-flag">synchronous flag</dfn></li>
       <li><dfn data-x="concept-request-mode" data-x-href="https://fetch.spec.whatwg.org/#concept-request-mode">mode</dfn></li>
       <li><dfn data-x="concept-request-credentials-mode" data-x-href="https://fetch.spec.whatwg.org/#concept-request-credentials-mode">credentials mode</dfn></li>
       <li><dfn data-x-href="https://fetch.spec.whatwg.org/#concept-request-use-url-credentials-flag">use-URL-credentials flag</dfn></li>
       <li><dfn data-x-href="https://fetch.spec.whatwg.org/#unsafe-request-flag">unsafe-request flag</dfn></li>
       <li><dfn data-x="concept-request-cache-mode" data-x-href="https://fetch.spec.whatwg.org/#concept-request-cache-mode">cache mode</dfn></li>
       <li><dfn data-x="concept-request-redirect-count" data-x-href="https://fetch.spec.whatwg.org/#concept-request-redirect-count">redirect count</dfn></li>
       <li><dfn data-x="concept-request-redirect-mode" data-x-href="https://fetch.spec.whatwg.org/#concept-request-redirect-mode">redirect mode</dfn></li>
       <li><dfn data-x="concept-request-policy-container" data-x-href="https://fetch.spec.whatwg.org/#concept-request-policy-container">policy container</dfn></li>
       <li><dfn data-x="concept-request-referrer-policy" data-x-href="https://fetch.spec.whatwg.org/#concept-request-referrer-policy">referrer policy</dfn></li>
       <li><dfn data-x="concept-request-nonce-metadata" data-x-href="https://fetch.spec.whatwg.org/#concept-request-nonce-metadata">cryptographic nonce metadata</dfn></li>
       <li><dfn data-x="concept-request-integrity-metadata" data-x-href="https://fetch.spec.whatwg.org/#concept-request-integrity-metadata">integrity metadata</dfn></li>
       <li><dfn data-x="concept-request-parser-metadata" data-x-href="https://fetch.spec.whatwg.org/#concept-request-parser-metadata">parser metadata</dfn></li>
       <li><dfn data-x="concept-request-reload-navigation-flag" data-x-href="https://fetch.spec.whatwg.org/#concept-request-reload-navigation-flag">reload-navigation flag</dfn></li>
       <li><dfn data-x="concept-request-history-navigation-flag" data-x-href="https://fetch.spec.whatwg.org/#concept-request-history-navigation-flag">history-navigation flag</dfn></li>
       <li><dfn data-x="concept-request-user-activation" data-x-href="https://fetch.spec.whatwg.org/#request-user-activation">user-activation</dfn></li>
       <li><dfn data-x="concept-request-render-blocking" data-x-href="https://fetch.spec.whatwg.org/#request-render-blocking">render-blocking</dfn></li>
       <li><dfn data-x="concept-request-initiator-type" data-x-href="https://fetch.spec.whatwg.org/#concept-request-initiator-type">initiator type</dfn></li>
       <li><dfn data-x-href="https://fetch.spec.whatwg.org/#concept-request-add-range-header">add a range header</dfn></li>
      </ul>
     </li>
     <li>
      <dfn data-x="fetch-timing-info"
      data-x-href="https://fetch.spec.whatwg.org/#fetch-timing-info">fetch timing info</dfn> and its
      associated:
      <ul class="brief">
       <li><dfn data-x="fetch-timing-info-start-time" data-x-href="https://fetch.spec.whatwg.org/#fetch-timing-info-start-time">start time</dfn></li>
       <li><dfn data-x="fetch-timing-info-end-time" data-x-href="https://fetch.spec.whatwg.org/#fetch-timing-info-end-time">end time</dfn></li>
      </ul>
     </li>
    </ul>

    <p>The following terms are defined in <cite>Referrer Policy</cite>: <ref
    spec=REFERRERPOLICY></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/webappsec-referrer-policy/#referrer-policy">referrer policy</dfn></li>
     <li>The `<dfn data-x="http-referrer-policy" data-x-href="https://w3c.github.io/webappsec-referrer-policy/#referrer-policy-header-dfn"><code>Referrer-Policy</code></dfn>` HTTP header</li>
     <li>The <dfn data-x="parse-referrer-policy-header" data-x-href="https://w3c.github.io/webappsec-referrer-policy/#parse-referrer-policy-from-header">parse a referrer policy from a `<code>Referrer-Policy</code>` header</dfn> algorithm</li>
     <li>The "<dfn data-x="referrer-policy-no-referrer" data-x-href="https://w3c.github.io/webappsec-referrer-policy/#referrer-policy-no-referrer"><code>no-referrer</code></dfn>",
             "<dfn data-x="referrer-policy-no-referrer-when-downgrade" data-x-href="https://w3c.github.io/webappsec-referrer-policy/#referrer-policy-no-referrer-when-downgrade"><code>no-referrer-when-downgrade</code></dfn>",
             "<dfn data-x="referrer-policy-origin-when-cross-origin" data-x-href="https://w3c.github.io/webappsec-referrer-policy/#referrer-policy-origin-when-cross-origin"><code>origin-when-cross-origin</code></dfn>", and
             "<dfn data-x="referrer-policy-unsafe-url" data-x-href="https://w3c.github.io/webappsec-referrer-policy/#referrer-policy-unsafe-url"><code>unsafe-url</code></dfn>" referrer policies</li>
     <li>The <dfn data-x-href="https://w3c.github.io/webappsec-referrer-policy/#default-referrer-policy">default referrer policy</dfn></li>
    </ul>

    <p>The following terms are defined in <cite>Mixed Content</cite>: <ref spec=MIX></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/webappsec-mixed-content/#a-priori-authenticated-url"><i>a priori</i> authenticated URL</dfn></li>
    </ul>

    <p>The following terms are defined in <cite>Subresource Integrity</cite>: <ref spec=SRI></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata">parse integrity metadata</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webappsec-subresource-integrity/#get-the-strongest-metadata">get the strongest metadata from set</dfn></li>
    </ul>
   </dd>

   <dt>Paint Timing</dt>

   <dd>
    <p>The following terms are defined in <cite>Paint Timing</cite>: <ref spec=PAINTTIMING></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/paint-timing/#mark-paint-timing">mark paint timing</dfn></li>
    </ul>
   </dd>

   <dt>Navigation Timing</dt>

   <dd>
    <p>The following terms are defined in <cite>Navigation Timing</cite>: <ref spec=NAVIGATIONTIMING></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/navigation-timing/#dfn-create-the-navigation-timing-entry">create the navigation timing entry</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/navigation-timing/#dfn-queue-the-navigation-timing-entry">queue the navigation timing entry</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/navigation-timing/#dom-navigationtimingtype"><code>NavigationTimingType</code></dfn> and its
         "<dfn data-x="dom-navigationtimingtype-navigate" data-x-href="https://w3c.github.io/navigation-timing/#dom-navigationtimingtype-navigate"><code>navigate</code></dfn>",
         "<dfn data-x="dom-navigationtimingtype-reload" data-x-href="https://w3c.github.io/navigation-timing/#dom-navigationtimingtype-reload"><code>reload</code></dfn>", and
         "<dfn data-x="dom-navigationtimingtype-back_forward" data-x-href="https://w3c.github.io/navigation-timing/#dom-navigationtimingtype-back_forward"><code>back_forward</code></dfn>" values.</li>
    </ul>
   </dd>

   <dt>Resource Timing</dt>

   <dd>
    <p>The following terms are defined in <cite>Resource Timing</cite>: <ref spec=RESOURCETIMING></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/resource-timing/#dfn-mark-resource-timing">Mark resource timing</dfn></li>
    </ul>

   <dt>Performance Timeline</dt>

   <dd>
    <p>The following terms are defined in <cite>Performance Timeline</cite>: <ref spec=PERFORMANCETIMELINE></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/performance-timeline/#dom-performanceentry"><code>PerformanceEntry</code></dfn> and its
         <dfn data-x="PerformanceEntry-name" data-x-href="https://w3c.github.io/performance-timeline/#dom-performanceentry-name"><code>name</code></dfn>,
         <dfn data-x="PerformanceEntry-entryType" data-x-href="https://w3c.github.io/performance-timeline/#dom-performanceentry-entrytype"><code>entryType</code></dfn>,
         <dfn data-x="PerformanceEntry-startTime" data-x-href="https://w3c.github.io/performance-timeline/#dom-performanceentry-starttime"><code>startTime</code></dfn>, and
         <dfn data-x="PerformanceEntry-duration" data-x-href="https://w3c.github.io/performance-timeline/#dom-performanceentry-duration"><code>duration</code></dfn> attributes.</li>

     <li><dfn data-x-href="https://w3c.github.io/performance-timeline/#queue-a-performanceentry">Queue a performance entry</dfn></li>
     </ul>
   </dd>

   <dt>Long Tasks</dt>

   <dd>
    <p>The following terms are defined in <cite>Long Tasks</cite>: <ref spec=LONGTASKS></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/longtasks/#report-long-tasks">report long tasks</dfn></li>
    </ul>
   </dd>

   <dt>Web IDL</dt>

   <dd>
    <p>The IDL fragments in this specification must be interpreted as required for conforming IDL
    fragments, as described in <cite>Web IDL</cite>. <ref spec=WEBIDL></p>

    <p>The following terms are defined in <cite>Web IDL</cite>:</p>

    <ul class="brief">
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#this">this</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-extended-attribute">extended attribute</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-named-constructor">named constructor</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#idl-constructors">constructor operation</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#overridden-constructor-steps">overridden constructor steps</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#internally-create-a-new-object-implementing-the-interface">internally create a new object implementing the interface</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-array-index-property-name">array index property name</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-support-indexed-properties">supports indexed properties</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-supported-property-indices">supported property indices</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-determine-the-value-of-an-indexed-property">determine the value of an indexed property</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-set-the-value-of-an-existing-indexed-property">set the value of an existing indexed property</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-set-the-value-of-a-new-indexed-property">set the value of a new indexed property</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-support-named-properties">support named properties</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-supported-property-names">supported property names</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-determine-the-value-of-a-named-property">determine the value of a named property</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-set-the-value-of-an-existing-named-property">set the value of an existing named property</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-set-the-value-of-a-new-named-property">set the value of a new named property</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-delete-an-existing-named-property">delete an existing named property</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-perform-a-security-check">perform a security check</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-platform-object">platform object</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-legacy-platform-object">legacy platform object</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-primary-interface">primary interface</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-interface-object">interface object</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-named-properties-object">named properties object</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#include">include</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-inherit">inherit</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-interface-prototype-object">interface prototype object</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#implements">implements</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#es-platform-objects">[[Realm]] field of a platform object</dfn></li>
     <li><dfn data-x="named-properties-object-getownproperty" data-x-href="https://webidl.spec.whatwg.org/#named-properties-object-getownproperty">[[GetOwnProperty]] internal method of a named properties object</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-callback-context">callback context</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-frozen-array-type">frozen array</dfn> and
         <dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-create-frozen-array">creating a frozen array</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#new" data-x="new">create a new object implementing the interface</dfn></li>
     <li><dfn data-x="dfn-callback-this-value" data-x-href="https://webidl.spec.whatwg.org/#dfn-callback-this-value">callback this value</dfn></li>
     <li><dfn data-x="concept-idl-convert" data-x-href="https://webidl.spec.whatwg.org/#es-type-mapping">converting</dfn> between Web IDL types and JS types</li>
     <li><dfn data-x="es-invoking-callback-functions" data-x-href="https://webidl.spec.whatwg.org/#invoke-a-callback-function">invoking</dfn> and
         <dfn data-x="es-constructing-callback-functions" data-x-href="https://webidl.spec.whatwg.org/#construct-a-callback-function">constructing</dfn> callback functions</li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-overload-resolution-algorithm">overload resolution algorithm</dfn></li>
     <li><dfn data-x="idl-exposed" data-x-href="https://webidl.spec.whatwg.org/#dfn-exposed">exposed</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#a-promise-resolved-with">a promise resolved with</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#a-promise-rejected-with">a promise rejected with</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#upon-rejection">upon rejection</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#upon-fulfillment">upon fulfillment</dfn></li>
     <li><dfn data-x="Global" data-x-href="https://webidl.spec.whatwg.org/#Global"><code>[Global]</code></dfn></li>
     <li><dfn data-x="LegacyFactoryFunction" data-x-href="https://webidl.spec.whatwg.org/#LegacyFactoryFunction"><code>[LegacyFactoryFunction]</code></dfn></li>
     <li><dfn data-x="LegacyLenientThis" data-x-href="https://webidl.spec.whatwg.org/#LegacyLenientThis"><code>[LegacyLenientThis]</code></dfn></li>
     <li><dfn data-x="LegacyNullToEmptyString" data-x-href="https://webidl.spec.whatwg.org/#LegacyNullToEmptyString"><code>[LegacyNullToEmptyString]</code></dfn></li>
     <li><dfn data-x="LegacyOverrideBuiltIns" data-x-href="https://webidl.spec.whatwg.org/#LegacyOverrideBuiltIns"><code>[LegacyOverrideBuiltIns]</code></dfn></li>
     <li><dfn data-x="LegacyPlatformObjectGetOwnProperty" data-x-href="https://webidl.spec.whatwg.org/#LegacyPlatformObjectGetOwnProperty">LegacyPlatformObjectGetOwnProperty</dfn></li>
     <li><dfn data-x="LegacyTreatNonObjectAsNull" data-x-href="https://webidl.spec.whatwg.org/#LegacyTreatNonObjectAsNull"><code>[LegacyTreatNonObjectAsNull]</code></dfn></li>
     <li><dfn data-x="LegacyUnenumerableNamedProperties" data-x-href="https://webidl.spec.whatwg.org/#LegacyUnenumerableNamedProperties"><code>[LegacyUnenumerableNamedProperties]</code></dfn></li>
     <li><dfn data-x="LegacyUnforgeable" data-x-href="https://webidl.spec.whatwg.org/#LegacyUnforgeable"><code>[LegacyUnforgeable]</code></dfn></li>
    </ul>

    <p><cite>Web IDL</cite> also defines the following types that are used in Web IDL fragments in
    this specification:</p>

    <ul class="brief">
     <li><dfn data-x="idl-ArrayBuffer" data-x-href="https://webidl.spec.whatwg.org/#idl-ArrayBuffer"><code>ArrayBuffer</code></dfn></li>
     <li><dfn data-x="idl-ArrayBufferView" data-x-href="https://webidl.spec.whatwg.org/#common-ArrayBufferView"><code>ArrayBufferView</code></dfn></li>
     <li><dfn data-x="idl-boolean" data-x-href="https://webidl.spec.whatwg.org/#idl-boolean"><code>boolean</code></dfn></li>
     <li><dfn data-x="idl-DOMString" data-x-href="https://webidl.spec.whatwg.org/#idl-DOMString"><code>DOMString</code></dfn></li>
     <li><dfn data-x="idl-double" data-x-href="https://webidl.spec.whatwg.org/#idl-double"><code>double</code></dfn></li>
     <li><dfn data-x="IDL enumeration" data-x-href="https://webidl.spec.whatwg.org/#idl-enums">enumeration</dfn></li>
     <li><dfn data-x="idl-Function" data-x-href="https://webidl.spec.whatwg.org/#common-Function"><code>Function</code></dfn></li>
     <li><dfn data-x="idl-long" data-x-href="https://webidl.spec.whatwg.org/#idl-long"><code>long</code></dfn></li>
     <li><dfn data-x="idl-object" data-x-href="https://webidl.spec.whatwg.org/#idl-object"><code>object</code></dfn></li>
     <li><dfn data-x="idl-Uint8ClampedArray" data-x-href="https://webidl.spec.whatwg.org/#idl-Uint8ClampedArray"><code>Uint8ClampedArray</code></dfn></li>
     <li><dfn data-x="idl-unrestricted-double" data-x-href="https://webidl.spec.whatwg.org/#idl-unrestricted-double"><code>unrestricted double</code></dfn></li>
     <li><dfn data-x="idl-unsigned-long" data-x-href="https://webidl.spec.whatwg.org/#idl-unsigned-long"><code>unsigned long</code></dfn></li>
     <li><dfn data-x="idl-USVString" data-x-href="https://webidl.spec.whatwg.org/#idl-USVString"><code>USVString</code></dfn></li>
     <li><dfn data-x="idl-VoidFunction" data-x-href="https://webidl.spec.whatwg.org/#VoidFunction"><code>VoidFunction</code></dfn></li>
    </ul>

    <p>The term <dfn data-x-href="https://webidl.spec.whatwg.org/#dfn-throw">throw</dfn> in this
    specification is used as defined in <cite>Web IDL</cite>. The <dfn
    data-x-href="https://webidl.spec.whatwg.org/#dfn-DOMException"><code>DOMException</code></dfn>
    type and the following exception names are defined by Web IDL and used by this
    specification:</p>

    <ul class="brief">
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#indexsizeerror">"<code>IndexSizeError</code>"</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#hierarchyrequesterror">"<code>HierarchyRequestError</code>"</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#invalidcharactererror">"<code>InvalidCharacterError</code>"</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#nomodificationallowederror">"<code>NoModificationAllowedError</code>"</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#notfounderror">"<code>NotFoundError</code>"</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#notsupportederror">"<code>NotSupportedError</code>"</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#invalidstateerror">"<code>InvalidStateError</code>"</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#syntaxerror">"<code>SyntaxError</code>"</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#invalidaccesserror">"<code>InvalidAccessError</code>"</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#securityerror">"<code>SecurityError</code>"</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#networkerror">"<code>NetworkError</code>"</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#aborterror">"<code>AbortError</code>"</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#quotaexceedederror">"<code>QuotaExceededError</code>"</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#datacloneerror">"<code>DataCloneError</code>"</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#encodingerror">"<code>EncodingError</code>"</dfn></li>
     <li><dfn data-x-href="https://webidl.spec.whatwg.org/#notallowederror">"<code>NotAllowedError</code>"</dfn></li>
    </ul>

    <p>When this specification requires a user agent to <dfn>create a <code>Date</code> object</dfn>
    representing a particular time (which could be the special value Not-a-Number), the milliseconds
    component of that time, if any, must be truncated to an integer, and the time value of the newly
    created <code>Date</code> object must represent the resulting truncated time.</p>

    <p class="example">For instance, given the time 23045 millionths of a second after 01:00 UTC on
    January 1st 2000, i.e. the time 2000-01-01T00:00:00.023045Z, then the <code>Date</code> object
    created representing that time would represent the same time as that created representing the
    time 2000-01-01T00:00:00.023Z, 45 millionths earlier. If the given time is NaN, then the result
    is a <code>Date</code> object that represents a time value NaN (indicating that the object does
    not represent a specific instant of time).</p>
   </dd>


   <dt>JavaScript</dt>

   <dd>
    <p>Some parts of the language described by this specification only support JavaScript as the
    underlying scripting language. <ref spec=JAVASCRIPT></p>

    <p class="note">The term "JavaScript" is used to refer to ECMA-262, rather than the official
    term ECMAScript, since the term JavaScript is more widely known.</p>

    <p>The following terms are defined in the JavaScript specification and used in this
    specification:</p>

    <ul class="brief">
     <li><dfn data-x-href="https://tc39.es/ecma262/#active-function-object">active function object</dfn></li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#sec-agents">agent</dfn> and
         <dfn data-x-href="https://tc39.es/ecma262/#sec-agent-clusters">agent cluster</dfn></li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#sec-automatic-semicolon-insertion">automatic semicolon insertion</dfn></li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#sec-candidate-executions">candidate execution</dfn></li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#current-realm">current realm</dfn></li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#early-error-rule">early error</dfn></li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#sec-forward-progress">forward progress</dfn></li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#sec-invariants-of-the-essential-internal-methods">invariants of the essential internal methods</dfn></li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#sec-execution-contexts">JavaScript execution context</dfn></li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#execution-context-stack">JavaScript execution context stack</dfn></li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#sec-code-realms">realm</dfn></li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#sec-jobcallback-records">JobCallback Record</dfn></li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#sec-built-in-function-objects">NewTarget</dfn></li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#running-execution-context">running JavaScript execution context</dfn></li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#surrounding-agent">surrounding agent</dfn></li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#sec-abstract-closure">abstract closure</dfn></li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#immutable-prototype-exotic-object">immutable prototype exotic object</dfn></li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#sec-well-known-symbols">Well-Known Symbols</dfn>, including
         <dfn>@@hasInstance</dfn>,
         <dfn>@@isConcatSpreadable</dfn>,
         <dfn>@@toPrimitive</dfn>, and
         <dfn>@@toStringTag</dfn></li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#sec-well-known-intrinsic-objects">Well-Known Intrinsic Objects</dfn>, including
         <dfn data-x-href="https://tc39.es/ecma262/#sec-properties-of-the-array-prototype-object">%Array.prototype%</dfn>,
         <dfn data-x-href="https://tc39.es/ecma262/#sec-properties-of-the-error-prototype-object">%Error.prototype%</dfn>,
         <dfn>%EvalError.prototype%</dfn>,
         <dfn data-x-href="https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object">%Function.prototype%</dfn>,
         <dfn data-x-href="https://tc39.es/ecma262/#sec-json.parse">%JSON.parse%</dfn>,
         <dfn data-x-href="https://tc39.es/ecma262/#sec-properties-of-the-object-prototype-object">%Object.prototype%</dfn>,
         <dfn data-x-href="https://tc39.es/ecma262/#sec-object.prototype.valueof">%Object.prototype.valueOf%</dfn>,
         <dfn>%RangeError.prototype%</dfn>,
         <dfn>%ReferenceError.prototype%</dfn>,
         <dfn>%SyntaxError.prototype%</dfn>,
         <dfn>%TypeError.prototype%</dfn>, and
         <dfn>%URIError.prototype%</dfn></li>

     <li>The <dfn data-x="js-prod-FunctionBody" data-x-href="https://tc39.es/ecma262/#prod-FunctionBody"><i>FunctionBody</i></dfn> production</li>
     <li>The <dfn data-x="js-prod-Module" data-x-href="https://tc39.es/ecma262/#prod-Module"><i>Module</i></dfn> production</li>
     <li>The <dfn data-x="js-prod-Pattern" data-x-href="https://tc39.es/ecma262/#prod-Pattern"><i>Pattern</i></dfn> production</li>
     <li>The <dfn data-x="js-prod-Script" data-x-href="https://tc39.es/ecma262/#prod-Script"><i>Script</i></dfn> production</li>

     <li>The <dfn data-x="js-Type" data-x-href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values">Type</dfn> notation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-completion-record-specification-type">Completion Record</dfn> specification type</li>
     <li>The <dfn data-x="js-List" data-x-href="https://tc39.es/ecma262/#sec-list-and-record-specification-type">List</dfn> and
             <dfn data-x-href="https://tc39.es/ecma262/#sec-list-and-record-specification-type">Record</dfn> specification types</li>
     <li>The <dfn data-x="PropertyDescriptor" data-x-href="https://tc39.es/ecma262/#sec-property-descriptor-specification-type">Property Descriptor</dfn> specification type</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-script-records">Script Record</dfn> specification type</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-cyclic-module-records">Cyclic Module Record</dfn> specification type</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-source-text-module-records">Source Text Module Record</dfn> specification type and its
             <dfn data-x="js-Evaluate" data-x-href="https://tc39.es/ecma262/#sec-moduleevaluation">Evaluate</dfn>,
             <dfn data-x="js-Link" data-x-href="https://tc39.es/ecma262/#sec-moduledeclarationlinking">Link</dfn> and
             <dfn data-x="js-LoadRequestedModules" data-x-href="https://tc39.es/ecma262/#sec-LoadRequestedModules">LoadRequestedModules</dfn> methods</li>

     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-arraycreate">ArrayCreate</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-call">Call</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-clear-kept-objects">ClearKeptObjects</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-cleanup-finalization-registry">CleanupFinalizationRegistry</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-construct">Construct</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-copydatablockbytes">CopyDataBlockBytes</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-createbuiltinfunction">CreateBuiltinFunction</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-createbytedatablock">CreateByteDataBlock</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-createdataproperty">CreateDataProperty</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-detacharraybuffer">DetachArrayBuffer</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-enumerableownproperties">EnumerableOwnProperties</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-finishdynamicimport">FinishDynamicImport</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-FinishLoadingImportedModule">FinishLoadingImportedModule</dfn> abstract operation</li>
     <li>The <dfn data-x="js-OrdinaryFunctionCreate" data-x-href="https://tc39.es/ecma262/#sec-ordinaryfunctioncreate">OrdinaryFunctionCreate</dfn> abstract operation</li>
     <li>The <dfn data-x="js-Get" data-x-href="https://tc39.es/ecma262/#sec-get-o-p">Get</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-getactivescriptormodule">GetActiveScriptOrModule</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-getfunctionrealm">GetFunctionRealm</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-hasownproperty">HasOwnProperty</dfn> abstract operation</li>
     <li>The <dfn data-x="js-HostCallJobCallback" data-x-href="https://tc39.es/ecma262/#sec-hostcalljobcallback">HostCallJobCallback</dfn> abstract operation</li>
     <li>The <dfn data-x="js-HostEnqueueFinalizationRegistryCleanupJob" data-x-href="https://tc39.es/ecma262/#sec-host-cleanup-finalization-registry">HostEnqueueFinalizationRegistryCleanupJob</dfn> abstract operation</li>
     <li>The <dfn data-x="js-HostEnqueuePromiseJob" data-x-href="https://tc39.es/ecma262/#sec-hostenqueuepromisejob">HostEnqueuePromiseJob</dfn> abstract operation</li>
     <li>The <dfn data-x="js-HostEnsureCanAddPrivateElement" data-x-href="https://tc39.es/ecma262/#sec-hostensurecanaddprivateelement">HostEnsureCanAddPrivateElement</dfn> abstract operation</li>
     <li>The <dfn data-x="js-HostEnsureCanCompileStrings" data-x-href="https://tc39.es/ecma262/#sec-hostensurecancompilestrings">HostEnsureCanCompileStrings</dfn> abstract operation</li>
     <li>The <dfn data-x="js-HostLoadImportedModule" data-x-href="https://tc39.es/proposal-import-attributes/#sec-HostLoadImportedModule">HostLoadImportedModule</dfn> abstract operation</li>
     <li>The <dfn data-x="js-HostMakeJobCallback" data-x-href="https://tc39.es/ecma262/#sec-hostmakejobcallback">HostMakeJobCallback</dfn> abstract operation</li>
     <li>The <dfn data-x="js-HostPromiseRejectionTracker" data-x-href="https://tc39.es/ecma262/#sec-host-promise-rejection-tracker">HostPromiseRejectionTracker</dfn> abstract operation</li>
     <li>The <dfn data-x="js-InitializeHostDefinedRealm" data-x-href="https://tc39.es/ecma262/#sec-initializehostdefinedrealm">InitializeHostDefinedRealm</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-isaccessordescriptor">IsAccessorDescriptor</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-iscallable">IsCallable</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-isconstructor">IsConstructor</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-isdatadescriptor">IsDataDescriptor</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-isdetachedbuffer">IsDetachedBuffer</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-issharedarraybuffer">IsSharedArrayBuffer</dfn> abstract operation</li>
     <li>The <dfn data-x="js-NewObjectEnvironment" data-x-href="https://tc39.es/ecma262/#sec-newobjectenvironment">NewObjectEnvironment</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-normalcompletion">NormalCompletion</dfn> abstract operation</li>
     <!-- the next set of Ordinary* abstract operations are in order of appearance -->
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-ordinarygetprototypeof">OrdinaryGetPrototypeOf</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-ordinarysetprototypeof">OrdinarySetPrototypeOf</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-ordinaryisextensible">OrdinaryIsExtensible</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-ordinarypreventextensions">OrdinaryPreventExtensions</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-ordinarygetownproperty">OrdinaryGetOwnProperty</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-ordinarydefineownproperty">OrdinaryDefineOwnProperty</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-ordinaryget">OrdinaryGet</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-ordinaryset">OrdinarySet</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-ordinarydelete">OrdinaryDelete</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-ordinaryownpropertykeys">OrdinaryOwnPropertyKeys</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-objectcreate">OrdinaryObjectCreate</dfn> abstract operation</li>
     <li>The <dfn data-x="js-ParseModule" data-x-href="https://tc39.es/ecma262/#sec-parsemodule">ParseModule</dfn> abstract operation</li>
     <li>The <dfn data-x="js-ParseScript" data-x-href="https://tc39.es/ecma262/#sec-parse-script">ParseScript</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-newpromisereactionjob">NewPromiseReactionJob</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-newpromiseresolvethenablejob">NewPromiseResolveThenableJob</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-regexpbuiltinexec">RegExpBuiltinExec</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-regexpcreate">RegExpCreate</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-runjobs">RunJobs</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-samevalue">SameValue</dfn> abstract operation</li>
     <li>The <dfn data-x="js-ScriptEvaluation" data-x-href="https://tc39.es/ecma262/#sec-runtime-semantics-scriptevaluation">ScriptEvaluation</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-set-immutable-prototype">SetImmutablePrototype</dfn> abstract operation</li>
     <li>The <dfn data-x="js-ToBoolean" data-x-href="https://tc39.es/ecma262/#sec-toboolean">ToBoolean</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-tostring">ToString</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-touint32">ToUint32</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#typedarray-create">TypedArrayCreate</dfn> abstract operation</li>

     <li>The <dfn data-x="js-abstract-equality" data-x-href="https://tc39.es/ecma262/#sec-islooselyequal">IsLooselyEqual</dfn> abstract operation</li>
     <li>The <dfn data-x="js-strict-equality" data-x-href="https://tc39.es/ecma262/#sec-isstrictlyequal">IsStrictlyEqual</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-atomics-object"><code>Atomics</code></dfn> object</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-date-objects"><code>Date</code></dfn> class</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-finalization-registry-objects"><code>FinalizationRegistry</code></dfn> class</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-regexp-regular-expression-objects"><code>RegExp</code></dfn> class</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-sharedarraybuffer-objects"><code>SharedArrayBuffer</code></dfn> class</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror"><code>TypeError</code></dfn> class</li>
     <li>The <dfn data-x="js-RangeError" data-x-href="https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-rangeerror"><code>RangeError</code></dfn> class</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-weak-ref-objects"><code>WeakRef</code></dfn> class</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-eval-x"><code>eval()</code></dfn> function</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-weak-ref.prototype.deref"><code>WeakRef.prototype.deref()</code></dfn> function</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot">[[IsHTMLDDA]]</dfn> internal slot</li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#sec-import-calls"><code>import()</code></dfn></li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#sec-meta-properties"><code>import.meta</code></dfn></li>
     <li>The <dfn data-x="js-HostGetImportMetaProperties" data-x-href="https://tc39.es/ecma262/#sec-hostgetimportmetaproperties">HostGetImportMetaProperties</dfn> abstract operation</li>
     <li>The <dfn data-x="js-typeof" data-x-href="https://tc39.es/ecma262/#sec-typeof-operator"><code>typeof</code></dfn> operator</li>
     <li>The <dfn data-x-href="https://tc39.es/ecma262/#sec-delete-operator"><code>delete</code></dfn> operator</li>
     <li><dfn data-x-href="https://tc39.es/ecma262/#table-49">The <var>TypedArray</var> Constructors</dfn> table</li>
    </ul>

    <p>Users agents that support JavaScript must also implement <cite>ECMAScript
    Internationalization API</cite>. <ref spec=JSINTL></p>

    <p>User agents that support JavaScript must also implement the <cite>Import Attributes</cite>
    proposal. The following terms are defined there, and used in this specification: <ref
    spec=JSIMPORTATTRIBUTES></p>

    <ul class="brief">
     <li>The <dfn data-x-href="https://tc39.es/proposal-import-attributes/#sec-modulerequest-record">ModuleRequest Record</dfn> specification type</li>
     <li>The <dfn data-x="js-HostGetSupportedImportAttributes" data-x-href="https://tc39.es/proposal-import-attributes/#sec-hostgetsupportedimportattributes">HostGetSupportedImportAttributes</dfn> abstract operation</li>
    </ul>

    <p>User agents that support JavaScript must also implement the <cite>JSON modules</cite>
    proposal. The following terms are defined there, and used in this specification: <ref
    spec=JSJSONMODULES></p>

    <ul class="brief">
     <li>The <dfn data-x-href="https://tc39.es/proposal-json-modules/#sec-create-default-export-synthetic-module">CreateDefaultExportSyntheticModule</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/proposal-json-modules/#sec-setsyntheticmoduleexport">SetSyntheticModuleExport</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://tc39.es/proposal-json-modules/#sec-synthetic-module-records">Synthetic Module Record</dfn> specification type</li>
     <li>The <dfn data-x-href="https://tc39.es/proposal-json-modules/#sec-parse-json-module">ParseJSONModule</dfn> abstract operation</li>
    </ul>

    <p>User agents that support JavaScript must also implement the <cite>Resizable ArrayBuffer and
    growable SharedArrayBuffer</cite> proposal. The following terms are defined there, and used in
    this specification: <ref spec=JSRESIZABLEBUFFERS></p>

    <ul class="brief">
     <li>The <dfn data-x-href="https://tc39.es/proposal-resizablearraybuffer/#sec-isarraybufferviewoutofbounds">IsArrayBufferViewOutOfBounds</dfn> abstract operation</li>
    </ul>

    <p>User agents that support JavaScript must also implement the <cite>RegExp <code data-x="">v</code> flag</cite>
    proposal. <ref spec=JSREGEXPVFLAG></p>
   </dd>

   <dt>WebAssembly</dt>

   <dd>
    <p>The following term is defined in <cite>WebAssembly JavaScript Interface</cite>: <ref
    spec=WASMJS></p>

    <ul class="brief">
     <li><dfn data-x-href="https://webassembly.github.io/spec/js-api/#module"><code>WebAssembly.Module</code></dfn></li>
    </ul>
   </dd>

   <dt>DOM</dt>

   <dd>
    <p>The Document Object Model (DOM) is a representation &mdash; a model &mdash; of a document and
    its content. The DOM is not just an API; the conformance criteria of HTML implementations are
    defined, in this specification, in terms of operations on the DOM. <ref spec=DOM></p>

    <p>Implementations must support DOM and the events defined in UI Events, because this
    specification is defined in terms of the DOM, and some of the features are defined as extensions
    to the DOM interfaces. <ref spec=DOM> <ref spec=UIEVENTS></p>

    <p>In particular, the following features are defined in <cite>DOM</cite>: <ref
    spec=DOM></p>

    <ul class="brief">
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#interface-attr"><code>Attr</code></dfn> interface</li>
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#interface-characterdata"><code>CharacterData</code></dfn> interface</li>
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#interface-comment"><code>Comment</code></dfn> interface</li>
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#interface-domimplementation"><code>DOMImplementation</code></dfn> interface</li>
     <li><dfn data-x="DOM Document" data-x-href="https://dom.spec.whatwg.org/#interface-document"><code>Document</code></dfn> interface and its
         <dfn data-x="dom-Document-doctype" data-x-href="https://dom.spec.whatwg.org/#dom-document-doctype"><code>doctype</code></dfn> attribute
     </li>
     <li><dfn data-x="DOM DocumentOrShadowRoot" data-x-href="https://dom.spec.whatwg.org/#documentorshadowroot"><code>DocumentOrShadowRoot</code></dfn> interface</li>
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#interface-documentfragment"><code>DocumentFragment</code></dfn> interface</li>
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#interface-documenttype"><code>DocumentType</code></dfn> interface</li>
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#interface-childnode"><code>ChildNode</code></dfn> interface</li>
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#interface-element"><code>Element</code></dfn> interface</li>
     <li><dfn data-x="dom-Element-attachShadow" data-x-href="https://dom.spec.whatwg.org/#dom-element-attachshadow"><code>attachShadow()</code></dfn> method.</li>
     <li>An element's <dfn data-x="concept-element-shadow-root" data-x-href="https://dom.spec.whatwg.org/#concept-element-shadow-root">shadow root</dfn></li>
     <li>The <dfn data-x="dom-retarget" data-x-href="https://dom.spec.whatwg.org/#retarget">retargeting algorithm</dfn></li>
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#interface-node"><code>Node</code></dfn> interface</li>
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#interface-nodelist"><code>NodeList</code></dfn> interface</li>
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#interface-processinginstruction"><code>ProcessingInstruction</code></dfn> interface</li>
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#interface-shadowroot"><code>ShadowRoot</code></dfn> interface</li>
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#interface-text"><code>Text</code></dfn> interface</li>

     <li><dfn data-x-href="https://dom.spec.whatwg.org/#concept-node-document">node document</dfn> concept</li>
     <li><dfn data-x="concept-document-type" data-x-href="https://dom.spec.whatwg.org/#concept-document-type">document type</dfn> concept</li>
     <li><dfn data-x="concept-DocumentFragment-host" data-x-href="https://dom.spec.whatwg.org/#concept-documentfragment-host">host</dfn> concept</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#concept-shadow-root">shadow root</dfn> concept, and its <dfn data-x-href="https://dom.spec.whatwg.org/#shadowroot-delegates-focus">delegates focus</dfn> and <dfn data-x-href="https://dom.spec.whatwg.org/#shadowroot-available-to-element-internals">available to element internals</dfn>.</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#element-shadow-host">shadow host</dfn> concept</li>
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#interface-htmlcollection"><code>HTMLCollection</code></dfn> interface, its
         <dfn data-x="dom-HTMLCollection-length" data-x-href="https://dom.spec.whatwg.org/#dom-htmlcollection-length"><code>length</code></dfn> attribute, and its
         <dfn data-x="dom-HTMLCollection-item" data-x-href="https://dom.spec.whatwg.org/#dom-htmlcollection-item"><code>item()</code></dfn> and
         <dfn data-x="dom-HTMLCollection-namedItem" data-x-href="https://dom.spec.whatwg.org/#dom-htmlcollection-nameditem"><code>namedItem()</code></dfn> methods</li>
     <li>The terms <dfn data-x="concept-collection" data-x-href="https://dom.spec.whatwg.org/#concept-collection">collection</dfn> and <dfn data-x-href="https://dom.spec.whatwg.org/#represented-by-the-collection">represented by the collection</dfn></li>

     <li><dfn data-x-href="https://dom.spec.whatwg.org/#interface-domtokenlist"><code>DOMTokenList</code></dfn> interface, and its
         <dfn data-x="dom-DOMTokenList-value" data-x-href="https://dom.spec.whatwg.org/#dom-domtokenlist-value"><code>value</code></dfn> attribute and
         <dfn data-x="dom-DOMTokenList-supports" data-x-href="https://dom.spec.whatwg.org/#dom-domtokenlist-supports"><code>supports</code></dfn> operation</li>

     <li><dfn data-x="dom-DOMImplementation-createDocument" data-x-href="https://dom.spec.whatwg.org/#dom-domimplementation-createdocument"><code>createDocument()</code></dfn> method</li>
     <li><dfn data-x="dom-DOMImplementation-createHTMLDocument" data-x-href="https://dom.spec.whatwg.org/#dom-domimplementation-createhtmldocument"><code>createHTMLDocument()</code></dfn> method</li>
     <li><dfn data-x="dom-Document-createElement" data-x-href="https://dom.spec.whatwg.org/#dom-document-createelement"><code>createElement()</code></dfn> method</li>
     <li><dfn data-x="dom-Document-createElementNS" data-x-href="https://dom.spec.whatwg.org/#dom-document-createelementns"><code>createElementNS()</code></dfn> method</li>
     <li><dfn data-x="dom-Document-getElementById" data-x-href="https://dom.spec.whatwg.org/#dom-nonelementparentnode-getelementbyid"><code>getElementById()</code></dfn> method</li>
     <li><dfn data-x="dom-document-getElementsByClassName" data-x-href="https://dom.spec.whatwg.org/#dom-document-getelementsbyclassname"><code>getElementsByClassName()</code></dfn> method</li>
     <li><dfn data-x="dom-Node-appendChild" data-x-href="https://dom.spec.whatwg.org/#dom-node-appendchild"><code>appendChild()</code></dfn> method</li>
     <li><dfn data-x="dom-Node-cloneNode" data-x-href="https://dom.spec.whatwg.org/#dom-node-clonenode"><code>cloneNode()</code></dfn> method</li>
     <li><dfn data-x="dom-Document-importNode" data-x-href="https://dom.spec.whatwg.org/#dom-document-importnode"><code>importNode()</code></dfn> method</li>
     <li><dfn data-x="dom-Event-preventDefault" data-x-href="https://dom.spec.whatwg.org/#dom-event-preventdefault"><code>preventDefault()</code></dfn> method</li>
     <li><dfn data-x="dom-Element-id" data-x-href="https://dom.spec.whatwg.org/#dom-element-id"><code>id</code></dfn> attribute</li>
     <li><dfn data-x="dom-Element-setAttribute" data-x-href="https://dom.spec.whatwg.org/#dom-element-setAttribute"><code>setAttribute()</code></dfn> method</li>
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#dom-node-textcontent"><code>textContent</code></dfn> attribute</li>

     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#concept-tree">tree</dfn>, <dfn data-x-href="https://dom.spec.whatwg.org/#concept-shadow-tree">shadow tree</dfn>, and <dfn data-x-href="https://dom.spec.whatwg.org/#concept-node-tree">node tree</dfn> concepts</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#concept-tree-order">tree order</dfn> and <dfn data-x-href="https://dom.spec.whatwg.org/#concept-shadow-including-tree-order">shadow-including tree order</dfn> concepts</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#concept-element" data-x="concept-element">element</dfn> concept</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#concept-tree-child" data-x="concept-tree-child">child</dfn> concept</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#concept-tree-root">root</dfn> and <dfn data-x-href="https://dom.spec.whatwg.org/#concept-shadow-including-root">shadow-including root</dfn> concepts</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#concept-tree-inclusive-ancestor">inclusive ancestor</dfn>,
             <dfn data-x-href="https://dom.spec.whatwg.org/#concept-tree-descendant">descendant</dfn>,
             <dfn data-x="concept-shadow-including-ancestor" data-x-href="https://dom.spec.whatwg.org/#concept-shadow-including-ancestor">shadow-including ancestor</dfn>,
             <dfn data-x-href="https://dom.spec.whatwg.org/#concept-shadow-including-descendant">shadow-including descendant</dfn>,
             <dfn data-x-href="https://dom.spec.whatwg.org/#concept-shadow-including-inclusive-descendant">shadow-including inclusive descendant</dfn>, and
             <dfn data-x-href="https://dom.spec.whatwg.org/#concept-shadow-including-inclusive-ancestor">shadow-including inclusive ancestor</dfn> concepts</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#concept-tree-first-child">first child</dfn>,
             <dfn data-x-href="https://dom.spec.whatwg.org/#concept-tree-next-sibling">next sibling</dfn>, and
             <dfn data-x-href="https://dom.spec.whatwg.org/#concept-tree-previous-sibling">previous sibling</dfn> concepts</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#parent-element">parent element</dfn> concept</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#document-element">document element</dfn> concept</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#in-a-document-tree">in a document tree</dfn>, <dfn data-x-href="https://dom.spec.whatwg.org/#in-a-document">in a document</dfn> (legacy), and <dfn data-x-href="https://dom.spec.whatwg.org/#connected">connected</dfn> concepts</li>
     <li>The <dfn data-x="concept-slot" data-x-href="https://dom.spec.whatwg.org/#concept-slot">slot</dfn> concept, and its <dfn data-x="slot-name" data-x-href="https://dom.spec.whatwg.org/#slot-name">name</dfn> and <dfn data-x-href="https://dom.spec.whatwg.org/#slot-assigned-nodes">assigned nodes</dfn></li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#slotable-assigned-slot">assigned slot</dfn> concept</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#dom-shadowroot-slot-assignment">slot assignment</dfn> concept</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#concept-slotable">slottable</dfn> concept</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#assign-slotables-for-a-tree">assign slottables for a tree</dfn> algorithm</li>
     <li>The <dfn data-x="event-slotchange" data-x-href="https://dom.spec.whatwg.org/#eventdef-htmlslotelement-slotchange"><code>slotchange</code></dfn> event</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#concept-tree-inclusive-descendant">inclusive descendant</dfn> concept</li>
     <li>The <dfn data-x="finding flattened slottables" data-x-href="https://dom.spec.whatwg.org/#find-flattened-slotables">find flattened slottables</dfn> algorithm</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#slottable-manual-slot-assignment">manual slot assignment</dfn> concept</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#assign-a-slot">assign a slot</dfn> algorithm</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#concept-node-pre-insert">pre-insert</dfn>, <dfn data-x="concept-node-insert" data-x-href="https://dom.spec.whatwg.org/#concept-node-insert">insert</dfn>, <dfn data-x="concept-node-append" data-x-href="https://dom.spec.whatwg.org/#concept-node-append">append</dfn>, <dfn data-x="concept-node-replace" data-x-href="https://dom.spec.whatwg.org/#concept-node-replace">replace</dfn>, <dfn data-x="concept-node-replace-all" data-x-href="https://dom.spec.whatwg.org/#concept-node-replace-all">replace all</dfn>, <dfn data-x-href="https://dom.spec.whatwg.org/#string-replace-all">string replace all</dfn>, <dfn data-x="concept-node-remove" data-x-href="https://dom.spec.whatwg.org/#concept-node-remove">remove</dfn>, and <dfn data-x="concept-node-adopt" data-x-href="https://dom.spec.whatwg.org/#concept-node-adopt">adopt</dfn> algorithms for nodes</li>
     <li>The <dfn data-x="concept-tree-descendant" data-x-href="https://dom.spec.whatwg.org/#concept-tree-descendant">descendant</dfn> concept</li>
     <li>The <dfn data-x="concept-node-insert-ext" data-x-href="https://dom.spec.whatwg.org/#concept-node-insert-ext">insertion steps</dfn>,
             <dfn data-x="concept-node-remove-ext" data-x-href="https://dom.spec.whatwg.org/#concept-node-remove-ext">removing steps</dfn>,
             <dfn data-x="concept-node-adopt-ext" data-x-href="https://dom.spec.whatwg.org/#concept-node-adopt-ext">adopting steps</dfn>, and
             <dfn data-x-href="https://dom.spec.whatwg.org/#concept-node-children-changed-ext">children changed steps</dfn> hooks for elements</li>
     <li>The <dfn data-x="concept-element-attributes-change" data-x-href="https://dom.spec.whatwg.org/#concept-element-attributes-change">change</dfn>, <dfn data-x="concept-element-attributes-append" data-x-href="https://dom.spec.whatwg.org/#concept-element-attributes-append">append</dfn>, <dfn data-x="concept-element-attributes-remove" data-x-href="https://dom.spec.whatwg.org/#concept-element-attributes-remove">remove</dfn>, <dfn data-x="concept-element-attributes-replace" data-x-href="https://dom.spec.whatwg.org/#concept-element-attributes-replace">replace</dfn>, <dfn data-x="concept-element-attributes-get-by-namespace" data-x-href="https://dom.spec.whatwg.org/#concept-element-attributes-get-by-namespace">get an attribute by namespace and local name</dfn>, <dfn data-x="concept-element-attributes-set-value" data-x-href="https://dom.spec.whatwg.org/#concept-element-attributes-set-value">set value</dfn>, and <dfn data-x="concept-element-attributes-remove-by-namespace" data-x-href="https://dom.spec.whatwg.org/#concept-element-attributes-remove-by-namespace">remove an attribute by namespace and local name</dfn> algorithms for attributes</li>
     <li>The <dfn data-x="concept-element-attributes-change-ext" data-x-href="https://dom.spec.whatwg.org/#concept-element-attributes-change-ext">attribute change steps</dfn> hook for attributes</li>
     <li>The <dfn data-x="concept-attribute-value" data-x-href="https://dom.spec.whatwg.org/#concept-attribute-value">value</dfn> concept for attributes</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#concept-element-attribute">attribute list</dfn> concept</li>
     <li>The <dfn data-x="concept-cd-data" data-x-href="https://dom.spec.whatwg.org/#concept-cd-data">data</dfn> of a <code>CharacterData</code> node and its
             <dfn data-x-href="https://dom.spec.whatwg.org/#concept-cd-replace">replace data</dfn> algorithm</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#concept-child-text-content">child text content</dfn> of a node</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#concept-descendant-text-content">descendant text content</dfn> of a node</li>
     <li>The <dfn data-x="concept-doctype-name" data-x-href="https://dom.spec.whatwg.org/#concept-doctype-name">name</dfn>,
             <dfn data-x="concept-doctype-publicid" data-x-href="https://dom.spec.whatwg.org/#concept-doctype-publicid">public ID</dfn>, and
             <dfn data-x="concept-doctype-systemid" data-x-href="https://dom.spec.whatwg.org/#concept-doctype-systemid">system ID</dfn> of a doctype</li>
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#interface-event"><code>Event</code></dfn> interface</li>
     <li><dfn data-x="dom-Event-constructor" data-x-href="https://dom.spec.whatwg.org/#concept-event-constructor"><code>Event</code> and derived interfaces constructor behavior</dfn></li>
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#interface-eventtarget"><code>EventTarget</code></dfn> interface</li>
     <li>The <!--en-GB--><dfn id="activation-behaviour" data-x-href="https://dom.spec.whatwg.org/#eventtarget-activation-behavior">activation behavior</dfn> hook</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#eventtarget-legacy-pre-activation-behavior">legacy-pre-activation behavior</dfn> hook</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#eventtarget-legacy-canceled-activation-behavior">legacy-canceled-activation behavior</dfn> hook</li>
     <li>The <dfn data-x="creating an event" data-x-href="https://dom.spec.whatwg.org/#concept-event-create">create an event</dfn> algorithm</li>
     <li>The <dfn data-x="concept-event-fire" data-x-href="https://dom.spec.whatwg.org/#concept-event-fire">fire an event</dfn> algorithm</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#canceled-flag">canceled flag</dfn></li>
     <li>The <dfn data-x="concept-event-dispatch" data-x-href="https://dom.spec.whatwg.org/#concept-event-dispatch">dispatch</dfn> algorithm</li>
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#dictdef-eventinit"><code>EventInit</code></dfn> dictionary type</li>
     <li><dfn data-x="dom-Event-type" data-x-href="https://dom.spec.whatwg.org/#dom-event-type"><code>type</code></dfn> attribute</li>
     <li>An event's <dfn data-x="concept-event-target" data-x-href="https://dom.spec.whatwg.org/#concept-event-target">target</dfn></li>
     <li><dfn data-x="dom-Event-currentTarget" data-x-href="https://dom.spec.whatwg.org/#dom-event-currenttarget"><code>currentTarget</code></dfn> attribute</li>
     <li><dfn data-x="dom-Event-bubbles" data-x-href="https://dom.spec.whatwg.org/#dom-event-bubbles"><code>bubbles</code></dfn> attribute</li>
     <li><dfn data-x="dom-Event-cancelable" data-x-href="https://dom.spec.whatwg.org/#dom-event-cancelable"><code>cancelable</code></dfn> attribute</li>
     <li><dfn data-x="dom-Event-composed" data-x-href="https://dom.spec.whatwg.org/#dom-event-composed"><code>composed</code></dfn> attribute</li>
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#composed-flag">composed flag</dfn></li>
     <li><dfn data-x="dom-Event-isTrusted" data-x-href="https://dom.spec.whatwg.org/#dom-event-istrusted"><code>isTrusted</code></dfn> attribute</li>
     <li><dfn data-x="dom-Event-initEvent" data-x-href="https://dom.spec.whatwg.org/#dom-event-initevent"><code>initEvent()</code></dfn> method</li>
     <li><dfn data-x-href="https://dom.spec.whatwg.org/#add-an-event-listener">add an event listener</dfn></li>
     <li><dfn data-x="dom-EventTarget-addEventListener" data-x-href="https://dom.spec.whatwg.org/#dom-eventtarget-addeventlistener"><code>addEventListener()</code></dfn> method</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#remove-an-event-listener">remove an event listener</dfn> and
             <dfn data-x-href="https://dom.spec.whatwg.org/#remove-all-event-listeners">remove all event listeners</dfn> algorithms</li>
     <li><dfn data-x="dom-EventListener" data-x-href="https://dom.spec.whatwg.org/#callbackdef-eventlistener"><code>EventListener</code></dfn> callback interface</li>
     <li>The <dfn data-x="concept-event-type" data-x-href="https://dom.spec.whatwg.org/#dom-event-type">type</dfn> of an event</li>
     <li>An <dfn data-x-href="https://dom.spec.whatwg.org/#concept-event-listener">event listener</dfn> and its
            <dfn data-x="event listener type" data-x-href="https://dom.spec.whatwg.org/#event-listener-type">type</dfn> and
            <dfn data-x="event listener callback" data-x-href="https://dom.spec.whatwg.org/#event-listener-callback">callback</dfn></li>

     <li>The <dfn data-x="document's character encoding" data-x-href="https://dom.spec.whatwg.org/#concept-document-encoding">encoding</dfn> (herein the <i>character encoding</i>),
             <dfn data-x="concept-document-mode" data-x-href="https://dom.spec.whatwg.org/#concept-document-mode">mode</dfn>, and
             <dfn data-x="concept-document-content-type" data-x-href="https://dom.spec.whatwg.org/#concept-document-content-type">content type</dfn> of a <code>Document</code></li>
     <li>The distinction between <dfn data-x-href="https://dom.spec.whatwg.org/#xml-document">XML documents</dfn> and
                                 <dfn data-x-href="https://dom.spec.whatwg.org/#html-document">HTML documents</dfn></li>
     <li>The terms <dfn data-x-href="https://dom.spec.whatwg.org/#concept-document-quirks">quirks mode</dfn>,
                   <dfn data-x-href="https://dom.spec.whatwg.org/#concept-document-limited-quirks">limited-quirks mode</dfn>, and
                   <dfn data-x-href="https://dom.spec.whatwg.org/#concept-document-no-quirks">no-quirks mode</dfn></li>
     <li>The algorithm to <dfn data-x="concept-node-clone" data-x-href="https://dom.spec.whatwg.org/#concept-node-clone">clone</dfn> a <code>Node</code>, and the concept of
                          <dfn data-x="concept-node-clone-ext" data-x-href="https://dom.spec.whatwg.org/#concept-node-clone-ext">cloning steps</dfn> used by that algorithm</li>
     <li>The concept of <dfn>base URL change steps</dfn> and the definition of what happens when an element is <dfn>affected by a base URL change</dfn></li>
     <li>The concept of an element's <dfn data-x="concept-id" data-x-href="https://dom.spec.whatwg.org/#concept-id">unique identifier (ID)</dfn></li>
     <li>The concept of an element's <dfn data-x="concept-class" data-x-href="https://dom.spec.whatwg.org/#concept-class">classes</dfn></li>
     <li>The term <dfn data-x="concept-supported-tokens" data-x-href="https://dom.spec.whatwg.org/#concept-supported-tokens">supported tokens</dfn></li>

     <li>The concept of a DOM <dfn data-x="concept-range" data-x-href="https://dom.spec.whatwg.org/#concept-range">range</dfn>, and the terms
                              <dfn data-x="concept-range-start" data-x-href="https://dom.spec.whatwg.org/#concept-range-start">start</dfn>,
                              <dfn data-x="concept-range-end" data-x-href="https://dom.spec.whatwg.org/#concept-range-end">end</dfn>, and
                              <dfn data-x="concept-range-bp" data-x-href="https://dom.spec.whatwg.org/#concept-range-bp">boundary point</dfn> as applied to ranges.</li>

     <li>The <dfn data-x="create an element" data-x-href="https://dom.spec.whatwg.org/#concept-create-element">create an element</dfn> algorithm</li>
     <li>The <dfn data-x="element interface" data-x-href="https://dom.spec.whatwg.org/#concept-element-interface">element interface</dfn> concept</li>
     <li>The concepts of <dfn data-x-href="https://dom.spec.whatwg.org/#concept-element-custom-element-state">custom element state</dfn>, and of
                         <dfn data-x="concept-element-defined" data-x-href="https://dom.spec.whatwg.org/#concept-element-defined">defined</dfn> and
                         <dfn data-x="concept-element-custom" data-x-href="https://dom.spec.whatwg.org/#concept-element-custom">custom</dfn> elements</li>
     <li>An element's <dfn data-x="concept-element-namespace" data-x-href="https://dom.spec.whatwg.org/#concept-element-namespace">namespace</dfn>,
                      <dfn data-x="concept-element-namespace-prefix" data-x-href="https://dom.spec.whatwg.org/#concept-element-namespace-prefix">namespace prefix</dfn>,
                      <dfn data-x="concept-element-local-name" data-x-href="https://dom.spec.whatwg.org/#concept-element-local-name">local name</dfn>,
                      <dfn data-x="concept-element-custom-element-definition" data-x-href="https://dom.spec.whatwg.org/#concept-element-custom-element-definition">custom element definition</dfn>, and
                      <dfn data-x="concept-element-is-value" data-x-href="https://dom.spec.whatwg.org/#concept-element-is-value"><code data-x="">is</code> value</dfn></li>

     <li><dfn data-x-href="https://dom.spec.whatwg.org/#mutationobserver"><code>MutationObserver</code></dfn> interface and <dfn data-x-href="https://dom.spec.whatwg.org/#mutation-observers">mutation observers</dfn> in general</li>
     <li>The <dfn data-x-href="https://dom.spec.whatwg.org/#concept-element-attributes-get-by-name">get an attribute by name</dfn> algorithm</li>
    </ul>

    <p>The following features are defined in <cite>UI Events</cite>: <ref spec=UIEVENTS></p>

    <ul class="brief">
     <li>The <dfn data-x-href="https://w3c.github.io/uievents/#mouseevent"><code>MouseEvent</code></dfn> interface</li>
     <li>The <code>MouseEvent</code> interface's <dfn data-x="dom-MouseEvent-relatedTarget" data-x-href="https://w3c.github.io/uievents/#dom-mouseevent-relatedtarget"><code>relatedTarget</code></dfn> attribute</li>
     <li><dfn data-x-href="https://w3c.github.io/uievents/#dictdef-mouseeventinit"><code>MouseEventInit</code></dfn> dictionary type</li>

     <li>The <dfn data-x-href="https://w3c.github.io/uievents/#focusevent"><code>FocusEvent</code></dfn> interface</li>
     <li>The <code>FocusEvent</code> interface's <dfn data-x="dom-FocusEvent-relatedTarget" data-x-href="https://w3c.github.io/uievents/#dom-focusevent-relatedtarget"><code>relatedTarget</code></dfn> attribute</li>

     <li>The <dfn data-x-href="https://w3c.github.io/uievents/#uievent"><code>UIEvent</code></dfn> interface</li>
     <li>The <code>UIEvent</code> interface's <dfn data-x="dom-UIEvent-view" data-x-href="https://w3c.github.io/uievents/#dom-uievent-view"><code>view</code></dfn> attribute</li>

     <li><dfn data-x="event-auxclick" data-x-href="https://w3c.github.io/uievents/#event-type-auxclick"><code>auxclick</code></dfn> event</li>
     <li><dfn data-x="event-beforeinput" data-x-href="https://w3c.github.io/uievents/#event-type-beforeinput"><code>beforeinput</code></dfn> event</li>
     <li><dfn data-x="event-click" data-x-href="https://w3c.github.io/uievents/#event-type-click"><code>click</code></dfn> event</li>
     <li><dfn data-x="event-contextmenu" data-x-href="https://w3c.github.io/uievents/#event-type-contextmenu"><code>contextmenu</code></dfn> event</li>
     <li><dfn data-x="event-dblclick" data-x-href="https://w3c.github.io/uievents/#event-type-dblclick"><code>dblclick</code></dfn> event</li>
     <li><dfn data-x="event-input" data-x-href="https://w3c.github.io/uievents/#event-type-input"><code>input</code></dfn> event</li>
     <li><dfn data-x="event-mousedown" data-x-href="https://w3c.github.io/uievents/#event-type-mousedown"><code>mousedown</code></dfn> event</li>
     <li><dfn data-x="event-mouseenter" data-x-href="https://w3c.github.io/uievents/#event-type-mouseenter"><code>mouseenter</code></dfn> event</li>
     <li><dfn data-x="event-mouseleave" data-x-href="https://w3c.github.io/uievents/#event-type-mouseleave"><code>mouseleave</code></dfn> event</li>
     <li><dfn data-x="event-mousemove" data-x-href="https://w3c.github.io/uievents/#event-type-mousemove"><code>mousemove</code></dfn> event</li>
     <li><dfn data-x="event-mouseout" data-x-href="https://w3c.github.io/uievents/#event-type-mouseout"><code>mouseout</code></dfn> event</li>
     <li><dfn data-x="event-mouseover" data-x-href="https://w3c.github.io/uievents/#event-type-mouseover"><code>mouseover</code></dfn> event</li>
     <li><dfn data-x="event-mouseup" data-x-href="https://w3c.github.io/uievents/#event-type-mouseup"><code>mouseup</code></dfn> event</li>
     <li><dfn data-x="event-wheel" data-x-href="https://w3c.github.io/uievents/#event-type-wheel"><code>wheel</code></dfn> event</li>

     <li><dfn data-x="event-keydown" data-x-href="https://w3c.github.io/uievents/#event-type-keydown"><code>keydown</code></dfn> event</li>
     <li><dfn data-x="event-keypress" data-x-href="https://w3c.github.io/uievents/#event-type-keypress"><code>keypress</code></dfn> event</li>
     <li><dfn data-x="event-keyup" data-x-href="https://w3c.github.io/uievents/#event-type-keyup"><code>keyup</code></dfn> event</li>
    </ul>

    <p>The following features are defined in <cite>Touch Events</cite>: <ref spec=TOUCH></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/touch-events/#touch-interface"><code>Touch</code></dfn> interface</li>
     <li><dfn data-x-href="https://w3c.github.io/touch-events/#dfn-touch-point">Touch point</dfn> concept</li>
     <li><dfn data-x="event-touchend" data-x-href="https://w3c.github.io/touch-events/#event-touchend"><code>touchend</code></dfn> event</li>
    </ul>

    <p>The following features are defined in <cite>Pointer Events</cite>: <ref spec=POINTEREVENTS></p>

    <ul class="brief">
     <li>The <dfn data-x-href="https://w3c.github.io/pointerevents/#pointerevent-interface"><code>PointerEvent</code></dfn> interface</li>
     <li>The <code>PointerEvent</code> interface's <dfn data-x-href="https://w3c.github.io/pointerevents/#dom-pointerevent-pointertype"><code>pointerType</code></dfn> attribute</li>
     <li><dfn data-x-href="https://w3c.github.io/pointerevents/#dfn-fire-a-pointer-event">fire a pointer event</dfn></li>
     <li><dfn data-x="event-pointerdown" data-x-href="https://w3c.github.io/pointerevents/#the-pointerdown-event"><code>pointerdown</code></dfn> event</li>
     <li><dfn data-x="event-pointerup" data-x-href="https://w3c.github.io/pointerevents/#the-pointerup-event"><code>pointerup</code></dfn> event</li>
     <li><dfn data-x="event-pointercancel" data-x-href="https://w3c.github.io/pointerevents/#the-pointercancel-event"><code>pointercancel</code></dfn> event</li>
    </ul>

    <p>The following events are defined in <cite>Clipboard API and events</cite>: <ref spec=CLIPBOARD-APIS></p>

    <ul class="brief">
     <li><dfn data-x="event-copy" data-x-href="https://w3c.github.io/clipboard-apis/#clipboard-event-copy"><code>copy</code></dfn> event</li>
     <li><dfn data-x="event-cut" data-x-href="https://w3c.github.io/clipboard-apis/#clipboard-event-cut"><code>cut</code></dfn> event</li>
     <li><dfn data-x="event-paste" data-x-href="https://w3c.github.io/clipboard-apis/#clipboard-event-paste"><code>paste</code></dfn> event</li>
    </ul>

    <p>This specification sometimes uses the term <dfn data-x="">name</dfn> to refer to the event's
    <span data-x="concept-event-type">type</span>; as in, "an event named <code
    data-x="">click</code>" or "if the event name is <code data-x="">keypress</code>". The terms
    "name" and "type" for events are synonymous.</p>

    <p>The following features are defined in <cite>DOM Parsing and Serialization</cite>: <ref spec=DOMPARSING></p>

    <ul class="brief">
     <li><dfn data-x="dom-innerHTML" data-x-href="https://w3c.github.io/DOM-Parsing/#dom-element-innerhtml"><code>innerHTML</code></dfn></li>
     <li><dfn data-x="dom-outerHTML" data-x-href="https://w3c.github.io/DOM-Parsing/#dom-element-outerhtml"><code>outerHTML</code></dfn></li>
    </ul>

    <p>The following features are defined in <cite>Selection API</cite>: <ref spec=SELECTION></p>

    <ul class="brief">
     <li><dfn data-x="document-selection" data-x-href="https://w3c.github.io/selection-api/#dfn-selection">selection</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/selection-api/#selection-interface"><code>Selection</code></dfn></li>
    </ul>

    <p class="note">User agents are encouraged to implement the features described in
    <cite>execCommand</cite>. <ref spec=EXECCOMMAND></p>

    <p>The following parts of <cite>Fullscreen API</cite> are referenced from this
    specification, in part to define the rendering of <code>dialog</code> elements, and also to
    define how the Fullscreen API interacts with HTML: <ref spec=FULLSCREEN></p>

    <ul class="brief">
     <li><dfn data-x-href="https://fullscreen.spec.whatwg.org/#top-layer">top layer</dfn> (an
         <span data-x="set">ordered set</span>) and its
         <dfn data-x="top-layer-add" data-x-href="https://fullscreen.spec.whatwg.org/#top-layer-add">add</dfn>
         operation</li>
     <li><dfn data-x-href="https://fullscreen.spec.whatwg.org/#dom-element-requestfullscreen"><code data-x="dom-element-requestFullscreen">requestFullscreen()</code></dfn></li>
     <li><dfn data-x-href="https://fullscreen.spec.whatwg.org/#run-the-fullscreen-steps">run the fullscreen steps</dfn></li>
     <li><dfn data-x-href="https://fullscreen.spec.whatwg.org/#fullscreen-flag">fullscreen flag</dfn></li>
    </ul>

    <p><cite>High Resolution Time</cite> provides the <dfn
    data-x-href="https://w3c.github.io/hr-time/#dfn-current-high-resolution-time">current high
    resolution time</dfn>, the <dfn
    data-x-href="https://w3c.github.io/hr-time/#dfn-unsafe-shared-current-time">unsafe shared
    current time</dfn>, the <dfn
    data-x-href="https://w3c.github.io/hr-time/#dfn-shared-monotonic-clock">shared monotonic clock</dfn>,
    the <dfn data-x-href="https://w3c.github.io/hr-time/#dfn-coarsen-time">coarsen time</dfn>
    algorithm, and the <dfn
    data-x-href="https://w3c.github.io/hr-time/#dom-domhighrestimestamp"><code>DOMHighResTimeStamp</code></dfn>
    typedef. <ref spec=HRT></p>
   </dd>



   <dt>File API</dt>

   <dd>
    <p>This specification uses the following features defined in <cite>File API</cite>: <ref
    spec=FILEAPI></p>

    <ul class="brief">
     <li>The <dfn data-x-href="https://w3c.github.io/FileAPI/#dfn-Blob"><code>Blob</code></dfn> interface and its
             <dfn data-x="dom-Blob-type" data-x-href="https://w3c.github.io/FileAPI/#dfn-type"><code>type</code></dfn> attribute</li>
     <li>The <dfn data-x-href="https://w3c.github.io/FileAPI/#dfn-file"><code>File</code></dfn> interface and its
             <dfn data-x="dom-File-name" data-x-href="https://w3c.github.io/FileAPI/#dfn-name"><code>name</code></dfn> and
             <dfn data-x="dom-File-lastModified" data-x-href="https://w3c.github.io/FileAPI/#dfn-lastModified"><code>lastModified</code></dfn> attributes</li>
     <li>The <dfn data-x-href="https://w3c.github.io/FileAPI/#filelist-section"><code>FileList</code></dfn> interface</li>
     <li>The concept of a <code>Blob</code>'s <dfn data-x-href="https://w3c.github.io/FileAPI/#snapshot-state">snapshot state</dfn></li>
     <li>The concept of <dfn data-x="file-error-read">read errors</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/FileAPI/#BlobURLStore">Blob URL Store</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/FileAPI/#blob-url-entry">blob URL entry</dfn> and its
         <dfn data-x="blob-url-entry-object" data-x-href="https://w3c.github.io/FileAPI/#blob-url-entry-object">object</dfn> and
         <dfn data-x="blob-url-entry-environment" data-x-href="https://w3c.github.io/FileAPI/#blob-url-entry-environment">environment</dfn></li>
    </ul>
   </dd>



   <dt>Indexed Database API</dt>

   <dd><p>This specification uses <dfn
   data-x-href="https://w3c.github.io/IndexedDB/#cleanup-indexed-database-transactions">cleanup
   Indexed Database transactions</dfn> defined by <cite>Indexed Database API</cite>. <ref
   spec=INDEXEDDB></p>



   <dt>Media Source Extensions</dt>

   <dd>
    <p>The following terms are defined in <cite>Media Source Extensions</cite>: <ref
    spec=MEDIASOURCE></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/media-source/#idl-def-mediasource"><code>MediaSource</code></dfn> interface</li>
     <li><dfn data-x-href="https://w3c.github.io/media-source/#mediasource-detach">detaching from a media element</dfn></li>
    </ul>
   </dd>

   <dt>Media Capture and Streams</dt>

   <dd>
    <p>The following terms are defined in <cite>Media Capture and Streams</cite>: <ref
    spec=MEDIASTREAM></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/mediacapture-main/getusermedia.html#idl-def-mediastream"><code>MediaStream</code></dfn> interface</li>
    </ul>
   </dd>


   <dt>Reporting</dt>

   <dd>
    <p>The following terms are defined in <cite>Reporting</cite>: <ref
    spec=REPORTING></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/reporting/#queue-report">Queue a report</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/reporting/#report-type">report type</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/reporting/#visible-to-reportingobservers">visible to <code>ReportingObserver</code>s</dfn></li>
    </ul>
   </dd>


   <dt>XMLHttpRequest</dt>

   <dd>
    <p>The following features and terms are defined in <cite>XMLHttpRequest</cite>: <ref
    spec=XHR></p>

    <ul class="brief">
     <li>The <dfn data-x-href="https://xhr.spec.whatwg.org/#xmlhttprequest"><code>XMLHttpRequest</code></dfn> interface, and its
             <dfn data-x="dom-XMLHttpRequest-responseXML" data-x-href="https://xhr.spec.whatwg.org/#dom-xmlhttprequest-responsexml"><code>responseXML</code></dfn> attribute</li>
     <li>The <dfn data-x-href="https://xhr.spec.whatwg.org/#interface-progressevent"><code>ProgressEvent</code></dfn> interface, and its
             <dfn data-x="dom-ProgressEvent-lengthComputable" data-x-href="https://xhr.spec.whatwg.org/#dom-progressevent-lengthcomputable"><code>lengthComputable</code></dfn>,
             <dfn data-x="dom-ProgressEvent-loaded" data-x-href="https://xhr.spec.whatwg.org/#dom-progressevent-loaded"><code>loaded</code></dfn>, and
             <dfn data-x="dom-ProgressEvent-total" data-x-href="https://xhr.spec.whatwg.org/#dom-progressevent-total"><code>total</code></dfn> attributes</li>
     <li>The <dfn data-x-href="https://xhr.spec.whatwg.org/#formdata"><code>FormData</code></dfn> interface, and its associated
             <dfn data-x="FormData entry list" data-x-href="https://xhr.spec.whatwg.org/#concept-formdata-entry-list">entry list</dfn></li>
    </ul>
   </dd>

   <dt>Battery Status</dt>

   <dd>
    <p>The following features are defined in <cite>Battery Status API</cite>: <ref spec=BATTERY></p>

    <ul class="brief">
     <li><dfn data-x="dom-navigator-getBattery" data-x-href="https://w3c.github.io/battery/#widl-Navigator-getBattery-Promise-BatteryManager"><code>getBattery()</code></dfn> method</li>
    </ul>
   </dd>


   <dt>Media Queries</dt>

   <dd>
    <p>Implementations must support <cite>Media Queries</cite>. The <dfn
    data-x-href="https://drafts.csswg.org/mediaqueries/#typedef-media-condition">&lt;media-condition></dfn>
    feature is defined therein. <ref spec=MQ></p>
   </dd>


   <dt>CSS modules</dt>

   <dd>
    <p>While support for CSS as a whole is not required of implementations of this specification
    (though it is encouraged, at least for web browsers), some features are defined in terms of
    specific CSS requirements.</p>

    <p>When this specification requires that something be <dfn data-x="parse something according to
    a CSS grammar" data-x-href="https://drafts.csswg.org/css-syntax/#parse-grammar">parsed according
    to a particular CSS grammar</dfn>, the relevant algorithm in <cite>CSS Syntax</cite> must be followed,
    including error handling rules. <ref spec=CSSSYNTAX></p>

    <p class="example">For example, user agents are required to close all open constructs upon
    finding the end of a style sheet unexpectedly. Thus, when parsing the string "<code
    data-x="">rgb(0,0,0</code>" (with a missing close-parenthesis) for a color value, the close
    parenthesis is implied by this error handling rule, and a value is obtained (the color 'black').
    However, the similar construct "<code data-x="">rgb(0,0,</code>" (with both a missing
    parenthesis and a missing "blue" value) cannot be parsed, as closing the open construct does not
    result in a viable value.</p>

    <p>To <dfn id="parsed-as-a-css-color-value">parse a CSS &lt;color> value</dfn>, given a string
    <var>input</var> with an optional element <var>element</var>, run these steps:</p>

    <ol>
     <li><p>Let <var>color</var> be the result of <span data-x="parse something according to a CSS
     grammar">parsing</span> <var>input</var> as a CSS <span>&lt;color></span>. <ref
     spec=CSSCOLOR></p></li>

     <li><p>If <var>color</var> is failure, then return failure.</p></li>

     <li>
      <p>If <var>color</var> is <span>'currentcolor'</span>, then:</p>

      <ol>
       <li><p>If <var>element</var> is not given, then set <var>color</var> to <span>opaque
       black</span>.</p></li>

       <li><p>Otherwise, set <var>color</var> to the computed value of the <span>'color'</span>
       property of <var>element</var>.</p></li>
      </ol>
     </li>

     <li><p>Return <var>color</var>.</p></li>
    </ol>

    <p>The following terms and features are defined in <cite>Cascading Style Sheets</cite>
    (<cite>CSS</cite>): <ref spec=CSS></p>

    <ul class="brief">
      <li><dfn data-x-href="https://drafts.csswg.org/css2/#viewport">viewport</dfn></li>
      <li><dfn data-x-href="https://drafts.csswg.org/css2/#line-box">line box</dfn></li>
      <li><dfn data-x-href="https://drafts.csswg.org/css2/#out-of-flow">out-of-flow</dfn></li>
      <li><dfn data-x-href="https://drafts.csswg.org/css2/#in-flow">in-flow</dfn></li>
      <li><dfn data-x-href="https://drafts.csswg.org/css2/#collapsing-margins">collapsing margins</dfn></li>
      <li><dfn data-x-href="https://drafts.csswg.org/css2/#containing-block-details">containing block</dfn></li>
      <li><dfn data-x-href="https://drafts.csswg.org/css2/#inline-box">inline box</dfn></li>
      <li><dfn data-x-href="https://drafts.csswg.org/css2/#block-boxes%E2%91%A0">block box</dfn></li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css2/#propdef-top">'top'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css2/#propdef-bottom">'bottom'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css2/#propdef-left">'left'</dfn>, and
              <dfn data-x-href="https://drafts.csswg.org/css2/#propdef-right">'right'</dfn> properties</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css2/#float-position">'float'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css2/#flow-control">'clear'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css2/#the-width-property">'width'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css2/#the-height-property">'height'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css2/#min-max-widths">'max-width'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css2/#min-max-heights">'max-height'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css2/#propdef-line-height">'line-height'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css2/#propdef-vertical-align">'vertical-align'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css2/#content%E2%91%A0">'content'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css2/#value-def-inline-block">'inline-block'</dfn> value of the <span>'display'</span> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css2/#propdef-visibility">'visibility'</dfn> property</li>
    </ul>

    <p>The basic version of the <dfn
    data-x-href="https://drafts.csswg.org/css2/#display-prop">'display'</dfn> property
    is defined in <cite>CSS</cite>, and the property is extended by other CSS
    modules. <ref spec=CSS> <ref spec=CSSRUBY> <ref spec=CSSTABLE></p>

    <p>The following terms and features are defined in <cite>CSS Box Model</cite>: <ref spec=CSSBOX></p>

    <ul>
      <li><dfn data-x-href="https://drafts.csswg.org/css-box/#content-area">content area</dfn></li>
      <li><dfn data-x-href="https://drafts.csswg.org/css-box/#content-box">content box</dfn></li>
      <li><dfn data-x-href="https://drafts.csswg.org/css-box/#border-box">border box</dfn></li>
      <li><dfn data-x-href="https://drafts.csswg.org/css-box/#margin-box">margin box</dfn></li>
      <li><dfn data-x-href="https://drafts.csswg.org/css-box/#border-edge">border edge</dfn></li>
      <li><dfn data-x-href="https://drafts.csswg.org/css-box/#margin-edge">margin edge</dfn></li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-box/#propdef-margin-top">'margin-top'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-box/#propdef-margin-bottom">'margin-bottom'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-box/#propdef-margin-left">'margin-left'</dfn>, and
              <dfn data-x-href="https://drafts.csswg.org/css-box/#propdef-margin-right">'margin-right'</dfn> properties</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-box/#propdef-padding-top">'padding-top'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-box/#propdef-padding-bottom">'padding-bottom'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-box/#propdef-padding-left">'padding-left'</dfn>, and
              <dfn data-x-href="https://drafts.csswg.org/css-box/#propdef-padding-right">'padding-right'</dfn> properties</li>
    </ul>

    <p>The following features are defined in <cite>CSS Logical Properties</cite>: <ref
    spec=CSSLOGICAL></p>

    <ul class="brief">
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-margin-block-start">'margin-block-start'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-margin-block-end">'margin-block-end'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-margin-inline-start">'margin-inline-start'</dfn>, and
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-margin-inline-end">'margin-inline-end'</dfn> properties</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-padding-block-start">'padding-block-start'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-padding-block-end">'padding-block-end'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-padding-inline-start">'padding-inline-start'</dfn>, and
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-padding-inline-end">'padding-inline-end'</dfn> properties</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-border-block-start-width">'border-block-start-width'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-border-block-end-width">'border-block-end-width'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-border-inline-start-width">'border-inline-start-width'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-border-inline-end-width">'border-inline-end-width'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-border-block-start-style">'border-block-start-style'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-border-block-end-style">'border-block-end-style'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-border-inline-start-style">'border-inline-start-style'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-border-inline-end-style">'border-inline-end-style'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-border-block-start-color">'border-block-start-color'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-border-block-end-color">'border-block-end-color'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-border-inline-start-color">'border-inline-start-color'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-border-inline-end-color">'border-inline-end-color'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-border-start-start-radius">'border-start-start-radius'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-border-start-end-radius">'border-start-end-radius'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-border-end-start-radius">'border-end-start-radius'</dfn>, and
              <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-border-end-end-radius">'border-end-end-radius'</dfn>
              properties</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-block-size">'block-size'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-inline-size">'inline-size'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-inset-block-start">'inset-block-start'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-logical/#propdef-inset-block-end">'inset-block-end'</dfn> property</li>
    </ul>

    <p>The following terms and features are defined in <cite>CSS Color</cite>: <ref
    spec=CSSCOLOR></p>

    <ul class="brief">
     <li><dfn data-x-href="https://drafts.csswg.org/css-color/#named-color">named color</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-color/#typedef-color">&lt;color></dfn></li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-color/#the-color-property">'color'</dfn> property</li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-color/#valdef-color-currentcolor" id="currentcolor">'currentcolor'</dfn> value</li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-color/#opaque-black">opaque black</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-color/#transparent-black">transparent black</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-color/#valdef-color-srgb">'srgb'</dfn> color space</li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-color/#valdef-color-display-p3">'display-p3'</dfn> color space</li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-color/#valdef-color-profile-rendering-intent-relative-colorimetric">'relative-colorimetric'</dfn> rendering intent</li>
    </ul>

    <p>The following terms are defined in <cite>CSS Images</cite>: <ref spec=CSSIMAGES></p>

    <ul class="brief">
     <li><dfn data-x-href="https://drafts.csswg.org/css-images/#default-object-size">default object size</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-images/#intrinsic-dimensions">intrinsic dimensions</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-images/#intrinsic-height">intrinsic height</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-images/#intrinsic-width">intrinsic width</dfn></li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-images-3/#the-image-orientation">'image-orientation'</dfn> property</li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-images-4/#funcdef-conic-gradient">'conic-gradient'</dfn></li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-images/#the-object-fit">'object-fit'</dfn> property</li>
    </ul>

    <p>The term <dfn data-x-href="https://drafts.csswg.org/css-images-4/#paint-source">paint
    source</dfn> is used as defined in <cite>CSS Images Level 4</cite>
    to define the interaction of certain HTML elements with the CSS 'element()'
    function. <ref spec=CSSIMAGES4></p>

    <p>The following features are defined in <cite>CSS Backgrounds and Borders</cite>: <ref
    spec=CSSBG></p>

    <ul class="brief">
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-background-color">'background-color'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-background-image">'background-image'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-background-repeat">'background-repeat'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-background-attachment">'background-attachment'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-background-position">'background-position'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-background-clip">'background-clip'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-background-origin">'background-origin'</dfn>, and
              <dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-background-size">'background-size'</dfn>
              properties</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-radius">'border-radius'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-top-left-radius">'border-top-left-radius'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-top-right-radius">'border-top-right-radius'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-bottom-right-radius">'border-bottom-right-radius'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-bottom-left-radius">'border-bottom-left-radius'</dfn>
              properties</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-image-source">'border-image-source'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-image-slice">'border-image-slice'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-image-width">'border-image-width'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-image-outset">'border-image-outset'</dfn>, and
              <dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-image-repeat">'border-image-repeat'</dfn>
              properties</li>
    </ul>

    <p><cite>CSS Backgrounds and Borders</cite> also defines the following border properties: <ref spec=CSSBG></p>

    <table>
     <caption>Border properties
     <tbody>
      <tr>
       <td>
       <th>Top
       <th>Bottom
       <th>Left
       <th>Right
      <tr>
       <th>Width
       <td><dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-top-width">'border-top-width'</dfn>
       <td><dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-bottom-width">'border-bottom-width'</dfn>
       <td><dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-left-width">'border-left-width'</dfn>
       <td><dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-right-width">'border-right-width'</dfn>
      <tr>
       <th>Style
       <td><dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-top-style">'border-top-style'</dfn>
       <td><dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-bottom-style">'border-bottom-style'</dfn>
       <td><dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-left-style">'border-left-style'</dfn>
       <td><dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-right-style">'border-right-style'</dfn>
      <tr>
       <th>Color
       <td><dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-top-color">'border-top-color'</dfn>
       <td><dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-bottom-color">'border-bottom-color'</dfn>
       <td><dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-left-color">'border-left-color'</dfn>
       <td><dfn data-x-href="https://drafts.csswg.org/css-backgrounds/#propdef-border-right-color">'border-right-color'</dfn>
    </table>

    <p>The following features are defined in <cite>CSS Box Alignment</cite>: <ref spec=CSSALIGN></p>

    <ul class="brief">
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-align/#propdef-align-content">'align-content'</dfn> property</li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-align/#propdef-align-items">'align-items'</dfn> property</li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-align/#propdef-align-self">'align-self'</dfn> property</li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-align/#propdef-justify-self">'justify-self'</dfn> property</li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-align/#propdef-propdef-justify-content">'justify-content'</dfn> property</li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-align/#propdef-propdef-justify-items">'justify-items'</dfn> property</li>
    </ul>

    <p>The following terms and features are defined in <cite>CSS Display</cite>: <ref
    spec=CSSDISPLAY></p>

    <ul class="brief">
     <li><dfn data-x-href="https://drafts.csswg.org/css-display/#outer-display-type">outer display type</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-display/#inner-display-type">inner display type</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-display/#block-level">block-level</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-display/#block-container">block container</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-display/#formatting-context">formatting context</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-display/#block-formatting-context">block formatting context</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-display/#inline-formatting-context">inline formatting context</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-display/#replaced-element">replaced element</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-display/#css-box">CSS box</dfn></li>
    </ul>

    <p>The following features are defined in <cite>CSS Flexible Box Layout</cite>: <ref
    spec=CSSFLEXBOX></p>

    <ul class="brief">
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-flexbox/#propdef-flex-direction">'flex-direction'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-flexbox/#propdef-flex-wrap">'flex-wrap'</dfn> property</li>
    </ul>

    <p>The following terms and features are defined in <cite>CSS Fonts</cite>: <ref spec=CSSFONTS></p>

    <ul class="brief">
      <li><dfn data-x-href="https://drafts.csswg.org/css-fonts/#first-available-font">first available font</dfn></li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#font-family-prop">'font-family'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#font-weight-prop">'font-weight'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#font-size-prop">'font-size'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#font-prop">'font'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#propdef-font-kerning">'font-kerning'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#propdef-font-stretch">'font-stretch'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#propdef-font-variant-caps">'font-variant-caps'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#valdef-font-variant-caps-small-caps">'small-caps'</dfn> value</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#valdef-font-variant-caps-all-small-caps">'all-small-caps'</dfn> value</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#valdef-font-variant-caps-petite-caps">'petite-caps'</dfn> value</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#valdef-font-variant-caps-all-petite-caps">'all-petite-caps'</dfn> value</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#valdef-font-variant-caps-unicase">'unicase'</dfn> value</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#valdef-font-variant-caps-titling-caps">'titling-caps'</dfn> value</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#valdef-font-stretch-ultra-condensed">'ultra-condensed'</dfn> value</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#valdef-font-stretch-extra-condensed">'extra-condensed'</dfn> value</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#valdef-font-stretch-condensed">'condensed'</dfn> value</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#valdef-font-stretch-semi-condensed">'semi-condensed'</dfn> value</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#valdef-font-stretch-semi-expanded">'semi-expanded'</dfn> value</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#valdef-font-stretch-expanded">'expanded'</dfn> value</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#valdef-font-stretch-extra-expanded">'extra-expanded'</dfn> value</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-fonts/#valdef-font-stretch-ultra-expanded">'ultra-expanded'</dfn> value</li>
    </ul>

    <p>The following features are defined in <cite>CSS Grid Layout</cite>: <ref spec=CSSGRID></p>

    <ul class="brief">
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-grid/#propdef-grid-auto-columns">'grid-auto-columns'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-grid/#propdef-grid-auto-flow">'grid-auto-flow'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-grid/#propdef-grid-auto-rows">'grid-auto-rows'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-grid/#propdef-grid-column-gap">'grid-column-gap'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-grid/#propdef-grid-row-gap">'grid-row-gap'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-grid/#propdef-grid-template-areas">'grid-template-areas'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-grid/#propdef-grid-template-columns">'grid-template-columns'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-grid/#propdef-grid-template-rows">'grid-template-rows'</dfn> property</li>
    </ul>

    <p>The following terms are defined in <cite>CSS Inline Layout</cite>: <ref spec=CSSINLINE></p>

    <ul class="brief">
     <li><dfn data-x-href="https://drafts.csswg.org/css-inline/#alphabetic-baseline">alphabetic baseline</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-inline/#ascent-metric">ascent metric</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-inline/#descent-metric">descent metric</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-inline/#hanging-baseline">hanging baseline</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-inline/#ideographic-under-baseline">ideographic-under baseline</dfn></li>
    </ul>

    <p>The following terms and features are defined in <cite>CSS Intrinsic &amp; Extrinsic
    Sizing</cite>: <ref spec=CSSSIZING></p>

    <ul class="brief">
      <li><dfn data-x-href="https://drafts.csswg.org/css-sizing/#fit-content-inline-size">fit-content inline size</dfn></li>
      <li><dfn data-x-href="https://drafts.csswg.org/css-sizing-4/#aspect-ratio">'aspect-ratio'</dfn> property</li>
    </ul>

    <p>The following features are defined in <cite>CSS Lists and Counters</cite>. <ref spec=CSSLISTS></p>

    <ul class="brief">
     <li><dfn data-x-href="https://drafts.csswg.org/css-lists/#list-item" data-x="css-list-item">list item</dfn></li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-lists/#propdef-counter-reset">'counter-reset'</dfn> property</li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-lists/#propdef-counter-set">'counter-set'</dfn> property</li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-lists/#propdef-list-style-type">'list-style-type'</dfn> property</li>
    </ul>

    <p>The following features are defined in <cite>CSS Overflow</cite>. <ref spec=CSSOVERFLOW></p>

    <ul class="brief">
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-overflow/#propdef-overflow">'overflow'</dfn> property and its <dfn data-x-href="https://drafts.csswg.org/css-overflow/#valdef-overflow-hidden">'hidden'</dfn> value</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-overflow/#propdef-text-overflow">'text-overflow'</dfn> property</li>
      <li>The term <dfn data-x-href="https://drafts.csswg.org/css-overflow/#scroll-container">scroll container</dfn>
    </ul>

    <p>The following terms and features are defined in <cite>CSS Positioned Layout</cite>: <ref
    spec=CSSPOSITION></p>

    <ul class="brief">
      <li><dfn data-x-href="https://drafts.csswg.org/css-position/#absolute-position">absolutely-positioned</dfn></li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-position/#position-property">'position'</dfn> property and its
              <dfn data-x-href="https://drafts.csswg.org/css-position/#valdef-position-static">'static'</dfn> value</li>
    </ul>

    <p>The following features are defined in <cite>CSS Multi-column Layout</cite>. <ref
    spec=CSSMULTICOL></p>

    <ul class="brief">
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-multicol/#propdef-column-count">'column-count'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-multicol/#propdef-column-fill">'column-fill'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-multicol/#propdef-column-gap">'column-gap'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-multicol/#propdef-column-rule">'column-rule'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-multicol/#propdef-column-width">'column-width'</dfn> property</li>
    </ul>

    <p>The <dfn
    data-x-href="https://drafts.csswg.org/css-ruby/#valdef-display-ruby-base">'ruby-base'</dfn>
    value of the <span>'display'</span> property is defined in <cite>CSS Ruby Layout</cite>. <ref
    spec=CSSRUBY></p>

    <p>The following features are defined in <cite>CSS Table</cite>: <ref spec=CSSTABLE></p>

    <ul class="brief">
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-tables/#propdef-border-spacing">'border-spacing'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-tables/#border-collapse-property">'border-collapse'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-tables/#table-cell">'table-cell'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-tables/#table-row">'table-row'</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-tables/#table-caption">'table-caption'</dfn>, and
              <dfn data-x-href="https://drafts.csswg.org/css-tables/#table">'table'</dfn> values of the <span>'display'</span> property</li>
    </ul>

    <p>The following features are defined in <cite>CSS Text</cite>: <ref spec=CSSTEXT></p>

    <ul class="brief">
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-text/#text-transform-property">'text-transform'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-text/#white-space-property">'white-space'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-text/#text-align-property">'text-align'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-text/#letter-spacing-property">'letter-spacing'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-text/#propdef-word-spacing">'word-spacing'</dfn> property</li>
    </ul>

    <p>The following features are defined in <cite>CSS Writing Modes</cite>: <ref spec=CSSWM></p>

    <ul class="brief">
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-writing-modes/#direction">'direction'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-writing-modes/#unicode-bidi">'unicode-bidi'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-writing-modes/#block-flow-direction">block flow direction</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-writing-modes/#block-axis">block axis</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-writing-modes/#inline-axis">inline axis</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-writing-modes/#block-size">block size</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-writing-modes/#inline-size">inline size</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-writing-modes/#block-start">block-start</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-writing-modes/#block-end">block-end</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-writing-modes/#inline-start">inline-start</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-writing-modes/#inline-end">inline-end</dfn>,
              <dfn data-x-href="https://drafts.csswg.org/css-writing-modes/#line-left">line-left</dfn>, and
              <dfn data-x-href="https://drafts.csswg.org/css-writing-modes/#line-right">line-right</dfn> concepts</li>
    </ul>

    <p>The following features are defined in <cite>CSS Basic User Interface</cite>: <ref
    spec=CSSUI></p>

    <ul class="brief">
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-ui/#outline">'outline'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-ui/#cursor">'cursor'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-ui/#appearance-switching">'appearance'</dfn> property, its
              <dfn data-x-href="https://drafts.csswg.org/css-ui/#typedef-appearance-compat-auto">&lt;compat-auto></dfn> non-terminal value type, its
              <dfn data-x-href="https://drafts.csswg.org/css-ui/#valdef-appearance-textfield">'textfield'</dfn> value, and its
              <dfn data-x-href="https://drafts.csswg.org/css-ui/#valdef-appearance-menulist-button">'menulist-button'</dfn> value.</li>
      <li>The concept <dfn data-x-href="https://drafts.csswg.org/css-ui/#widget">widget</dfn></li>
      <li>The concept <dfn data-x-href="https://drafts.csswg.org/css-ui/#native-appearance">native appearance</dfn></li>
      <li>The concept <dfn data-x-href="https://drafts.csswg.org/css-ui/#primitive-appearance">primitive appearance</dfn></li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-ui/#non-devolvable">non-devolvable widget</dfn> and
              <dfn data-x-href="https://drafts.csswg.org/css-ui/#devolvable">devolvable widget</dfn> classification, and the related
              <dfn data-x-href="https://drafts.csswg.org/css-ui/#devolved">devolved widget</dfn> state.</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-ui-4/#pointer-events-control">'pointer-events'</dfn> property</li>
      <li>The <dfn data-x-href="https://drafts.csswg.org/css-ui-4/#content-selection">'user-select'</dfn> property</li>
    </ul>

    <p>The algorithm to <dfn
    data-x-href="https://drafts.csswg.org/web-animations-1/#update-animations-and-send-events">update
    animations and send events</dfn> is defined in <cite>Web Animations</cite>. <ref
    spec=WEBANIMATIONS>.</p>

    <p>Implementations that support scripting must support the CSS Object Model. The following
    features and terms are defined in the CSSOM specifications: <ref spec=CSSOM> <ref spec=CSSOMVIEW>

    <ul class="brief">
     <li><dfn data-x-href="https://drafts.csswg.org/cssom-view/#the-screen-interface"><code>Screen</code></dfn> interface</li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom/#the-linkstyle-interface"><code>LinkStyle</code></dfn> interface</li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom/#the-cssstyledeclaration-interface"><code>CSSStyleDeclaration</code></dfn> interface</li>
     <li><dfn data-x="dom-style" data-x-href="https://drafts.csswg.org/cssom/#dom-elementcssinlinestyle-style"><code>style</code></dfn> IDL attribute</li>
     <li><dfn data-x="dom-CSSStyleDeclaration-cssText" data-x-href="https://drafts.csswg.org/cssom/#dom-cssstyledeclaration-csstext"><code>cssText</code></dfn> attribute of <code>CSSStyleDeclaration</code></li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom/#the-stylesheet-interface"><code>StyleSheet</code></dfn> interface</li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom/#the-cssstylesheet-interface"><code>CSSStyleSheet</code></dfn> interface</li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom/#create-a-css-style-sheet">create a CSS style sheet</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom/#remove-a-css-style-sheet">remove a CSS style sheet</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom/#associated-css-style-sheet">associated CSS style sheet</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom/#create-a-constructed-cssstylesheet">create a constructed <code>CSSStyleSheet</code></dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom/#synchronously-replace-the-rules-of-a-cssstylesheet">synchronously replace the rules of a <code>CSSStyleSheet</code></dfn></li>
     <li>
      <dfn data-x="CSS style sheet"
      data-x-href="https://drafts.csswg.org/cssom/#css-style-sheet">CSS style sheets</dfn> and their
      properties:
      <ul class="brief">
       <li><dfn data-x="concept-css-style-sheet-type" data-x-href="https://drafts.csswg.org/cssom/#concept-css-style-sheet-type">type</dfn></li>
       <li><dfn data-x="concept-css-style-sheet-location" data-x-href="https://drafts.csswg.org/cssom/#concept-css-style-sheet-location">location</dfn></li>
       <li><dfn data-x="concept-css-style-sheet-parent-CSS-style-sheet" data-x-href="https://drafts.csswg.org/cssom/#concept-css-style-sheet-parent-css-style-sheet">parent CSS style sheet</dfn></li>
       <li><dfn data-x="concept-css-style-sheet-owner-node" data-x-href="https://drafts.csswg.org/cssom/#concept-css-style-sheet-owner-node">owner node</dfn></li>
       <li><dfn data-x="concept-css-style-sheet-owner-CSS-rule" data-x-href="https://drafts.csswg.org/cssom/#concept-css-style-sheet-owner-css-rule">owner CSS rule</dfn></li>
       <li><dfn data-x="concept-css-style-sheet-media" data-x-href="https://drafts.csswg.org/cssom/#concept-css-style-sheet-media">media</dfn></li>
       <li><dfn data-x="concept-css-style-sheet-title" data-x-href="https://drafts.csswg.org/cssom/#concept-css-style-sheet-title">title</dfn></li>
       <li><dfn data-x="concept-css-style-sheet-alternate-flag" data-x-href="https://drafts.csswg.org/cssom/#concept-css-style-sheet-alternate-flag">alternate flag</dfn></li>
       <li><dfn data-x="concept-css-style-sheet-disabled-flag" data-x-href="https://drafts.csswg.org/cssom/#concept-css-style-sheet-disabled-flag">disabled flag</dfn></li>
       <li><dfn data-x="concept-css-style-sheet-CSS-rules" data-x-href="https://drafts.csswg.org/cssom/#concept-css-style-sheet-css-rules">CSS rules</dfn></li>
       <li><dfn data-x="concept-css-style-sheet-origin-clean-flag" data-x-href="https://drafts.csswg.org/cssom/#concept-css-style-sheet-origin-clean-flag">origin-clean flag</dfn></li>
      </ul>
     </li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom/#css-style-sheet-set">CSS style sheet set</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom/#css-style-sheet-set-name">CSS style sheet set name</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom/#preferred-css-style-sheet-set-name">preferred CSS style sheet set name</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom/#change-the-preferred-css-style-sheet-set-name">change the preferred CSS style sheet set name</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom/#serialize-a-css-value">Serializing a CSS value</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom-view/#document-run-the-resize-steps">run the resize steps</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom-view/#document-run-the-scroll-steps">run the scroll steps</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom-view/#evaluate-media-queries-and-report-changes">evaluate media queries and report changes</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom-view/#scroll-an-element-into-view">Scroll an element into view</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom-view/#scroll-to-the-beginning-of-the-document">Scroll to the beginning of the document</dfn></li>
     <li>The <dfn data-x="event-resize" data-x-href="https://drafts.csswg.org/cssom-view/#eventdef-window-resize"><code>resize</code></dfn> event</li>
     <li>The <dfn data-x="event-scroll" data-x-href="https://drafts.csswg.org/cssom-view/#eventdef-document-scroll"><code>scroll</code></dfn> event</li>
     <li>The <dfn data-x="event-scrollend" data-x-href="https://drafts.csswg.org/cssom-view/#eventdef-document-scrollend"><code>scrollend</code></dfn> event</li>
     <li><dfn data-x-href="https://drafts.csswg.org/cssom-view/#set-up-browsing-context-features">set up browsing context features</dfn></li>
    </ul>

    <p>The following features and terms are defined in <cite>CSS Syntax</cite>: <ref
    spec=CSSSYNTAX></p>

    <ul class="brief">
     <li><dfn data-x-href="https://drafts.csswg.org/css-syntax/#conform-classes">conformant style sheet</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-syntax/#parse-a-list-of-component-values">parse a list of component values</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-syntax/#parse-a-comma-separated-list-of-component-values">parse a comma-separated list of component values</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-syntax/#component-value">component value</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-syntax/#environment-encoding">environment encoding</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-syntax/#typedef-whitespace-token">&lt;whitespace-token></dfn></li>
    </ul>

    <p>The following terms are defined in <cite>Selectors</cite>: <ref spec=SELECTORS></p>

    <ul class="brief">
     <li><dfn data-x-href="https://drafts.csswg.org/selectors/#type-selector">type selector</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/selectors/#attribute-selector">attribute selector</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/selectors/#pseudo-class">pseudo-class</dfn></li>
     <li><dfn
     data-x-href="https://drafts.csswg.org/selectors/#the-focus-visible-pseudo"><code>:focus-visible</code></dfn>
     pseudo-class</li>
     <li><dfn data-x-href="https://drafts.csswg.org/selectors/#indicate-focus">indicate focus</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/selectors/#pseudo-element">pseudo-element</dfn></li>
    </ul>

    <p>The following features are defined in <cite>CSS Values and Units</cite>: <ref
    spec=CSSVALUES></p>

    <ul class="brief">
     <li><dfn data-x-href="https://drafts.csswg.org/css-values/#lengths">&lt;length></dfn></li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-values/#em">'em'</dfn> unit</li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-values/#ex">'ex'</dfn> unit</li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-values/#vw">'vw'</dfn> unit</li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-values/#in">'in'</dfn> unit</li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-values/#px">'px'</dfn> unit</li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-values/#pt">'pt'</dfn> unit</li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-values/#funcdef-attr">'attr()'</dfn> function</li>
     <li>The <dfn data-x-href="https://drafts.csswg.org/css-values/#math-function">math functions</dfn></li>
    </ul>

    <p>The term <dfn data-x="css-styling-attribute"
    data-x-href="https://drafts.csswg.org/css-style-attr/#style-attribute">style attribute</dfn> is
    defined in <cite>CSS Style Attributes</cite>. <ref spec=CSSATTR></p>

    <p>The following terms are defined in the <cite>CSS Cascading and Inheritance</cite>: <ref
    spec=CSSCASCADE></p>

    <ul class="brief">
     <li><dfn data-x-href="https://drafts.csswg.org/css-cascade/#cascaded-value">cascaded value</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-cascade/#specified-value">specified value</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-cascade/#computed-value">computed value</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-cascade/#used-value">used value</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-cascade/#origin">cascade origin</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-cascade/#cascade-origin-author">Author Origin</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-cascade/#cascade-origin-user">User Origin</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-cascade/#cascade-origin-ua">User Agent Origin</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-cascade/#cascade-origin-animation">Animation Origin</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-cascade/#cascade-origin-transition">Transition Origin</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-cascade/#initial-value">initial value</dfn></li>
    </ul>

    <p>The <code>CanvasRenderingContext2D</code> object's use of fonts depends on the features
    described in the CSS <cite>Fonts</cite> and <cite>Font Loading</cite> specifications, including
    in particular <dfn><code>FontFace</code></dfn> objects and the <dfn
    data-x-href="https://drafts.csswg.org/css-font-loading/#font-source">font source</dfn> concept.
    <ref spec=CSSFONTS> <ref spec=CSSFONTLOAD></p>

    <p>The following interfaces and terms are defined in <cite>Geometry Interfaces</cite>: <ref
    spec=GEOMETRY></p>

    <ul class="brief">
     <li><dfn data-x-href="https://drafts.fxtf.org/geometry/#dommatrix"><code>DOMMatrix</code></dfn> interface, and associated
         <dfn data-x-href="https://drafts.fxtf.org/geometry/#matrix-m11-element">m11 element</dfn>,
         <dfn data-x-href="https://drafts.fxtf.org/geometry/#matrix-m12-element">m12 element</dfn>,
         <dfn data-x-href="https://drafts.fxtf.org/geometry/#matrix-m21-element">m21 element</dfn>,
         <dfn data-x-href="https://drafts.fxtf.org/geometry/#matrix-m22-element">m22 element</dfn>,
         <dfn data-x-href="https://drafts.fxtf.org/geometry/#matrix-m41-element">m41 element</dfn>, and
         <dfn data-x-href="https://drafts.fxtf.org/geometry/#matrix-m42-element">m42 element</dfn></li>
     <li><dfn data-x-href="https://drafts.fxtf.org/geometry/#dictdef-dommatrix2dinit"><code>DOMMatrix2DInit</code></dfn> and
         <dfn data-x-href="https://drafts.fxtf.org/geometry/#dictdef-dommatrixinit"><code>DOMMatrixInit</code></dfn> dictionaries</li>
     <li>The <dfn data-x-href="https://drafts.fxtf.org/geometry/#create-a-dommatrix-from-the-dictionary">create a <code>DOMMatrix</code> from a dictionary</dfn>
         and <dfn data-x-href="https://drafts.fxtf.org/geometry/#create-a-dommatrix-from-the-2d-dictionary">create a <code>DOMMatrix</code> from a 2D dictionary</dfn>
         algorithms for <code>DOMMatrix2DInit</code> or <code>DOMMatrixInit</code></li>

     <li>The <dfn data-x-href="https://drafts.fxtf.org/geometry/#dictdef-dompointinit"><code>DOMPointInit</code></dfn> dictionary, and associated
         <dfn data-x="DOMPointInit-x" data-xref="https://drafts.fxtf.org/geometry/#dom-dompointinit-x">x</dfn> and
         <dfn data-x="DOMPointInit-y" data-xref="https://drafts.fxtf.org/geometry/#dom-dompointinit-y">y</dfn> members</li>
    </ul>

    <p>The following terms are defined in the <cite>CSS Scoping</cite>: <ref spec=CSSSCOPING></p>

    <ul class="brief">
     <li><dfn data-x-href="https://drafts.csswg.org/css-scoping/#flat-tree">flat tree</dfn></li>
    </ul>

    <p>The following terms and features are defined in <cite>CSS Color Adjustment</cite>: <ref
    spec=CSSCOLORADJUST></p>

    <ul class="brief">
     <li><dfn data-x-href="https://drafts.csswg.org/css-color-adjust/#color-scheme-prop">'color-scheme'</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-color-adjust/#pages-supported-color-schemes">page's supported color-schemes</dfn></li>
    </ul>

    <p>The following term is defined in <cite>CSS Pseudo-Elements</cite>: <ref spec=CSSPSEUDO></p>

    <ul class="brief">
     <li><dfn data-x-href="https://drafts.csswg.org/css-pseudo/#file-selector-button-pseudo">'::file-selector-button'</dfn></li>
    </ul>

    <p>The following terms are defined in <cite>CSS Containment</cite>: <ref spec=CSSCONTAIN></p>

    <ul class="brief">
     <li><dfn data-x-href="https://drafts.csswg.org/css-contain/#skips-its-contents">skips its contents</dfn></li>
     <li><dfn data-x-href="https://drafts.csswg.org/css-contain/#containment-layout">layout
     containment</dfn></li>
    </ul>
   </dd>


   <dt>Intersection Observer</dt>

   <dd>
    <p>The following term is defined in <cite>Intersection Observer</cite>: <ref
    spec=INTERSECTIONOBSERVER></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/IntersectionObserver/#run-the-update-intersection-observations-steps">run the update intersection observations steps</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/IntersectionObserver/#intersectionobserver"><code>IntersectionObserver</code></dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/IntersectionObserver/#dictdef-intersectionobserverinit"><code>IntersectionObserverInit</code></dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/IntersectionObserver/#dom-intersectionobserver-observe" data-x="dom-IntersectionObserver-observe"><code>observe</code></dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/IntersectionObserver/#dom-intersectionobserver-unobserve" data-x="dom-IntersectionObserver-unobserve"><code>unobserve</code></dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/IntersectionObserver/#dom-intersectionobserverentry-isintersecting" data-x="dom-IntersectionObserverEntry-isIntersecting"><code>isIntersecting</code></dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/IntersectionObserver/#dom-intersectionobserverentry-target" data-x="dom-IntersectionObserverEntry-target"><code>target</code></dfn></li>
    </ul>
   </dd>


   <dt>Resize Observer</dt>

   <dd>
    <p>The following terms are defined in <cite>Resize Observer</cite>: <ref spec=RESIZEOBSERVER></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/csswg-drafts/resize-observer-1/#gather-active-observations-h">gather active resize observations at depth</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/csswg-drafts/resize-observer-1/#has-active-observations-h">has active resize observations</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/csswg-drafts/resize-observer-1/#has-skipped-observations-h">has skipped resize observations</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/csswg-drafts/resize-observer-1/#broadcast-resize-notifications-h">broadcast active resize observations</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/csswg-drafts/resize-observer-1/#deliver-resize-error">deliver resize loop error</dfn></li>
    </ul>
   </dd>


   <dt>WebGL</dt>

   <dd>
    <p>The following interfaces are defined in the WebGL specifications: <ref spec=WEBGL></p>

    <ul class="brief">
     <li><dfn data-x-href="https://www.khronos.org/registry/webgl/specs/latest/1.0/#WebGLRenderingContext"><code>WebGLRenderingContext</code></dfn> interface</li>
     <li><dfn data-x-href="https://www.khronos.org/registry/webgl/specs/latest/2.0/#WebGL2RenderingContext"><code>WebGL2RenderingContext</code></dfn> interface</li>
     <li><dfn data-x-href="https://www.khronos.org/registry/webgl/specs/latest/1.0/#WebGLContextAttributes"><code>WebGLContextAttributes</code></dfn> dictionary</li>
    </ul>
   </dd>



   <dt>WebGPU</dt>

   <dd>
    <p>The following interfaces are defined in <cite>WebGPU</cite>: <ref spec=WEBGPU></p>

    <ul class="brief">
     <li><dfn data-x-href="https://gpuweb.github.io/gpuweb/#canvas-context"><code>GPUCanvasContext</code></dfn> interface</li>
    </ul>
   </dd>



   <dt>WebVTT</dt>

   <dd>
    <p>Implementations may support WebVTT as a text track format for subtitles, captions, metadata,
    etc., for media resources. <ref spec=WEBVTT></p>

    <p>The following terms, used in this specification, are defined in <cite>WebVTT</cite>:</p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/webvtt/#webvtt-file">WebVTT file</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webvtt/#webvtt-file-using-cue-text">WebVTT file using cue text</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webvtt/#webvtt-file-using-only-nested-cues">WebVTT file using only nested cues</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webvtt/#webvtt-parser">WebVTT parser</dfn></li>
     <li>The <dfn data-x-href="https://w3c.github.io/webvtt/#rules-for-updating-the-display-of-webvtt-text-tracks">rules for updating the display of WebVTT text tracks</dfn></li>
     <li>The WebVTT <dfn data-x-href="https://w3c.github.io/webvtt/#webvtt-cue-writing-direction">text track cue writing direction</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webvtt/#vttcue"><code>VTTCue</code></dfn> interface</li>
    </ul>
   </dd>



   <dt>ARIA</dt>

   <dd>
    <p>The <dfn element-attr><code data-x="attr-aria-role">role</code></dfn> attribute is defined in
    <cite>Accessible Rich Internet Applications</cite> (<cite>ARIA</cite>), as are the following
    roles: <ref spec=ARIA></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/aria/#button"><code data-x="attr-aria-role-button">button</code></dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/aria/#presentation"><code data-x="attr-aria-role-presentation">presentation</code></dfn></li>
    </ul>

    <p>In addition, the following <dfn><code data-x="attr-aria-*">aria-*</code></dfn> content
    attributes are defined in <cite>ARIA</cite>: <ref spec=ARIA></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/aria/#aria-checked"><code data-x="attr-aria-checked">aria-checked</code></dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/aria/#aria-describedby"><code data-x="attr-aria-describedby">aria-describedby</code></dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/aria/#aria-disabled"><code data-x="attr-aria-disabled">aria-disabled</code></dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/aria/#aria-label"><code data-x="attr-aria-label">aria-label</code></dfn></li>
    </ul>

    <p>Finally, the following terms are defined <cite>ARIA</cite>: <ref spec=ARIA></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/aria/#dfn-role">role</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/aria/#dfn-accessible-name" data-x="concept-accessible-name">accessible name</dfn></li>
     <li>The <dfn data-x-href="https://w3c.github.io/aria/#ARIAMixin"><code>ARIAMixin</code></dfn> interface, with its associated
             <dfn data-x-href="https://w3c.github.io/aria/#dfn-ariamixin-getter-steps"><code>ARIAMixin</code> getter steps</dfn> and
             <dfn data-x-href="https://w3c.github.io/aria/#dfn-ariamixin-setter-steps"><code>ARIAMixin</code> setter steps</dfn> hooks</li>
    </ul>
   </dd>


   <dt>Content Security Policy</dt>

   <dd>
    <p>The following terms are defined in <cite>Content Security Policy</cite>: <ref spec=CSP></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/webappsec-csp/#content-security-policy-object">Content Security Policy</dfn></li>
     <li><dfn data-x="csp-disposition" data-x-href="https://w3c.github.io/webappsec-csp/#policy-disposition">disposition</dfn></li>
     <li><dfn data-x="csp-directive-set" data-x-href="https://w3c.github.io/webappsec-csp/#policy-directive-set">directive set</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webappsec-csp/#directives">Content Security Policy directive</dfn></li>
     <li><dfn data-x="concept-csp-list" data-x-href="https://w3c.github.io/webappsec-csp/#csp-list">CSP list</dfn></li>
     <li>The <dfn data-x-href="https://w3c.github.io/webappsec-csp/#grammardef-serialized-policy">Content Security Policy syntax</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webappsec-csp/#enforced">enforce the policy</dfn></li>
     <li>The <dfn data-x-href="https://w3c.github.io/webappsec-csp/#parse-serialized-policy">parse a serialized Content Security Policy</dfn> algorithm</li>
     <li>The <dfn data-x-href="https://w3c.github.io/webappsec-csp/#run-document-csp-initialization">Run CSP initialization for a Document</dfn> algorithm</li>
     <li>The <dfn data-x-href="https://w3c.github.io/webappsec-csp/#run-global-object-csp-initialization">Run CSP initialization for a global object</dfn> algorithm</li>
     <li>The <dfn data-x-href="https://w3c.github.io/webappsec-csp/#should-block-inline">Should element's inline behavior be blocked by Content Security Policy?</dfn> algorithm</li>
     <li>The <dfn data-x-href="https://w3c.github.io/webappsec-csp/#should-block-navigation-request">Should navigation request of type be blocked by Content Security Policy?</dfn> algorithm</li>
     <li>The <dfn data-x-href="https://w3c.github.io/webappsec-csp/#should-block-navigation-response">Should navigation response to navigation request of type in target be blocked by Content Security Policy?</dfn> algorithm</li>
     <li>The <dfn data-x-href="https://w3c.github.io/webappsec-csp/#report-uri"><code data-x="">report-uri</code> directive</dfn></li>
     <li>The <dfn data-x="csp-EnsureCSPDoesNotBlockStringCompilation" data-x-href="https://w3c.github.io/webappsec-csp/#can-compile-strings">EnsureCSPDoesNotBlockStringCompilation</dfn> abstract operation</li>
     <li>The <dfn data-x-href="https://w3c.github.io/webappsec-csp/#allow-base-for-document">Is base allowed for Document?</dfn> algorithm</li>
     <li>The <dfn data-x-href="https://w3c.github.io/webappsec-csp/#frame-ancestors"><code data-x="">frame-ancestors</code> directive</dfn></li>
     <li>The <dfn data-x-href="https://w3c.github.io/webappsec-csp/#sandbox"><code data-x="">sandbox</code> directive</dfn></li>
     <li>The <dfn data-x-href="https://w3c.github.io/webappsec-csp/#contains-a-header-delivered-content-security-policy">contains a header-delivered Content Security Policy</dfn> property.</li>
     <li>The <dfn data-x="parse-response-csp" data-x-href="https://w3c.github.io/webappsec-csp/#parse-response-csp">Parse a response's Content Security Policies</dfn> algorithm.</li>
     <li><dfn data-x-href="https://w3c.github.io/webappsec-csp/#securitypolicyviolationevent"><code>SecurityPolicyViolationEvent</code></dfn> interface</li>
     <li>The <dfn data-x="event-securitypolicyviolation" data-x-href="https://w3c.github.io/webappsec-csp/#eventdef-globaleventhandlers-securitypolicyviolation"><code>securitypolicyviolation</code></dfn> event</li>
    </ul>
   </dd>

   <dt>Service Workers</dt>

   <dd>
    <p>The following terms are defined in <cite>Service Workers</cite>: <ref spec=SW></p>

    <ul class="brief">
     <li><dfn data-x="dfn-active-worker" data-x-href="https://w3c.github.io/ServiceWorker/#dfn-active-worker">active worker</dfn></li>
     <li><dfn data-x="dfn-client-message-queue" data-x-href="https://w3c.github.io/ServiceWorker/#dfn-client-message-queue">client message queue</dfn></li>
     <li><dfn data-x="dfn-control" data-x-href="https://w3c.github.io/ServiceWorker/#dfn-control">control</dfn></li>
     <li><dfn data-x="on-fetch-request-algorithm" data-x-href="https://w3c.github.io/ServiceWorker/#on-fetch-request-algorithm">handle fetch</dfn></li>
     <li><dfn data-x="scope-match-algorithm" data-x-href="https://w3c.github.io/ServiceWorker/#scope-match-algorithm">match service worker registration</dfn></li>
     <li><dfn data-x="dfn-service-worker" data-x-href="https://w3c.github.io/ServiceWorker/#dfn-service-worker">service worker</dfn></li>
     <li><dfn data-x="serviceworkercontainer-service-worker-client" data-x-href="https://w3c.github.io/ServiceWorker/#serviceworkercontainer-service-worker-client">service worker client</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/ServiceWorker/#serviceworker"><code>ServiceWorker</code></dfn> interface</li>
     <li><dfn data-x-href="https://w3c.github.io/ServiceWorker/#serviceworkercontainer"><code>ServiceWorkerContainer</code></dfn> interface</li>
     <li><dfn data-x-href="https://w3c.github.io/ServiceWorker/#serviceworkerglobalscope"><code>ServiceWorkerGlobalScope</code></dfn> interface</li>
    </ul>
   </dd>

   <dt>Secure Contexts</dt>

   <dd>
    <p>The following algorithms are defined in <cite>Secure Contexts</cite>: <ref
    spec="SECURE-CONTEXTS"></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/webappsec-secure-contexts/#potentially-trustworthy-url">Is url potentially trustworthy?</dfn></li>
    </ul>
   </dd>

   <dt>Permissions Policy</dt>

   <dd>
    <p>The following terms are defined in <cite>Permissions Policy</cite>: <ref
    spec=PERMISSIONSPOLICY></p>

    <ul class="brief">
     <li><dfn data-x="concept-permissions-policy" data-x-href="https://w3c.github.io/webappsec-feature-policy/#permissions-policy">permissions policy</dfn></li>
     <li><dfn data-x="concept-policy-controlled-feature" data-x-href="https://w3c.github.io/webappsec-feature-policy/#policy-controlled-feature">policy-controlled feature</dfn></li>
     <li><dfn data-x="concept-container-policy" data-x-href="https://w3c.github.io/webappsec-feature-policy/#container-policy">container policy</dfn></li>
     <li><dfn data-x="concept-serialized-permissions-policy" data-x-href="https://w3c.github.io/webappsec-feature-policy/#serialized-permissions-policy">serialized permissions policy</dfn></li>
     <li><dfn data-x="concept-default-allowlist" data-x-href="https://w3c.github.io/webappsec-feature-policy/#default-allowlist">default allowlist</dfn></li>
     <li>The <dfn data-x-href="https://w3c.github.io/webappsec-feature-policy/#create-for-navigable">creating a permissions policy</dfn> algorithm</li>
     <li>The <dfn data-x-href="https://w3c.github.io/webappsec-feature-policy/#create-from-response">creating a permissions policy from a response</dfn> algorithm</li>
     <li>The <dfn data-x="is-feature-enabled" data-x-href="https://w3c.github.io/webappsec-feature-policy/#is-feature-enabled">is feature enabled by policy for origin</dfn> algorithm</li>
     <li>The <dfn data-x="process-permissions-policy-attributes" data-x-href="https://w3c.github.io/webappsec-feature-policy/#process-permissions-policy-attributes">process permissions policy attributes</dfn> algorithm</li>
    </ul>
   </dd>


   <dt>Payment Request API</dt>

   <dd>
    <p>The following feature is defined in <cite>Payment Request API</cite>:
    <ref spec=PAYMENTREQUEST></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/payment-request/#dom-paymentrequest"><code>PaymentRequest</code></dfn> interface</li>
    </ul>
   </dd>


   <dt>MathML</dt>

   <dd>
    <p>While support for MathML as a whole is not required by this specification (though it is
    encouraged, at least for web browsers), certain features depend upon small parts of MathML being
    implemented. <ref spec=MATHML></p>

    <p>The following features are defined in <cite>Mathematical Markup Language</cite>
    (<cite>MathML</cite>):</p>

    <ul class="brief">
     <li><dfn data-x-href="https://www.w3.org/Math/draft-spec/chapter5.html#mixing.elements.annotation.xml">MathML <code>annotation-xml</code></dfn> element</li>
     <li><dfn data-x-href="https://www.w3.org/Math/draft-spec/chapter2.html#interf.toplevel">MathML <code>math</code></dfn> element</li>
     <li><dfn data-x-href="https://www.w3.org/Math/draft-spec/chapter3.html#presm.merror">MathML <code>merror</code></dfn> element</li>
     <li><dfn data-x-href="https://www.w3.org/Math/draft-spec/chapter3.html#presm.mi">MathML <code>mi</code></dfn> element</li>
     <li><dfn data-x-href="https://www.w3.org/Math/draft-spec/chapter3.html#presm.mn">MathML <code>mn</code></dfn> element</li>
     <li><dfn data-x-href="https://www.w3.org/Math/draft-spec/chapter3.html#presm.mo">MathML <code>mo</code></dfn> element</li>
     <li><dfn data-x-href="https://www.w3.org/Math/draft-spec/chapter3.html#presm.ms">MathML <code>ms</code></dfn> element</li>
     <li><dfn data-x-href="https://www.w3.org/Math/draft-spec/chapter3.html#presm.mtext">MathML <code>mtext</code></dfn> element</li>
    </ul>
   </dd>


   <dt>SVG</dt>

   <dd>
    <p>While support for SVG as a whole is not required by this specification (though it is
    encouraged, at least for web browsers), certain features depend upon parts of SVG being
    implemented.</p>

    <p>User agents that implement SVG must implement the <cite>SVG 2</cite> specification, and not
    any earlier revisions.</p>

    <p>The following features are defined in the <cite>SVG 2</cite> specification: <ref
    spec=SVG></p>

    <ul class="brief">
     <li><dfn data-x-href="https://svgwg.org/svg2-draft/types.html#InterfaceSVGElement"><code>SVGElement</code></dfn> interface</li>
     <li><dfn data-x-href="https://svgwg.org/svg2-draft/embedded.html#InterfaceSVGImageElement"><code>SVGImageElement</code></dfn> interface</li>
     <li><dfn data-x-href="https://svgwg.org/svg2-draft/interact.html#InterfaceSVGScriptElement"><code>SVGScriptElement</code></dfn> interface</li>
     <li><dfn data-x-href="https://svgwg.org/svg2-draft/struct.html#InterfaceSVGSVGElement"><code>SVGSVGElement</code></dfn> interface</li>
     <li><dfn data-x-href="https://svgwg.org/svg2-draft/linking.html#AElement">SVG <code>a</code></dfn> element</li>
     <li><dfn data-x-href="https://svgwg.org/svg2-draft/struct.html#DescElement">SVG <code>desc</code></dfn> element</li>
     <li><dfn data-x-href="https://svgwg.org/svg2-draft/embedded.html#ForeignObjectElement">SVG <code>foreignObject</code></dfn> element</li>
     <li><dfn data-x-href="https://svgwg.org/svg2-draft/embedded.html#ImageElement">SVG <code>image</code></dfn> element</li>
     <li><dfn data-x-href="https://svgwg.org/svg2-draft/interact.html#ScriptElement">SVG <code>script</code></dfn> element</li>
     <li><dfn data-x-href="https://svgwg.org/svg2-draft/struct.html#SVGElement">SVG <code>svg</code></dfn> element</li>
     <li><dfn data-x-href="https://svgwg.org/svg2-draft/struct.html#TitleElement">SVG <code>title</code></dfn> element</li>
     <li><dfn data-x-href="https://svgwg.org/svg2-draft/struct.html#UseElement">SVG <code>use</code></dfn> element</li>
     <li><dfn data-x-href="https://svgwg.org/svg2-draft/painting.html#TextRendering">SVG <code>text-rendering</code></dfn> property</li>
    </ul>
   </dd>


   <dt>Filter Effects</dt>

   <dd>
    <p>The following features are defined in <cite>Filter Effects</cite>:
    <ref spec=FILTERS></p>

    <ul class="brief">
     <li><dfn data-x-href="https://drafts.fxtf.org/filter-effects/#typedef-filter-value-list">&lt;filter-value-list&gt;</dfn></li>
    </ul>
   </dd>

   <dt>Compositing</dt>

   <dd>
    <p>The following features are defined in <cite>Compositing and Blending</cite>:
    <ref spec=COMPOSITE></p>

    <ul class="brief">
     <li><dfn data-x-href="https://drafts.fxtf.org/compositing/#ltblendmodegt">&lt;blend-mode&gt;</dfn></li>
     <li><dfn data-x-href="https://drafts.fxtf.org/compositing/#compositemode">&lt;composite-mode&gt;</dfn></li>
     <li><dfn data-x-href="https://drafts.fxtf.org/compositing/#porterduffcompositingoperators_srcover" data-x="gcop-source-over">source-over</dfn></li>
     <li><dfn data-x-href="https://drafts.fxtf.org/compositing/#porterduffcompositingoperators_src" data-x="gcop-copy">copy</dfn></li>
    </ul>
   </dd>
   <dt>Cooperative Scheduling of Background Tasks</dt>

   <dd>
    <p>The following features are defined in <cite>Cooperative Scheduling of Background Tasks</cite>:
    <ref spec=REQUESTIDLECALLBACK></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/requestidlecallback/#the-requestidlecallback-method"><code>requestIdleCallback()</code></dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/requestidlecallback/#start-an-idle-period-algorithm">start an idle period algorithm</dfn></li>
    </ul>
   </dd>

   <dt>Screen Orientation</dt>
   <dd>
    <p>The following terms are defined in <cite>Screen Orientation</cite>: <ref spec=SCREENORIENTATION></p>

    <ul>
     <li><dfn data-x-href="https://w3c.github.io/screen-orientation/#dfn-screen-orientation-change-steps">screen orientation change steps</dfn></li>
    </ul>
   </dd>

   <dt>Storage</dt>
   <dd>
    <p>The following terms are defined in <cite>Storage</cite>: <ref spec=STORAGE></p>

    <ul class="brief">
     <li><dfn data-x-href="https://storage.spec.whatwg.org/#obtain-a-local-storage-bottle-map">obtain a local storage bottle map</dfn></li>
     <li><dfn data-x-href="https://storage.spec.whatwg.org/#obtain-a-session-storage-bottle-map">obtain a session storage bottle map</dfn></li>
     <li><dfn data-x-href="https://storage.spec.whatwg.org/#obtain-a-storage-key-for-non-storage-purposes">obtain a storage key for non-storage purposes</dfn></li>
     <li><dfn data-x-href="https://storage.spec.whatwg.org/#storage-key-equal">storage key equal</dfn></li>
     <li><dfn data-x-href="https://storage.spec.whatwg.org/#storage-proxy-map">storage proxy map</dfn></li>
     <li><dfn data-x-href="https://storage.spec.whatwg.org/#legacy-clone-a-traversable-storage-shed">legacy-clone a traversable storage shed</dfn></li>
    </ul>
   </dd>

   <dt>Web App Manifest</dt>

   <dd>
    <p>The following features are defined in <cite>Web App Manifest</cite>: <ref spec=MANIFEST></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/manifest/#dfn-manifest">application manifest</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/manifest/#dfn-installed-web-application">installed web application</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/manifest/#dfn-processing-a-manifest">process the manifest</dfn></li>
    </ul>
   </dd>

   <dt>WebCodecs</dt>

   <dd>
    <p>The following features are defined in <cite>WebCodecs</cite>: <ref spec=WEBCODECS></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/webcodecs/#videoframe-interface"><code>VideoFrame</code></dfn> interface.</li>
     <li><dfn data-x-href="https://w3c.github.io/webcodecs/#dom-videoframe-display-width-slot">[[display width]]</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webcodecs/#dom-videoframe-display-height-slot">[[display height]]</dfn></li>
    </ul>
   </dd>

   <dt>WebDriver</dt>

   <dd>
    <p>The following terms are defined in <cite>WebDriver</cite>: <ref spec=WEBDRIVER></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/webdriver/#dfn-extension-commands">extension command</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webdriver/#dfn-remote-end-steps">remote end steps</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webdriver/#dfn-errors">WebDriver error</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webdriver/#dfn-error-code">WebDriver error code</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webdriver/#dfn-invalid-argument">invalid argument</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webdriver/#dfn-getting-properties">getting a property</dfn></li>
     <li><dfn data-x="success-value" data-x-href="https://w3c.github.io/webdriver/#dfn-success">success</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webdriver/#security">WebDriver's security considerations</dfn></li>
     <li><dfn data-x="webdriver-current-browsing-context" data-x-href="https://w3c.github.io/webdriver/#dfn-current-browsing-context">current browsing context</dfn></li>
    </ul>
   </dd>

   <dt>WebDriver BiDi</dt>

   <dd>
    <p>The following terms are defined in <cite>WebDriver BiDi</cite>: <ref spec=WEBDRIVERBIDI></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/webdriver-bidi/#webdriver-bidi-navigation-status">WebDriver BiDi navigation status</dfn></li>
     <li><dfn data-x="navigation-status-id" data-x-href="https://w3c.github.io/webdriver-bidi/#navigation-status-id">navigation status id</dfn></li>
     <li><dfn data-x="navigation-status-status" data-x-href="https://w3c.github.io/webdriver-bidi/#navigation-status-status">navigation status status</dfn></li>
     <li><dfn data-x="navigation-status-canceled" data-x-href="https://w3c.github.io/webdriver-bidi/#navigation-status-canceled">navigation status canceled</dfn></li>
     <li><dfn data-x="navigation-status-pending" data-x-href="https://w3c.github.io/webdriver-bidi/#navigation-status-pending">navigation status pending</dfn></li>
     <li><dfn data-x="navigation-status-complete" data-x-href="https://w3c.github.io/webdriver-bidi/#navigation-status-complete">navigation status complete</dfn></li>
     <li><dfn data-x="navigation-status-url" data-x-href="https://w3c.github.io/webdriver-bidi/#navigation-status-url">navigation status url</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webdriver-bidi/#webdriver-bidi-navigation-started">WebDriver BiDi navigation started</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webdriver-bidi/#webdriver-bidi-navigation-aborted">WebDriver BiDi navigation aborted</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webdriver-bidi/#webdriver-bidi-navigation-failed">WebDriver BiDi navigation failed</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webdriver-bidi/#webdriver-bidi-download-started">WebDriver BiDi download started</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webdriver-bidi/#webdriver-bidi-fragment-navigated">WebDriver BiDi fragment navigated</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webdriver-bidi/#webdriver-bidi-dom-content-loaded">WebDriver BiDi DOM content loaded</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webdriver-bidi/#webdriver-bidi-load-complete">WebDriver BiDi load complete</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webdriver-bidi/#webdriver-bidi-user-prompt-closed">WebDriver BiDi user prompt closed</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webdriver-bidi/#webdriver-bidi-user-prompt-opened">WebDriver BiDi user prompt opened</dfn></li>
    </ul>
   </dd>

   <dt>Web Cryptography API</dt>

   <dd>
    <p>The following terms are defined in <cite>Web Cryptography API</cite>: <ref spec=WEBCRYPTO></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/webcrypto/#dfn-generate-a-random-uuid">generating a random UUID</dfn></li>
    </ul>
   </dd>

   <dt>WebSockets</dt>

   <dd>
    <p>The following terms are defined in <cite>WebSockets</cite>: <ref spec=WEBSOCKETS></p>

    <ul class="brief">
     <li><dfn data-x-href="https://websockets.spec.whatwg.org/#websocket"><code>WebSocket</code></dfn></li>
     <li><dfn data-x-href="https://websockets.spec.whatwg.org/#make-disappear" for="WebSocket">make disappear</dfn></li>
    </ul>
   </dd>

   <dt>Web Authentication: An API for accessing Public Key Credentials</dt>

   <dd>
    <p>The following terms are defined in <cite>Web Authentication: An API for accessing Public Key Credentials</cite>: <ref spec=WEBAUTHN></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/webauthn/#public-key-credential">public key credential</dfn></li>
    </ul>
   </dd>

   <dt>Credential Management</dt>

   <dd>
    <p>The following terms are defined in <cite>Credential Management</cite>: <ref spec=CREDMAN></p>

    <ul class="brief">
     <li><dfn data-x-href="https://w3c.github.io/webappsec-credential-management/#dom-credentialmediationrequirement-conditional">conditional mediation</dfn></li>
     <li><dfn data-x="credman-credential" data-x-href="https://w3c.github.io/webappsec-credential-management/#credential">credential</dfn></li>
     <li><dfn data-x-href="https://w3c.github.io/webappsec-credential-management/#dom-credentialscontainer-get"><code>navigator.credentials.get()</code></dfn></li>
    </ul>
   </dd>

   <dt>Console</dt>

   <dd>
    <p>The following terms are defined in <cite>Console</cite>: <ref spec=CONSOLE></p>

    <ul class="brief">
     <li><dfn data-x-href="https://console.spec.whatwg.org/#report-a-warning-to-the-console">report a warning to the console</dfn></li>
    </ul>
   </dd>
  </dl>

  <hr>

  <p>This specification does not <em>require</em> support of any particular network protocol, style
  sheet language, scripting language, or any of the DOM specifications beyond those required in the
  list above. However, the language described by this specification is biased towards CSS as the
  styling language, JavaScript as the scripting language, and HTTP as the network protocol, and
  several features assume that those languages and protocols are in use.</p>

  <p>A user agent that implements the HTTP protocol must implement <cite>HTTP State Management
  Mechanism</cite> (Cookies) as well. <ref spec=HTTP> <ref spec=COOKIES></p>

  <p class="note">This specification might have certain additional requirements on character
  encodings, image formats, audio formats, and video formats in the respective sections.</p>

  </div>




  <h4>Extensibility</h4>

  <p>Vendor-specific proprietary user agent extensions to this specification are strongly
  discouraged. Documents must not use such extensions, as doing so reduces interoperability and
  fragments the user base, allowing only users of specific user agents to access the content in
  question.</p>

  <div w-nodev>

  <p>All extensions must be defined so that the use of extensions neither contradicts nor causes the
  non-conformance of functionality defined in the specification.</p> <!-- thanks to QA Framework -->

  <div class="example">

   <p>For example, while strongly discouraged from doing so, an implementation could add a new IDL
   attribute "<code data-x="">typeTime</code>" to a control that returned the time it took the user
   to select the current value of a control (say). On the other hand, defining a new control that
   appears in a form's <code data-x="dom-form-elements">elements</code> array would be in violation
   of the above requirement, as it would violate the definition of <code
   data-x="dom-form-elements">elements</code> given in this specification.</p>

  </div>

  </div>

  <hr>

  <p>When vendor-neutral extensions to this specification are needed, either this specification can
  be updated accordingly, or an extension specification can be written that overrides the
  requirements in this specification. When someone applying this specification to their activities
  decides that they will recognize the requirements of such an extension specification, it becomes
  an <dfn data-x="other applicable specifications">applicable specification</dfn> for the purposes
  of conformance requirements in this specification.</p>

  <p class="note">Someone could write a specification that defines any arbitrary byte stream as
  conforming, and then claim that their random junk is conforming. However, that does not mean that
  their random junk actually is conforming for everyone's purposes: if someone else decides that
  that specification does not apply to their work, then they can quite legitimately say that the
  aforementioned random junk is just that, junk, and not conforming at all. As far as conformance
  goes, what matters in a particular community is what that community <em>agrees</em> is
  applicable.</p>

  <div w-nodev>

  <hr>

  <p>User agents must treat elements and attributes that they do not understand as semantically
  neutral; leaving them in the DOM (for DOM processors), and styling them according to CSS (for CSS
  processors), but not inferring any meaning from them.</p>

  <p>When support for a feature is disabled (e.g. as an emergency measure to mitigate a security
  problem, or to aid in development, or for performance reasons), user agents must act as if they
  had no support for the feature whatsoever, and as if the feature was not mentioned in this
  specification. For example, if a particular feature is accessed via an attribute in a Web IDL
  interface, the attribute itself would be omitted from the objects that implement that interface
  &mdash; leaving the attribute on the object but making it return null or throw an exception is
  insufficient.</p>

  </div>


  <div w-nodev>

  <h4>Interactions with XPath and XSLT</h4>

  <p id="xpath-1.0-processors">Implementations of XPath 1.0 that operate on <span>HTML
  documents</span> parsed or created in the manners described in this specification (e.g. as part of
  the <code data-x="">document.evaluate()</code> API) must act as if the following edit was applied
  to the XPath 1.0 specification.</p>

  <p>First, remove this paragraph:</p>

  <blockquote cite="https://www.w3.org/TR/1999/REC-xpath-19991116/#node-tests">

   <p>A <a href="https://www.w3.org/TR/REC-xml-names/#NT-QName">QName</a> in the node test is expanded
   into an <a href="https://www.w3.org/TR/1999/REC-xpath-19991116/#dt-expanded-name">expanded-name</a>
   using the namespace declarations from the expression context. This is the same way expansion is
   done for element type names in start and end-tags except that the default namespace declared with
   <code data-x="">xmlns</code> is not used: if the <a
   href="https://www.w3.org/TR/REC-xml-names/#NT-QName">QName</a> does not have a prefix, then the
   namespace URI is null (this is the same way attribute names are expanded). It is an error if the
   <a href="https://www.w3.org/TR/REC-xml-names/#NT-QName">QName</a> has a prefix for which there is
   no namespace declaration in the expression context.</p>

  </blockquote>

  <p>Then, insert in its place the following:</p>

  <blockquote cite="https://www.w3.org/Bugs/Public/show_bug.cgi?id=7059#c37">

   <p>A QName in the node test is expanded into an expanded-name using the namespace declarations
   from the expression context. If the QName has a prefix, then there must be a<!-- added 2009-10-27
   - https://www.w3.org/Bugs/Public/show_bug.cgi?id=8062 --> namespace declaration for this prefix in
   the expression context, and the corresponding<!-- typo fixed 2009-10-27 -
   https://www.w3.org/Bugs/Public/show_bug.cgi?id=8063 --> namespace URI is the one that is
   associated with this prefix. It is an error if the QName has a prefix for which there is no
   namespace declaration in the expression context. </p>

   <p>If the QName has no prefix and the principal node type of the axis is element, then the
   default element namespace is used. Otherwise if the QName has no prefix, the namespace URI is
   null. The default element namespace is a member of the context for the XPath expression. The
   value of the default element namespace when executing an XPath expression through the DOM3 XPath
   API is determined in the following way:</p>

   <ol>
    <li>If the context node is from an HTML DOM, the default element namespace is
    "http://www.w3.org/1999/xhtml".</li>

    <li>Otherwise, the default element namespace URI is null.</li>
   </ol>

   <p class="note">This is equivalent to adding the default element namespace feature of XPath 2.0
   to XPath 1.0, and using the HTML namespace as the default element namespace for HTML documents.
   It is motivated by the desire to have implementations be compatible with legacy HTML content
   while still supporting the changes that this specification introduces to HTML regarding the
   namespace used for HTML elements, and by the desire to use XPath 1.0 rather than XPath 2.0.</p>

  </blockquote>

  <p class="note">This change is a <span>willful violation</span> of the XPath 1.0 specification,
  motivated by desire to have implementations be compatible with legacy content while still
  supporting the changes that this specification introduces to HTML regarding which namespace is
  used for HTML elements. <ref spec=XPATH10></p> <!-- note: version matters for
  this ref -->

  <hr>

  <p id="dom-based-xslt-1.0-processors">XSLT 1.0 processors outputting to a DOM when the output
  method is "html" (either explicitly or via the defaulting rule in XSLT 1.0) are affected as
  follows:</p>

  <p>If the transformation program outputs an element in no namespace, the processor must, prior to
  constructing the corresponding DOM element node, change the namespace of the element to the
  <span>HTML namespace</span>, <span data-x="converted to ASCII lowercase">ASCII-lowercase</span> the
  element's local name, and <span data-x="converted to ASCII lowercase">ASCII-lowercase</span> the
  names of any non-namespaced attributes on the element.</p>

  <p class="note">This requirement is a <span>willful violation</span> of the XSLT 1.0
  specification, required because this specification changes the namespaces and case-sensitivity
  rules of HTML in a manner that would otherwise be incompatible with DOM-based XSLT
  transformations. (Processors that serialize the output are unaffected.) <ref spec=XSLT10></p> <!--
  note: version matters for this ref -->

  <hr>

  <p>This specification does not specify precisely how XSLT processing interacts with the <span>HTML
  parser</span> infrastructure (for example, whether an XSLT processor acts as if it puts any
  elements into a <span>stack of open elements</span>). However, XSLT processors must <span>stop
  parsing</span> if they successfully complete, and must <span>update the current document
  readiness</span> first to "<code data-x="">interactive</code>" and then to "<code
  data-x="">complete</code>" if they are aborted.</p>

  <hr>

  <p>This specification does not specify how XSLT interacts with the <span
  data-x="navigate">navigation</span> algorithm, how it fits in with the <span>event loop</span>, nor
  how error pages are to be handled (e.g. whether XSLT errors are to replace an incremental XSLT
  output, or are rendered inline, etc.).</p>

  <p class="note">There are also additional non-normative comments regarding the interaction of XSLT
  and HTML <a href="#scriptTagXSLT">in the <code>script</code> element section</a>, and of
  XSLT, XPath, and HTML <a href="#template-XSLT-XPath">in the <code>template</code> element
  section</a>.</p>

  </div>



  <h3 id="policy-controlled-features">Policy-controlled features</h3>

  <p>This document defines the following <span
  data-x="concept-policy-controlled-feature">policy-controlled features</span>:</p>

  <ul>
    <li>"<dfn data-x="autoplay-feature"><code data-x="">autoplay</code></dfn>", which has a <span
    data-x="concept-default-allowlist">default allowlist</span> of <code
    data-x="">'self'</code>.</li>
    <li>"<dfn data-x="cross-origin-isolated-feature"><code
    data-x="">cross-origin-isolated</code></dfn>", which has a <span
    data-x="concept-default-allowlist">default allowlist</span> of <code
    data-x="">'self'</code>.</li>
  </ul>


  <h3 split-filename="common-microsyntaxes">Common microsyntaxes</h3>

  <p>There are various places in HTML that accept particular data types, such as dates or numbers.
  This section describes what the conformance criteria for content in those formats is, and how to
  parse them.</p>

  <div w-nodev>

  <p class="note">Implementers are strongly urged to carefully examine any third-party libraries
  they might consider using to implement the parsing of syntaxes described below. For example, date
  libraries are likely to implement error handling behavior that differs from what is required in
  this specification, since error-handling behavior is often not defined in specifications that
  describe date syntaxes similar to those used in this specification, and thus implementations tend
  to vary greatly in how they handle errors.</p>

  </div>


  <div w-nodev>

  <h4>Common parser idioms</h4>

  <p>Some of the micro-parsers described below follow the pattern of having an <var>input</var>
  variable that holds the string being parsed, and having a <var>position</var> variable pointing at
  the next character to parse in <var>input</var>.</p>

  </div>



  <h4>Boolean attributes</h4>

  <p>A number of attributes are <dfn data-x="boolean attribute">boolean attributes</dfn>. The
  presence of a boolean attribute on an element represents the true value, and the absence of the
  attribute represents the false value.</p>

  <p>If the attribute is present, its value must either be the empty string or a value that is an
  <span>ASCII case-insensitive</span> match for the attribute's canonical name, with no leading or
  trailing whitespace.</p>

  <p class="note">The values "true" and "false" are not allowed on boolean attributes. To represent
  a false value, the attribute has to be omitted altogether.</p>

  <div class="example">

   <p>Here is an example of a checkbox that is checked and disabled. The <code
   data-x="attr-input-checked">checked</code> and <code data-x="attr-fe-disabled">disabled</code>
   attributes are the boolean attributes.</p>

   <pre><code class="html">&lt;label>&lt;input type=checkbox checked name=cheese disabled> Cheese&lt;/label></code></pre>

   <p>This could be equivalently written as this:

   <pre><code class="html">&lt;label>&lt;input type=checkbox checked=checked name=cheese disabled=disabled> Cheese&lt;/label></code></pre>

   <p>You can also mix styles; the following is still equivalent:</p>

   <pre><code class="html">&lt;label>&lt;input type='checkbox' checked name=cheese disabled=""> Cheese&lt;/label></code></pre>

  </div>



  <h4>Keywords and enumerated attributes</h4>

  <p>Some attributes, called <dfn data-x="enumerated attribute" data-lt="enumerated attribute"
  export>enumerated attributes</dfn>, take on a finite set of states. The state for such an
  attribute is derived by combining the attribute's value, a set of keyword/state mappings given in
  the specification of each attribute, and two possible special states that can also be given in the
  specification of the attribute. These special states are the <dfn><i>invalid value
  default</i></dfn> and the <dfn><i>missing value default</i></dfn>.</p>

  <p class="note">Multiple keywords can map to the same state.</p>

  <p class="note">The empty string can be a valid keyword. Note that the <i data-x="missing value
  default">missing value default</i> applies only when the attribute is <em>missing</em>, not when
  it is present with an empty string value.</p>

  <p>To determine the state of an attribute, use the following steps:</p>

  <ol>
   <li>
    <p>If the attribute is not specified:</p>

    <ol>
     <li><p>If the attribute has a <i data-x="missing value default">missing value default</i>
     state defined, then return that <i data-x="missing value default">missing value default</i>
     state.</p></li>

     <li><p>Otherwise, return no state.</p></li>
    </ol>
   </li>

   <li><p>If the attribute's value is an <span>ASCII case-insensitive</span> match for one of the
   keywords defined for the attribute, then return the state represented by that keyword.</p></li>

   <li><p>If the attribute has an <i data-x="invalid value default">invalid value default</i> state
   defined, then return that <i data-x="invalid value default">invalid value default</i>
   state.</p></li>

   <li><p>Return no state.</p></li>
  </ol>

  <p>For authoring conformance purposes, if an enumerated attribute is specified, the attribute's
  value must be an <span>ASCII case-insensitive</span> match for one of the conforming keywords for
  that attribute, with no leading or trailing whitespace.</p>

  <p>For <span data-x="reflect">reflection</span> purposes, states which have any keywords mapping
  to them are said to have a <dfn>canonical keyword</dfn>. This is determined as follows:</p>

  <ul>
   <li><p>If there is only one keyword mapping to the given state, then it is that keyword.</p></li>

   <li><p>If there is only one <em>conforming</em> keyword mapping to the given state, then it is
   that conforming keyword.</p></li>

   <li><p>Otherwise, the canonical keyword for the state will be explicitly given in the
   specification for the attribute.</p></li>
  </ul>



  <h4>Numbers</h4>

  <h5>Signed integers</h5>

  <p>A string is a <dfn>valid integer</dfn> if it consists of one or more <span>ASCII digits</span>,
  optionally prefixed with a U+002D HYPHEN-MINUS character (-).</p>

  <p>A <span>valid integer</span> without a U+002D HYPHEN-MINUS (-) prefix represents the number
  that is represented in base ten by that string of digits. A <span>valid integer</span>
  <em>with</em> a U+002D HYPHEN-MINUS (-) prefix represents the number represented in base ten by
  the string of digits that follows the U+002D HYPHEN-MINUS, subtracted from zero.</p>

  <div w-nodev>

  <p>The <dfn>rules for parsing integers</dfn> are as given in the following algorithm. When
  invoked, the steps must be followed in the order given, aborting at the first step that returns a
  value. This algorithm will return either an integer or an error.</p>

  <ol>
   <li><p>Let <var>input</var> be the string being parsed.</p></li>

   <li><p>Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the
   start of the string.</p></li>

   <li><p>Let <var>sign</var> have the value "positive".</p></li>

   <li><p><span>Skip ASCII whitespace</span> within <var>input</var> given
   <var>position</var>.</p></li>

   <li><p>If <var>position</var> is past the end of <var>input</var>, return an error.</p></li>

   <li>
    <p>If the character indicated by <var>position</var> (the first character) is a U+002D
    HYPHEN-MINUS character (-):</p>

    <ol>
     <li>Let <var>sign</var> be "negative".</li>

     <li>Advance <var>position</var> to the next character.</li>

     <li>If <var>position</var> is past the end of <var>input</var>, return an error.</li>
    </ol>

    <p>Otherwise, if the character indicated by <var>position</var> (the first character) is a
    U+002B PLUS SIGN character (+):</p>

    <ol>
     <li>Advance <var>position</var> to the next character. (The "<code data-x="">+</code>" is
     ignored, but it is not conforming.)</li>

     <li>If <var>position</var> is past the end of <var>input</var>, return an error.</li>
    </ol>
   </li>

   <li><p>If the character indicated by <var>position</var> is not an <span data-x="ASCII
   digits">ASCII digit</span>, then return an error.</p></li>

   <!-- Ok. At this point we know we have a number. It might have trailing garbage which we'll
   ignore, but it's a number, and we won't return an error. -->

   <li><p><span>Collect a sequence of code points</span> that are <span>ASCII digits</span> from
   <var>input</var> given <var>position</var>, and interpret the resulting sequence as a base-ten
   integer. Let <var>value</var> be that integer.</p></li>

   <li><p>If <var>sign</var> is "positive", return <var>value</var>, otherwise return the result of
   subtracting <var>value</var> from zero.</p></li>
  </ol>

  </div>


  <h5>Non-negative integers</h5>

  <p>A string is a <dfn>valid non-negative integer</dfn> if it consists of one or more <span>ASCII
  digits</span>.</p>

  <p>A <span>valid non-negative integer</span> represents the number that is represented in base ten
  by that string of digits.</p>

  <div w-nodev>

  <p>The <dfn>rules for parsing non-negative integers</dfn> are as given in the following algorithm.
  When invoked, the steps must be followed in the order given, aborting at the first step that
  returns a value. This algorithm will return either zero, a positive integer, or an error.</p>

  <ol>
   <li><p>Let <var>input</var> be the string being parsed.</p></li>

   <li><p>Let <var>value</var> be the result of parsing <var>input</var> using the
   <span>rules for parsing integers</span>.</p></li>

   <li><p>If <var>value</var> is an error, return an error.</p></li>

   <li><p>If <var>value</var> is less than zero, return an error.</p></li>

   <li><p>Return <var>value</var>.</p></li>
  </ol>

  <!-- Implications: A leading + is ignored. A leading - is ignored if the value is zero. -->

  </div>


  <h5>Floating-point numbers</h5>

  <p>A string is a <dfn>valid floating-point number</dfn> if it consists of:</p>

  <ol class="brief">

   <li>Optionally, a U+002D HYPHEN-MINUS character (-).</li>

   <li>One or both of the following, in the given order:

    <ol>
     <li>A series of one or more <span>ASCII digits</span>.</li>

     <li>Both of the following, in the given order:

      <ol>
       <li>A single U+002E FULL STOP character (.).</li>

       <li>A series of one or more <span>ASCII digits</span>.</li>
      </ol>
     </li>
    </ol>
   </li>

   <li>Optionally:

    <ol>
     <li>Either a U+0065 LATIN SMALL LETTER E character (e) or a U+0045 LATIN CAPITAL LETTER E
     character (E).</li>

     <li>Optionally, a U+002D HYPHEN-MINUS character (-) or U+002B PLUS SIGN character (+).</li>

     <li>A series of one or more <span>ASCII digits</span>.</li>
    </ol>
   </li>
  </ol>

  <p>A <span>valid floating-point number</span> represents the number obtained by multiplying the
  significand by ten raised to the power of the exponent, where the significand is the first number,
  interpreted as base ten (including the decimal point and the number after the decimal point, if
  any, and interpreting the significand as a negative number if the whole string starts with a
  U+002D HYPHEN-MINUS character (-) and the number is not zero), and where the exponent is the
  number after the E, if any (interpreted as a negative number if there is a U+002D HYPHEN-MINUS
  character (-) between the E and the number and the number is not zero, or else ignoring a U+002B
  PLUS SIGN character (+) between the E and the number if there is one). If there is no E, then the
  exponent is treated as zero.</p>

  <p class="note">The Infinity and Not-a-Number (NaN) values are not <span data-x="valid
  floating-point number">valid floating-point numbers</span>.</p>

  <div w-nodev>

  <p class="note">The <span>valid floating-point number</span> concept is typically only used to
  restrict what is allowed for authors, while the user agent requirements use the <span>rules for
  parsing floating-point number values</span> below (e.g., the <code
  data-x="attr-progress-max">max</code> attribute of the <code>progress</code> element). However, in
  some cases the user agent requirements include checking if a string is a <span>valid
  floating-point number</span> (e.g., the <span>value sanitization algorithm</span> for the <span
  data-x="attr-input-type-number">Number</span> state of the <code>input</code> element, or the
  <span>parse a srcset attribute</span> algorithm).</p>

  <p>The <dfn data-x="best representation of the number as a floating-point number">best
  representation of the number <var>n</var> as a floating-point number</dfn> is the string
  obtained from running <span>ToString</span>(<var>n</var>). The abstract operation
  <span>ToString</span> is not uniquely determined. When there are multiple possible strings that
  could be obtained from <span>ToString</span> for a particular value, the user agent must always
  return the same string for that value (though it may differ from the value used by other user
  agents).</p>

  <p>The <dfn export>rules for parsing floating-point number values</dfn> are as given in the
  following algorithm. This algorithm must be aborted at the first step that returns something.
  This algorithm will return either a number or an error.</p>

  <ol>
   <li><p>Let <var>input</var> be the string being parsed.</p></li>

   <li><p>Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the
   start of the string.</p></li>

   <li><p>Let <var>value</var> have the value 1.</li>

   <li><p>Let <var>divisor</var> have the value 1.</p></li>

   <li><p>Let <var>exponent</var> have the value 1.</p></li>

   <li><p><span>Skip ASCII whitespace</span> within <var>input</var> given
   <var>position</var>.</p></li>

   <li><p>If <var>position</var> is past the end of <var>input</var>, return an error.</p></li>

   <li>
    <p>If the character indicated by <var>position</var> is a U+002D HYPHEN-MINUS character (-):</p>

    <ol>
     <li>Change <var>value</var> and <var>divisor</var> to &#x2212;1.</li>

     <li>Advance <var>position</var> to the next character.</li>

     <li>If <var>position</var> is past the end of <var>input</var>, return an error.</li>
    </ol>

    <p>Otherwise, if the character indicated by <var>position</var> (the first character) is a
    U+002B PLUS SIGN character (+):</p>

    <ol>
     <li>Advance <var>position</var> to the next character. (The "<code data-x="">+</code>"
     is ignored, but it is not conforming.)</li>

     <li>If <var>position</var> is past the end of <var>input</var>, return an error.</li>
    </ol>
   </li>

   <li><p>If the character indicated by <var>position</var> is a U+002E FULL STOP (.), and that is
   not the last character in <var>input</var>, and the character after the character indicated by
   <var>position</var> is an <span data-x="ASCII digits">ASCII digit</span>, then set
   <var>value</var> to zero and jump to the step labeled <i>fraction</i>.</p> <!-- we have to check
   there's a number so that ".e1" fails to parse but ".0" does not -->

   <li><p>If the character indicated by <var>position</var> is not an <span data-x="ASCII
   digits">ASCII digit</span>, then return an error.</p></li>

   <li><p><span>Collect a sequence of code points</span> that are <span>ASCII digits</span> from
   <var>input</var> given <var>position</var>, and interpret the resulting sequence as a base-ten
   integer. Multiply <var>value</var> by that integer.</p></li>

   <li>If <var>position</var> is past the end of <var>input</var>, jump to the step labeled
   <i>conversion</i>.</li>

   <li><p><i>Fraction</i>: If the character indicated by <var>position</var> is a U+002E
   FULL STOP (.), run these substeps:</p>

    <ol>
     <li><p>Advance <var>position</var> to the next character.</p></li>

     <li><p>If <var>position</var> is past the end of <var>input</var>, or if the character
     indicated by <var>position</var> is not an <span data-x="ASCII digits">ASCII digit</span>,
     U+0065 LATIN SMALL LETTER E (e), or U+0045 LATIN CAPITAL LETTER E (E), then jump to the step
     labeled <i>conversion</i>.</li>

     <li><p>If the character indicated by <var>position</var> is a U+0065 LATIN SMALL
     LETTER E character (e) or a U+0045 LATIN CAPITAL LETTER E character (E), skip the remainder of
     these substeps.</p>

     <li><p><i>Fraction loop</i>: Multiply <var>divisor</var> by ten.</p></li>

     <li>Add the value of the character indicated by <var>position</var>, interpreted as a
     base-ten digit (0..9) and divided by <var>divisor</var>, to <var>value</var>.</li>

     <li><p>Advance <var>position</var> to the next character.</p></li>

     <li><p>If <var>position</var> is past the end of <var>input</var>, then jump to the step
     labeled <i>conversion</i>.</li>

     <li><p>If the character indicated by <var>position</var> is an <span data-x="ASCII
     digits">ASCII digit</span>, jump back to the step labeled <i>fraction loop</i> in these
     substeps.</p></li>
    </ol>
   </li>

   <li><p>If the character indicated by <var>position</var> is U+0065 (e) or a U+0045 (E), then:</p>

    <ol>
     <li><p>Advance <var>position</var> to the next character.</p></li>

     <li><p>If <var>position</var> is past the end of <var>input</var>, then jump to the step
     labeled <i>conversion</i>.</li>

     <li>
      <p>If the character indicated by <var>position</var> is a U+002D HYPHEN-MINUS character
      (-):</p>

      <ol>
       <li>Change <var>exponent</var> to &#x2212;1.</li>

       <li>Advance <var>position</var> to the next character.</li>

       <li><p>If <var>position</var> is past the end of <var>input</var>, then jump to the step
       labeled <i>conversion</i>.</li>
      </ol>

      <p>Otherwise, if the character indicated by <var>position</var> is a U+002B PLUS SIGN
      character (+):</p>

      <ol>
       <li>Advance <var>position</var> to the next character.</li>

       <li><p>If <var>position</var> is past the end of <var>input</var>, then jump to the step
       labeled <i>conversion</i>.</li>
      </ol>
     </li>

     <li><p>If the character indicated by <var>position</var> is not an <span data-x="ASCII
     digits">ASCII digit</span>, then jump to the step labeled <i>conversion</i>.</li>

     <li><p><span>Collect a sequence of code points</span> that are <span>ASCII digits</span> from
     <var>input</var> given <var>position</var>, and interpret the resulting sequence as a base-ten
     integer. Multiply <var>exponent</var> by that integer.</p></li>

     <li><p>Multiply <var>value</var> by ten raised to the <var>exponent</var>th power.</p></li>
    </ol>
   </li>

   <li><p><i>Conversion</i>: Let <var>S</var> be the set of finite IEEE 754 double-precision
   floating-point values except &#x2212;0, but with two special values added: 2<sup>1024</sup> and &#x2212;2<sup>1024</sup>.</p></li>

   <li><p>Let <var>rounded-value</var> be the number in <var>S</var> that is closest to
   <var>value</var>, selecting the number with an even significand if there are two equally close
   values. (The two special values 2<sup>1024</sup> and &#x2212;2<sup>1024</sup>
   are considered to have even significands for this purpose.)</p></li>

   <li><p>If <var>rounded-value</var> is 2<sup>1024</sup> or &#x2212;2<sup>1024</sup>, return an error.</p></li>

   <li><p>Return <var>rounded-value</var>.</p></li>
  </ol>

  </div>


<div w-nodev>
  <h5 id="percentages-and-dimensions">Percentages and lengths</h5>

  <p>The <dfn>rules for parsing dimension values</dfn> are as given in the following algorithm. When
  invoked, the steps must be followed in the order given, aborting at the first step that returns a
  value. This algorithm will return either a number greater than or equal to 0.0, or failure; if a
  number is returned, then it is further categorized as either a percentage or a length.</p>

  <ol>
   <li><p>Let <var>input</var> be the string being parsed.</p></li>

   <li><p>Let <var>position</var> be a <span>position variable</span> for <var>input</var>,
   initially pointing at the start of <var>input</var>.</p></li>

   <li><p><span>Skip ASCII whitespace</span> within <var>input</var> given
   <var>position</var>.</p></li>

   <li><p>If <var>position</var> is past the end of <var>input</var> or the code point at
   <var>position</var> within <var>input</var> is not an <span data-x="ASCII digits">ASCII
   digit</span>, then return failure.</p></li>

   <!-- Ok. At this point we know we have a number. It might have trailing garbage which we'll
   ignore, but it's a number, and we won't return an error. -->

   <li><p><span>Collect a sequence of code points</span> that are <span>ASCII digits</span> from
   <var>input</var> given <var>position</var>, and interpret the resulting sequence as a base-ten
   integer. Let <var>value</var> be that number.</p></li>

   <li><p>If <var>position</var> is past the end of <var>input</var>, then return <var>value</var>
   as a length.</p></li>

   <li>
    <p>If the code point at <var>position</var> within <var>input</var> is U+002E (.), then:</p>

    <ol>
     <li><p>Advance <var>position</var> by 1.</p></li>

     <li><p>If <var>position</var> is past the end of <var>input</var> or the code point at
     <var>position</var> within <var>input</var> is not an <span data-x="ASCII digits">ASCII
     digit</span>, then return the <span>current dimension value</span> with <var>value</var>,
     <var>input</var>, and <var>position</var>.</p></li>

     <li><p>Let <var>divisor</var> have the value 1.</p></li>

     <li>
      <p>While true:</p>

      <ol>
       <li><p>Multiply <var>divisor</var> by ten.</p></li>

       <li><p>Add the value of the code point at <var>position</var> within <var>input</var>,
       interpreted as a base-ten digit (0..9) and divided by <var>divisor</var>, to
       <var>value</var>.</p></li>

       <li><p>Advance <var>position</var> by 1.</p></li>

       <li><p>If <var>position</var> is past the end of <var>input</var>, then return
       <var>value</var> as a length.</p></li>

       <li><p>If the code point at <var>position</var> within <var>input</var> is not an <span
       data-x="ASCII digits">ASCII digit</span>, then <span>break</span>.</p></li>
      </ol>
     </li>
    </ol>
   </li>

   <li><p>Return the <span>current dimension value</span> with <var>value</var>, <var>input</var>,
   and <var>position</var>.</p></li>
  </ol>

  <p>The <dfn>current dimension value</dfn>, given <var>value</var>, <var>input</var>, and
  <var>position</var>, is determined as follows:</p>

  <ol>
   <li><p>If <var>position</var> is past the end of <var>input</var>, then return <var>value</var>
   as a length.</p></li>

   <li><p>If the code point at <var>position</var> within <var>input</var> is U+0025 (%), then
   return <var>value</var> as a percentage.</p></li>

   <li><p>Return <var>value</var> as a length.</p></li>
  </ol>

  <h5 id="nonzero-percentages-and-lengths">Nonzero percentages and lengths</h5>

  <p>The <dfn id="rules-for-parsing-non-zero-dimension-values">rules for parsing nonzero dimension
  values</dfn> are as given in the following algorithm. When invoked, the steps must be followed in
  the order given, aborting at the first step that returns a value. This algorithm will return
  either a number greater than 0.0, or an error; if a number is returned, then it is further
  categorized as either a percentage or a length.</p>

  <ol>
   <li><p>Let <var>input</var> be the string being parsed.</p></li>

   <li><p>Let <var>value</var> be the result of parsing <var>input</var> using the <span>rules for
   parsing dimension values</span>.</p></li>

   <li><p>If <var>value</var> is an error, return an error.</p></li>

   <li><p>If <var>value</var> is zero, return an error.</p></li>

   <li><p>If <var>value</var> is a percentage, return <var>value</var> as a percentage.</p></li>

   <li><p>Return <var>value</var> as a length.</p></li>
  </ol>

  </div>


  <h5>Lists of floating-point numbers</h5>

  <p>A <dfn>valid list of floating-point numbers</dfn> is a number of <span data-x="valid
  floating-point number">valid floating-point numbers</span> separated by U+002C COMMA characters,
  with no other characters (e.g. no <span>ASCII whitespace</span>). In addition, there might be
  restrictions on the number of floating-point numbers that can be given, or on the range of values
  allowed.</p>

  <div w-nodev>

  <p>The <dfn>rules for parsing a list of floating-point numbers</dfn> are as follows:</p>

  <ol>
   <li><p>Let <var>input</var> be the string being parsed.</p></li>

   <li><p>Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the
   start of the string.</p></li>

   <li><p>Let <var>numbers</var> be an initially empty list of floating-point numbers. This list
   will be the result of this algorithm.</p></li>

   <li><p><span>Collect a sequence of code points</span> that are <span>ASCII whitespace</span>,
   U+002C COMMA, or U+003B SEMICOLON characters from <var>input</var> given <var>position</var>.
   This skips past any leading delimiters.</p></li>

   <li><p>While <var>position</var> is not past the end of <var>input</var>:</p>

    <ol>
     <li><p><span>Collect a sequence of code points</span> that are not <span>ASCII
     whitespace</span>, U+002C COMMA, U+003B SEMICOLON, <span>ASCII digits</span>, U+002E FULL STOP,
     or U+002D HYPHEN-MINUS characters from <var>input</var> given <var>position</var>. This skips
     past leading garbage.</p></li>

     <li><p><span>Collect a sequence of code points</span> that are not <span>ASCII
     whitespace</span>, U+002C COMMA, or U+003B SEMICOLON characters from <var>input</var> given
     <var>position</var>, and let <var>unparsed number</var> be the result.</p></li>

     <li><p>Let <var>number</var> be the result of parsing <var>unparsed number</var> using the
     <span>rules for parsing floating-point number values</span>.</p></li>

     <li><p>If <var>number</var> is an error, set <var>number</var> to zero.</p></li>

     <li><p>Append <var>number</var> to <var>numbers</var>.</p></li>

     <li><p><span>Collect a sequence of code points</span> that are <span>ASCII whitespace</span>,
     U+002C COMMA, or U+003B SEMICOLON characters from <var>input</var> given <var>position</var>.
     This skips past the delimiter.</p></li>
    </ol>
   </li>

   <li><p>Return <var>numbers</var>.</p></li>
  </ol>

  </div>

  <div w-nodev>

  <h5>Lists of dimensions</h5>

  <!-- no definition of a type since no conforming feature uses this syntax (it's only used in
  cols="" and rows="" on <frameset> elements -->

  <p>The <dfn>rules for parsing a list of dimensions</dfn> are as follows. These rules return a list
  of zero or more pairs consisting of a number and a unit, the unit being one of <i>percentage</i>,
  <i>relative</i>, and <i>absolute</i>.</p>

  <ol>
   <li><p>Let <var>raw input</var> be the string being parsed.</p></li>

   <li><p>If the last character in <var>raw input</var> is a U+002C COMMA character (,),
   then remove that character from <var>raw input</var>.</p></li>

   <li><p><span data-x="split a string on commas">Split the string <var>raw input</var> on
   commas</span>. Let <var>raw tokens</var> be the resulting list of tokens.</p></li>

   <li><p>Let <var>result</var> be an empty list of number/unit pairs.</p></li>

   <li>
    <p>For each token in <var>raw tokens</var>, run the following substeps:</p>

    <ol>
     <li><p>Let <var>input</var> be the token.</p></li>

     <li><p>Let <var>position</var> be a pointer into <var>input</var>,
     initially pointing at the start of the string.</p></li>

     <li><p>Let <var>value</var> be the number 0.</p></li>

     <li><p>Let <var>unit</var> be <i>absolute</i>.</p></li>

     <li><p>If <var>position</var> is past the end of <var>input</var>, set <var>unit</var> to <i>relative</i> and jump to the last substep.</p></li>

     <li><p>If the character at <var>position</var> is an <span data-x="ASCII
     digits">ASCII digit</span>, <span>collect a sequence of code points</span> that are <span>ASCII
     digits</span> from <var>input</var> given <var>position</var>, interpret the resulting sequence
     as an integer in base ten, and increment <var>value</var> by that integer.</p></li>

     <li>
      <p>If the character at <var>position</var> is U+002E (.), then:</p>

      <ol>
       <li><p><span>Collect a sequence of code points</span> consisting of <span>ASCII
       whitespace</span> and <span>ASCII digits</span> from <var>input</var> given
       <var>position</var>. Let <var>s</var> be the resulting sequence.</p></li>

       <li><p>Remove all <span>ASCII whitespace</span> in <var>s</var>.</p></li>

       <li>
        <p>If <var>s</var> is not the empty string, then:</p>

        <ol>
         <li><p>Let <var>length</var> be the number of characters in <var>s</var> (after the spaces were removed).</p></li>

         <li><p>Let <var>fraction</var> be the result of interpreting <var>s</var> as a base-ten integer, and then dividing that number by <span
         data-x="">10<sup><var>length</var></sup></span>.</li>

         <li><p>Increment <var>value</var> by <var>fraction</var>.</p></li>
        </ol>
       </li>
      </ol>
     </li>

     <li><p><span>Skip ASCII whitespace</span> within <var>input</var> given
     <var>position</var>.</p></li>

     <li>
      <p>If the character at <var>position</var> is a U+0025 PERCENT SIGN character (%),
      then set <var>unit</var> to <i>percentage</i>.</p>

      <p>Otherwise, if the character at <var>position</var> is a U+002A ASTERISK character
      (*), then set <var>unit</var> to <i>relative</i>.</p>
     </li>

     <!-- the remaining characters in /input/ are ignored -->

     <li><p>Add an entry to <var>result</var> consisting of the number given by <var>value</var> and the unit given by <var>unit</var>.</p></li>
    </ol>
   </li>

   <li><p>Return the list <var>result</var>.</p></li>
  </ol>

  </div>


  <h4>Dates and times</h4>

  <p>In the algorithms below, the <dfn>number of days in month <var>month</var> of year
  <var>year</var></dfn> is: <em>31</em> if <var>month</var> is 1, 3, 5, 7, 8,
  10, or 12; <em>30</em> if <var>month</var> is 4, 6, 9, or 11; <em>29</em> if <var>month</var> is 2 and <var>year</var> is a number divisible by 400, or if <var>year</var> is a number divisible by 4 but not by 100; and <em>28</em> otherwise. This
  takes into account leap years in the Gregorian calendar. <ref spec=GREGORIAN></p>

  <p>When <span>ASCII digits</span> are used in the date and time syntaxes defined in this section,
  they express numbers in base ten.</p>

  <div w-nodev>

  <p class="note">While the formats described here are intended to be subsets of the corresponding
  ISO8601 formats, this specification defines parsing rules in much more detail than ISO8601.
  Implementers are therefore encouraged to carefully examine any date parsing libraries before using
  them to implement the parsing rules described below; ISO8601 libraries might not parse dates and
  times in exactly the same manner. <ref spec=ISO8601></p>

  </div>

  <p>Where this specification refers to the <dfn>proleptic Gregorian calendar</dfn>, it means the
  modern Gregorian calendar, extrapolated backwards to year 1. A date in the <span>proleptic
  Gregorian calendar</span>, sometimes explicitly referred to as a <dfn>proleptic-Gregorian
  date</dfn>, is one that is described using that calendar even if that calendar was not in use at
  the time (or place) in question. <ref spec=GREGORIAN></p>

  <p class="note">The use of the Gregorian calendar as the wire format in this specification is an
  arbitrary choice resulting from the cultural biases of those involved in the decision. See also
  the section discussing <a href="#input-author-notes">date, time, and number formats</a> in forms
  <span w-nodev>(for authors), <a href="#input-impl-notes">implementation notes regarding
  localization of form controls</a>,</span> and the <code>time</code> element.</p>


  <h5>Months</h5>

  <p>A <dfn data-x="concept-month">month</dfn> consists of a specific <span>proleptic-Gregorian
  date</span> with no time-zone information and no date information beyond a year and a month. <ref spec=GREGORIAN></p>

  <p>A string is a <dfn>valid month string</dfn> representing a year <var>year</var> and
  month <var>month</var> if it consists of the following components in the given order:</p>

  <ol>
   <li>Four or more <span>ASCII digits</span>, representing <var>year</var>, where <var>year</var>&nbsp;&gt;&nbsp;0</li>

   <li>A U+002D HYPHEN-MINUS character (-)</li>

   <li>Two <span>ASCII digits</span>, representing the month <var>month</var>, in the range
   1&nbsp;&le;&nbsp;<var>month</var>&nbsp;&le;&nbsp;12</li>
  </ol>

  <div w-nodev>

  <p>The rules to <dfn>parse a month string</dfn> are as follows. This will return either a year and
  month, or nothing. If at any point the algorithm says that it "fails", this means that it is
  aborted at that point and returns nothing.</p>

  <ol>
   <li><p>Let <var>input</var> be the string being parsed.</p></li>

   <li><p>Let <var>position</var> be a pointer into <var>input</var>, initially
   pointing at the start of the string.</p></li>

   <li><p><span>Parse a month component</span> to obtain <var>year</var> and <var>month</var>. If this returns nothing, then fail.</p>

   <li><p>If <var>position</var> is <em>not</em> beyond the
   end of <var>input</var>, then fail.</p></li>

   <li><p>Return <var>year</var> and <var>month</var>.</p></li>
  </ol>

  <p>The rules to <dfn>parse a month component</dfn>, given an <var>input</var> string and
  a <var>position</var>, are as follows. This will return either a year and a month, or
  nothing. If at any point the algorithm says that it "fails", this means that it is aborted at that
  point and returns nothing.</p>

  <ol>
   <li><p><span>Collect a sequence of code points</span> that are <span>ASCII digits</span> from
   <var>input</var> given <var>position</var>. If the collected sequence is not at least four
   characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten integer.
   Let that number be the <var>year</var>.</p></li>

   <li><p>If <var>year</var> is not a number greater than zero, then fail.</p></li>

   <li><p>If <var>position</var> is beyond the end of <var>input</var> or if the
   character at <var>position</var> is not a U+002D HYPHEN-MINUS character, then fail.
   Otherwise, move <var>position</var> forwards one character.</p></li>

   <li><p><span>Collect a sequence of code points</span> that are <span>ASCII digits</span> from
   <var>input</var> given <var>position</var>. If the collected sequence is not exactly two
   characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten integer.
   Let that number be the <var>month</var>.</p></li>

   <li><p>If <var>month</var> is not a number in the range 1&nbsp;&le;&nbsp;<var>month</var>&nbsp;&le;&nbsp;12, then fail.</p></li>

   <li><p>Return <var>year</var> and <var>month</var>.</p></li>
  </ol>

  </div>


  <h5>Dates</h5>

  <p>A <dfn data-x="concept-date">date</dfn> consists of a specific <span>proleptic-Gregorian
  date</span> with no time-zone information, consisting of a year, a month, and a day. <ref spec=GREGORIAN></p>

  <p>A string is a <dfn>valid date string</dfn> representing a year <var>year</var>, month
  <var>month</var>, and day <var>day</var> if it consists of the following
  components in the given order:</p>

  <ol>
   <li>A <span>valid month string</span>, representing <var>year</var> and <var>month</var></li>

   <li>A U+002D HYPHEN-MINUS character (-)</li>

   <li>Two <span>ASCII digits</span>, representing <var>day</var>, in the range
   1&nbsp;&le;&nbsp;<var>day</var>&nbsp;&le;&nbsp;<var>maxday</var> where <var>maxday</var> is the <span data-x="number of days in month month of year year">number of
   days in the month <var>month</var> and year <var>year</var></span></li>
  </ol>

  <div w-nodev>

  <p>The rules to <dfn>parse a date string</dfn> are as follows. This will return either a date, or
  nothing. If at any point the algorithm says that it "fails", this means that it is aborted at that
  point and returns nothing.</p>

  <ol>
   <li><p>Let <var>input</var> be the string being parsed.</p></li>

   <li><p>Let <var>position</var> be a pointer into <var>input</var>, initially
   pointing at the start of the string.</p></li>

   <li><p><span>Parse a date component</span> to obtain <var>year</var>, <var>month</var>, and <var>day</var>. If this returns nothing, then fail.</p>

   <li><p>If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.</p></li>

   <li><p>Let <var>date</var> be the date with year <var>year</var>, month <var>month</var>, and day <var>day</var>.</p></li>

   <li><p>Return <var>date</var>.</p></li>
  </ol>

  <p>The rules to <dfn>parse a date component</dfn>, given an <var>input</var> string and a
  <var>position</var>, are as follows. This will return either a year, a month, and a day,
  or nothing. If at any point the algorithm says that it "fails", this means that it is aborted at
  that point and returns nothing.</p>

  <ol>
   <li><p><span>Parse a month component</span> to obtain <var>year</var> and <var>month</var>. If this returns nothing, then fail.</li>

   <li><p>Let <var>maxday</var> be the <span>number of days in month <var>month</var> of year <var>year</var></span>.</p></li>

   <li><p>If <var>position</var> is beyond the end of <var>input</var> or if the
   character at <var>position</var> is not a U+002D HYPHEN-MINUS character, then fail.
   Otherwise, move <var>position</var> forwards one character.</p></li>

   <li><p><span>Collect a sequence of code points</span> that are <span>ASCII digits</span> from
   <var>input</var> given <var>position</var>. If the collected sequence is not exactly two
   characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten integer.
   Let that number be the <var>day</var>.</p></li>

   <li><p>If <var>day</var> is not a number in the range 1&nbsp;&le;&nbsp;<var>day</var>&nbsp;&le;&nbsp;<var>maxday</var>, then fail.</li>

   <li><p>Return <var>year</var>, <var>month</var>, and <var>day</var>.</p></li>
  </ol>

  </div>


  <h5>Yearless dates</h5>

  <p>A <dfn data-x="concept-yearless-date">yearless date</dfn> consists of a Gregorian month and a
  day within that month, but with no associated year. <ref spec=GREGORIAN></p>

  <p>A string is a <dfn>valid yearless date string</dfn> representing a month <var>month</var> and a day <var>day</var> if it consists of the following components
  in the given order:</p>

  <ol>
   <li>Optionally, two U+002D HYPHEN-MINUS characters (-)</li>

   <li>Two <span>ASCII digits</span>, representing the month <var>month</var>, in the range
   1&nbsp;&le;&nbsp;<var>month</var>&nbsp;&le;&nbsp;12</li>

   <li>A U+002D HYPHEN-MINUS character (-)</li>

   <li>Two <span>ASCII digits</span>, representing <var>day</var>, in the range
   1&nbsp;&le;&nbsp;<var>day</var>&nbsp;&le;&nbsp;<var>maxday</var> where <var>maxday</var> is the <span data-x="number of days in month month of year year">number of
   days</span> in the month <var>month</var> and any arbitrary leap year (e.g. 4 or
   2000)</li>
  </ol>

  <p class="note">In other words, if the <var>month</var> is "<code data-x="">02</code>",
  meaning February, then the day can be 29, as if the year was a leap year.</p>

  <div w-nodev>

  <p>The rules to <dfn>parse a yearless date string</dfn> are as follows. This will return either a
  month and a day, or nothing. If at any point the algorithm says that it "fails", this means that
  it is aborted at that point and returns nothing.</p>

  <ol>
   <li><p>Let <var>input</var> be the string being parsed.</p></li>

   <li><p>Let <var>position</var> be a pointer into <var>input</var>, initially
   pointing at the start of the string.</p></li>

   <li><p><span>Parse a yearless date component</span> to obtain <var>month</var> and <var>day</var>. If this returns nothing, then fail.</p>

   <li><p>If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.</p></li>

   <li><p>Return <var>month</var> and <var>day</var>.</p></li>
  </ol>

  <p>The rules to <dfn>parse a yearless date component</dfn>, given an <var>input</var>
  string and a <var>position</var>, are as follows. This will return either a month and a
  day, or nothing. If at any point the algorithm says that it "fails", this means that it is aborted
  at that point and returns nothing.</p>

  <ol>
   <li><p><span>Collect a sequence of code points</span> that are U+002D HYPHEN-MINUS characters (-)
   from <var>input</var> given <var>position</var>. If the collected sequence is not exactly zero or
   two characters long, then fail.</p></li>

   <li><p><span>Collect a sequence of code points</span> that are <span>ASCII digits</span> from
   <var>input</var> given <var>position</var>. If the collected sequence is not exactly two
   characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten integer.
   Let that number be the <var>month</var>.</p></li>

   <li><p>If <var>month</var> is not a number in the range 1&nbsp;&le;&nbsp;<var>month</var>&nbsp;&le;&nbsp;12, then fail.</p></li>

   <li><p>Let <var>maxday</var> be the <span data-x="number of days in month month of year
   year">number of days</span> in month <var>month</var> of any arbitrary leap year (e.g. 4
   or 2000).</p></li>

   <li><p>If <var>position</var> is beyond the end of <var>input</var> or if the
   character at <var>position</var> is not a U+002D HYPHEN-MINUS character, then fail.
   Otherwise, move <var>position</var> forwards one character.</p></li>

   <li><p><span>Collect a sequence of code points</span> that are <span>ASCII digits</span> from
   <var>input</var> given <var>position</var>. If the collected sequence is not exactly two
   characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten integer.
   Let that number be the <var>day</var>.</p></li>

   <li><p>If <var>day</var> is not a number in the range 1&nbsp;&le;&nbsp;<var>day</var>&nbsp;&le;&nbsp;<var>maxday</var>, then fail.</li>

   <li><p>Return <var>month</var> and <var>day</var>.</p></li>
  </ol>

  </div>


  <h5>Times</h5>

  <p>A <dfn data-x="concept-time">time</dfn> consists of a specific time with no time-zone
  information, consisting of an hour, a minute, a second, and a fraction of a second.</p>

  <p>A string is a <dfn>valid time string</dfn> representing an hour <var>hour</var>, a
  minute <var>minute</var>, and a second <var>second</var> if it consists of the
  following components in the given order:</p>

  <ol>
   <li>Two <span>ASCII digits</span>, representing <var>hour</var>, in the range
   0&nbsp;&le;&nbsp;<var>hour</var>&nbsp;&le;&nbsp;23</li>

   <li>A U+003A COLON character (:)</li>

   <li>Two <span>ASCII digits</span>, representing <var>minute</var>, in the range
   0&nbsp;&le;&nbsp;<var>minute</var>&nbsp;&le;&nbsp;59</li>

   <li>If <var>second</var> is nonzero, or optionally if <var>second</var> is
   zero:

    <ol>
     <li>A U+003A COLON character (:)</li>

     <li>Two <span>ASCII digits</span>, representing the integer part of <var>second</var>,
     in the range 0&nbsp;&le;&nbsp;<var>s</var>&nbsp;&le;&nbsp;59</li>

     <li>If <var>second</var> is not an integer, or optionally if <var>second</var> is an integer:

      <ol>
       <li>A U+002E FULL STOP character (.)</li>

       <li>One, two, or three <span>ASCII digits</span>, representing the fractional part of <var>second</var></li>
      </ol>
     </li>
    </ol>
   </li>
  </ol>

  <p class="note">The <var>second</var> component cannot be 60 or 61; leap seconds cannot
  be represented.</p>

  <div w-nodev>

  <p>The rules to <dfn>parse a time string</dfn> are as follows. This will return either a time, or
  nothing. If at any point the algorithm says that it "fails", this means that it is aborted at that
  point and returns nothing.</p>

  <ol>
   <li><p>Let <var>input</var> be the string being parsed.</p></li>

   <li><p>Let <var>position</var> be a pointer into <var>input</var>, initially
   pointing at the start of the string.</p></li>

   <li><p><span>Parse a time component</span> to obtain <var>hour</var>, <var>minute</var>, and <var>second</var>. If this returns nothing, then fail.</p>

   <li><p>If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.</p></li>

   <li><p>Let <var>time</var> be the time with hour <var>hour</var>, minute <var>minute</var>, and second <var>second</var>.</p></li>

   <li><p>Return <var>time</var>.</p></li>
  </ol>

  <p>The rules to <dfn>parse a time component</dfn>, given an <var>input</var> string and a
  <var>position</var>, are as follows. This will return either an hour, a minute, and a
  second, or nothing. If at any point the algorithm says that it "fails", this means that it is
  aborted at that point and returns nothing.</p>

  <ol>
   <li><p><span>Collect a sequence of code points</span> that are <span>ASCII digits</span> from
   <var>input</var> given <var>position</var>. If the collected sequence is not exactly two
   characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten integer.
   Let that number be the <var>hour</var>.</p></li>

   <li>If <var>hour</var> is not a number in the range 0&nbsp;&le;&nbsp;<var>hour</var>&nbsp;&le;&nbsp;23, then fail.</li>

   <li><p>If <var>position</var> is beyond the end of <var>input</var> or if the
   character at <var>position</var> is not a U+003A COLON character, then fail. Otherwise,
   move <var>position</var> forwards one character.</p></li>

   <li><p><span>Collect a sequence of code points</span> that are <span>ASCII digits</span> from
   <var>input</var> given <var>position</var>. If the collected sequence is not exactly two
   characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten integer.
   Let that number be the <var>minute</var>.</p></li>

   <li>If <var>minute</var> is not a number in the range 0&nbsp;&le;&nbsp;<var>minute</var>&nbsp;&le;&nbsp;59, then fail.</li>

   <li><p>Let <var>second</var> be 0.</p></li>

   <li>
    <p>If <var>position</var> is not beyond the end of <var>input</var> and the character at
    <var>position</var> is U+003A (:), then:</p>

    <ol>
     <li><p>Advance <var>position</var> to the next character in <var>input</var>.</p></li>

     <li><p>If <var>position</var> is beyond the end of <var>input</var>, or at
     the last character in <var>input</var>, or if the next <em>two</em> characters in <var>input</var> starting at <var>position</var> are not both <span>ASCII
     digits</span>, then fail.</p></li>

     <li><p><span>Collect a sequence of code points</span> that are either <span>ASCII digits</span>
     or U+002E FULL STOP characters from <var>input</var> given <var>position</var>. If the
     collected sequence is three characters long, or if it is longer than three characters long and
     the third character is not a U+002E FULL STOP character, or if it has more than one U+002E FULL
     STOP character, then fail. Otherwise, interpret the resulting sequence as a base-ten number
     (possibly with a fractional part). Set <var>second</var> to that number.</p></li>

     <li><p>If <var>second</var> is not a number in the range
     0&nbsp;&le;&nbsp;<var>second</var>&nbsp;&lt;&nbsp;60, then fail.</p></li>
    </ol>
   </li>

   <li><p>Return <var>hour</var>, <var>minute</var>, and <var>second</var>.</p></li>
  </ol>

  </div>


  <h5>Local dates and times</h5>

  <p>A <dfn data-x="concept-datetime-local">local date and time</dfn> consists of a specific
  <span>proleptic-Gregorian date</span>, consisting of a year, a month, and a day, and a time,
  consisting of an hour, a minute, a second, and a fraction of a second, but expressed without a
  time zone. <ref spec=GREGORIAN></p>

  <p>A string is a <dfn>valid local date and time string</dfn> representing a date and time if it
  consists of the following components in the given order:</p>

  <ol>
   <li>A <span>valid date string</span> representing the date</li>

   <li>A U+0054 LATIN CAPITAL LETTER T character (T) or a U+0020 SPACE character</li>

   <li>A <span>valid time string</span> representing the time</li>
  </ol>

  <p>A string is a <!--en-GB--><dfn id="valid-normalised-local-date-and-time-string">valid
  normalized local date and time string</dfn> representing a date and time if it consists of the
  following components in the given order:</p>

  <ol>
   <li>A <span>valid date string</span> representing the date</li>

   <li>A U+0054 LATIN CAPITAL LETTER T character (T)</li>

   <li>A <span>valid time string</span> representing the time, expressed as the shortest possible
   string for the given time (e.g. omitting the seconds component entirely if the given time is zero
   seconds past the minute)</li>
  </ol>

  <div w-nodev>

  <p>The rules to <dfn>parse a local date and time string</dfn> are as follows. This will return
  either a date and time, or nothing. If at any point the algorithm says that it "fails", this means
  that it is aborted at that point and returns nothing.</p>

  <ol>
   <li><p>Let <var>input</var> be the string being parsed.</p></li>

   <li><p>Let <var>position</var> be a pointer into <var>input</var>, initially
   pointing at the start of the string.</p></li>

   <li><p><span>Parse a date component</span> to obtain <var>year</var>, <var>month</var>, and <var>day</var>. If this returns nothing, then fail.</p>

   <li><p>If <var>position</var> is beyond the end of <var>input</var> or if the
   character at <var>position</var> is neither a U+0054 LATIN CAPITAL LETTER T character
   (T) nor a U+0020 SPACE character, then fail. Otherwise, move <var>position</var>
   forwards one character.</p></li>

   <li><p><span>Parse a time component</span> to obtain <var>hour</var>, <var>minute</var>, and <var>second</var>. If this returns nothing, then fail.</p>

   <li><p>If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.</p></li>

   <li><p>Let <var>date</var> be the date with year <var>year</var>, month <var>month</var>, and day <var>day</var>.</p></li>

   <li><p>Let <var>time</var> be the time with hour <var>hour</var>, minute <var>minute</var>, and second <var>second</var>.</p></li>

   <li><p>Return <var>date</var> and <var>time</var>.</p></li>
  </ol>

  </div>


  <h5>Time zones</h5>

  <p>A <dfn data-x="concept-timezone">time-zone offset</dfn> consists of a signed number of hours and
  minutes.</p>

  <p>A string is a <dfn>valid time-zone offset string</dfn> representing a time-zone offset if it
  consists of either:</p>


  <ul>

   <li><p>A U+005A LATIN CAPITAL LETTER Z character (Z), allowed only if the time zone is
   UTC</p></li>

   <li>
    <p>Or, the following components, in the given order:</p>

    <ol>
     <li>Either a U+002B PLUS SIGN character (+) or, if the time-zone offset is not zero, a U+002D
     HYPHEN-MINUS character (-), representing the sign of the time-zone offset</li>
     <!-- the -00:00 offset is disallowed because RFC3339 gives it a special semantic -->

     <li>Two <span>ASCII digits</span>, representing the hours component <var>hour</var> of
     the time-zone offset, in the range 0&nbsp;&le;&nbsp;<var>hour</var>&nbsp;&le;&nbsp;23</li>

     <li>Optionally, a U+003A COLON character (:)</li>

     <li>Two <span>ASCII digits</span>, representing the minutes component <var>minute</var> of the time-zone offset, in the range 0&nbsp;&le;&nbsp;<var>minute</var>&nbsp;&le;&nbsp;59</li>
    </ol>
   </li>

  </ul>

  <p class="note">This format allows for time-zone offsets from -23:59 to +23:59. Right now, in
  practice, the range of offsets of actual time zones is -12:00 to +14:00, and the minutes component
  of offsets of actual time zones is always either 00, 30, or 45. There is no guarantee that this
  will remain so forever, however, since time zones are used as political footballs and are thus
  subject to very whimsical policy decisions.</p>

  <p class="note">See also the usage notes and examples in the <span data-x="concept-datetime">global
  date and time</span> section below for details on using time-zone offsets with historical times
  that predate the formation of formal time zones.</p>

  <div w-nodev>

  <p>The rules to <dfn>parse a time-zone offset string</dfn> are as follows. This will return either
  a time-zone offset, or nothing. If at any point the algorithm says that it "fails", this means
  that it is aborted at that point and returns nothing.</p>

  <ol>
   <li><p>Let <var>input</var> be the string being parsed.</p></li>

   <li><p>Let <var>position</var> be a pointer into <var>input</var>, initially
   pointing at the start of the string.</p></li>

   <li><p><span>Parse a time-zone offset component</span> to obtain <var>timezone<sub>hours</sub></var> and <var>timezone<sub>minutes</sub></var>. If this
   returns nothing, then fail.</p>

   <li><p>If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.</p></li>

   <li><p>Return the time-zone offset that is <var>timezone<sub>hours</sub></var>
   hours and <var>timezone<sub>minutes</sub></var> minutes from UTC.</p></li>
  </ol>

  <p>The rules to <dfn>parse a time-zone offset component</dfn>, given an <var>input</var>
  string and a <var>position</var>, are as follows. This will return either time-zone hours
  and time-zone minutes, or nothing. If at any point the algorithm says that it "fails", this means
  that it is aborted at that point and returns nothing.</p>

  <ol>
   <li>
    <p>If the character at <var>position</var> is a U+005A LATIN CAPITAL LETTER Z character
    (Z), then:</p>

    <ol>
     <li><p>Let <var>timezone<sub>hours</sub></var> be 0.</p></li>

     <li><p>Let <var>timezone<sub>minutes</sub></var> be 0.</p></li>

     <li><p>Advance <var>position</var> to the next character in <var>input</var>.</p></li>
    </ol>

    <p>Otherwise, if the character at <var>position</var> is either a U+002B PLUS SIGN (+)
    or a U+002D HYPHEN-MINUS (-), then:</p>

    <ol>
     <li><p>If the character at <var>position</var> is a U+002B PLUS SIGN (+), let <var>sign</var> be "positive". Otherwise, it's a U+002D HYPHEN-MINUS (-); let <var>sign</var> be "negative".</p></li>

     <li><p>Advance <var>position</var> to the next character in <var>input</var>.</p></li>

     <li><p><span>Collect a sequence of code points</span> that are <span>ASCII digits</span> from
     <var>input</var> given <var>position</var>. Let <var>s</var> be the collected
     sequence.</p></li>

     <li>
      <p>If <var>s</var> is exactly two characters long, then:</p>

      <ol>
       <li><p>Interpret <var>s</var> as a base-ten integer. Let that number be the <var>timezone<sub>hours</sub></var>.</p></li>

       <li><p>If <var>position</var> is beyond the end of <var>input</var> or if
       the character at <var>position</var> is not a U+003A COLON character, then fail.
       Otherwise, move <var>position</var> forwards one character.</p></li>

       <li><p><span>Collect a sequence of code points</span> that are <span>ASCII digits</span> from
       <var>input</var> given <var>position</var>. If the collected sequence is not exactly two
       characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten
       integer. Let that number be the <var>timezone<sub>minutes</sub></var>.</p></li>
      </ol>

      <p>If <var>s</var> is exactly four characters long, then:</p>

      <ol>
       <li><p>Interpret the first two characters of <var>s</var> as a base-ten integer. Let
       that number be the <var>timezone<sub>hours</sub></var>.</p></li>

       <li><p>Interpret the last two characters of <var>s</var> as a base-ten integer. Let
       that number be the <var>timezone<sub>minutes</sub></var>.</p></li>
      </ol>

      <p>Otherwise, fail.</p>
     </li>

     <li>If <var>timezone<sub>hours</sub></var> is not a number in the range
     0&nbsp;&le;&nbsp;<var>timezone<sub>hours</sub></var>&nbsp;&le;&nbsp;23, then
     fail.</li>

     <li>If <var>sign</var> is "negative", then negate <var>timezone<sub>hours</sub></var>.</li>

     <li>If <var>timezone<sub>minutes</sub></var> is not a number in the range
     0&nbsp;&le;&nbsp;<var>timezone<sub>minutes</sub></var>&nbsp;&le;&nbsp;59,
     then fail.</li>

     <li>If <var>sign</var> is "negative", then negate <var>timezone<sub>minutes</sub></var>.</li>
    </ol>

    <p>Otherwise, fail.</p>
   </li>

   <li><p>Return <var>timezone<sub>hours</sub></var> and <var>timezone<sub>minutes</sub></var>.</p></li>
  </ol>

  </div>


  <h5>Global dates and times</h5>

  <p>A <dfn data-x="concept-datetime">global date and time</dfn> consists of a specific
  <span>proleptic-Gregorian date</span>, consisting of a year, a month, and a day, and a time,
  consisting of an hour, a minute, a second, and a fraction of a second, expressed with a time-zone
  offset, consisting of a signed number of hours and minutes. <ref spec=GREGORIAN></p>

  <p>A string is a <dfn>valid global date and time string</dfn> representing a date, time, and a
  time-zone offset if it consists of the following components in the given order:</p>

  <ol>
   <li>A <span>valid date string</span> representing the date</li>

   <li>A U+0054 LATIN CAPITAL LETTER T character (T) or a U+0020 SPACE character</li>

   <li>A <span>valid time string</span> representing the time</li>

   <li>A <span>valid time-zone offset string</span> representing the time-zone offset</li>
  </ol>

  <p>Times in dates before the formation of UTC in the mid-twentieth century must be expressed and
  interpreted in terms of UT1 (contemporary Earth solar time at the 0&deg; longitude), not UTC (the
  approximation of UT1 that ticks in SI seconds). Time before the formation of time zones must be
  expressed and interpreted as UT1 times with explicit time zones that approximate the contemporary
  difference between the appropriate local time and the time observed at the location of Greenwich,
  London.</p>

  <div class="example">

   <p>The following are some examples of dates written as <span data-x="valid global date and time
   string">valid global date and time strings</span>.</p>

   <dl>
    <dt>"<code data-x="">0037-12-13 00:00Z</code>"</dt>

    <dd>Midnight in areas using London time on the birthday of Nero (the Roman Emperor). See below
    for further discussion on which date this actually corresponds to.</dd>

    <dt>"<code data-x="">1979-10-14T12:00:00.001-04:00</code>"</dt>

    <dd>One millisecond after noon on October 14th 1979, in the time zone in use on the east coast
    of the USA during daylight saving time.</dd>

    <dt>"<code data-x="">8592-01-01T02:09+02:09</code>"</dt>

    <dd>Midnight UTC on the 1st of January, 8592. The time zone associated with that time is two
    hours and nine minutes ahead of UTC, which is not currently a real time zone, but is nonetheless
    allowed.</dd>
   </dl>

   <p>Several things are notable about these dates:</p>

   <ul>

    <li>Years with fewer than four digits have to be zero-padded. The date "37-12-13" would not be a
    valid date.</li>

    <li>If the "<code data-x="">T</code>" is replaced by a space, it must be a single space
    character. The string "<code data-x="">2001-12-21&nbsp;&nbsp;12:00Z</code>" (with two spaces
    between the components) would not be parsed successfully.</li>

    <li>To unambiguously identify a moment in time prior to the introduction of the Gregorian
    calendar (insofar as moments in time before the formation of UTC can be unambiguously
    identified), the date has to be first converted to the Gregorian calendar from the calendar in
    use at the time (e.g. from the Julian calendar). The date of Nero's birth is the 15th of
    December 37, in the Julian Calendar, which is the 13th of December 37 in the <span>proleptic
    Gregorian calendar</span>.</li> <!-- This might not be true. I can't find a reference that gives
    his birthday with an explicit statement about the calendar being used. However, it seems
    unlikely that it would be given in the Gregorian calendar, so I assume sites use the Julian one.
    -->

    <li>The time and time-zone offset components are not optional.</li>

    <li>Dates before the year one can't be represented as a datetime in this version of HTML.</li>

    <li>Times of specific events in ancient times are, at best, approximations, since time was not
    well coordinated or measured until relatively recent decades.</li>

    <li>Time-zone offsets differ based on daylight saving time.</li>

   </ul>

  </div>

  <div w-nodev>

  <p>The rules to <dfn>parse a global date and time string</dfn> are as follows. This will return
  either a time in UTC, with associated time-zone offset information for round-tripping or display
  purposes, or nothing. If at any point the algorithm says that it "fails", this means that it is
  aborted at that point and returns nothing.</p>

  <ol>
   <li><p>Let <var>input</var> be the string being parsed.</p></li>

   <li><p>Let <var>position</var> be a pointer into <var>input</var>, initially
   pointing at the start of the string.</p></li>

   <li><p><span>Parse a date component</span> to obtain <var>year</var>, <var>month</var>, and <var>day</var>. If this returns nothing, then fail.</p>

   <li><p>If <var>position</var> is beyond the end of <var>input</var> or if the
   character at <var>position</var> is neither a U+0054 LATIN CAPITAL LETTER T character
   (T) nor a U+0020 SPACE character, then fail. Otherwise, move <var>position</var>
   forwards one character.</p></li>

   <li><p><span>Parse a time component</span> to obtain <var>hour</var>, <var>minute</var>, and <var>second</var>. If this returns nothing, then fail.</p>

   <li><p>If <var>position</var> is beyond the end of <var>input</var>, then
   fail.</p></li>

   <li><p><span>Parse a time-zone offset component</span> to obtain <var>timezone<sub>hours</sub></var> and <var>timezone<sub>minutes</sub></var>. If this
   returns nothing, then fail.</p>

   <li><p>If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.</p></li>

   <li><p>Let <var>time</var> be the moment in time at year <var>year</var>, month
   <var>month</var>, day <var>day</var>, hours <var>hour</var>, minute
   <var>minute</var>, second <var>second</var>, subtracting <var>timezone<sub>hours</sub></var> hours and <var>timezone<sub>minutes</sub></var> minutes. That moment in time is a moment in the UTC time
   zone.</p></li>

   <li><p>Let <var>timezone</var> be <var>timezone<sub>hours</sub></var>
   hours and <var>timezone<sub>minutes</sub></var> minutes from UTC.</p></li>

   <li><p>Return <var>time</var> and <var>timezone</var>.</p></li>
  </ol>

  </div>


  <h5>Weeks</h5>

  <p>A <dfn data-x="concept-week">week</dfn> consists of a week-year number and a week number
  representing a seven-day period starting on a Monday. Each week-year in this calendaring system
  has either 52 or 53 such seven-day periods, as defined below. The seven-day period starting on the
  Gregorian date Monday December 29th 1969 (1969-12-29) is defined as week number 1 in week-year
  1970. Consecutive weeks are numbered sequentially. The week before the number 1 week in a
  week-year is the last week in the previous week-year, and vice versa. <ref spec=GREGORIAN></p>

  <p>A week-year with a number <var>year</var> has 53 weeks if it corresponds to either a
  year <var>year</var> in the <span>proleptic Gregorian calendar</span> that has a Thursday
  as its first day (January 1st), or a year <var>year</var> in the <span>proleptic
  Gregorian calendar</span> that has a Wednesday as its first day (January 1st) and where <var>year</var> is a number divisible by 400, or a number divisible by 4 but not by 100. All
  other week-years have 52 weeks.</p>

  <p>The <dfn>week number of the last day</dfn> of a week-year with 53 weeks is 53; the week number
  of the last day of a week-year with 52 weeks is 52.</p>

  <p class="note">The week-year number of a particular day can be different than the number of the
  year that contains that day in the <span>proleptic Gregorian calendar</span>. The first week in a
  week-year <var>y</var> is the week that contains the first Thursday of the Gregorian year
  <var>y</var>.</p>

  <p class="note">For modern purposes, a <span data-x="concept-week">week</span> as defined here is
  equivalent to ISO weeks as defined in ISO 8601. <ref spec=ISO8601></p>

  <p>A string is a <dfn>valid week string</dfn> representing a week-year <var>year</var>
  and week <var>week</var> if it consists of the following components in the given
  order:</p>

  <ol>
   <li>Four or more <span>ASCII digits</span>, representing <var>year</var>, where <var>year</var>&nbsp;&gt;&nbsp;0</li>

   <li>A U+002D HYPHEN-MINUS character (-)</li>

   <li>A U+0057 LATIN CAPITAL LETTER W character (W)</li>

   <li>Two <span>ASCII digits</span>, representing the week <var>week</var>, in the range
   1&nbsp;&le;&nbsp;<var>week</var>&nbsp;&le;&nbsp;<var>maxweek</var>, where <var>maxweek</var> is the <span>week number of the last day</span> of week-year <var>year</var></li>
  </ol>

  <div w-nodev>

  <p>The rules to <dfn>parse a week string</dfn> are as follows. This will return either a week-year
  number and week number, or nothing. If at any point the algorithm says that it "fails", this means
  that it is aborted at that point and returns nothing.</p>

  <ol>
   <li><p>Let <var>input</var> be the string being parsed.</p></li>

   <li><p>Let <var>position</var> be a pointer into <var>input</var>, initially
   pointing at the start of the string.</p></li>

   <li><p><span>Collect a sequence of code points</span> that are <span>ASCII digits</span> from
   <var>input</var> given <var>position</var>. If the collected sequence is not at least four
   characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten integer.
   Let that number be the <var>year</var>.</p></li>

   <li><p>If <var>year</var> is not a number greater than zero, then fail.</p></li>

   <li><p>If <var>position</var> is beyond the end of <var>input</var> or if the
   character at <var>position</var> is not a U+002D HYPHEN-MINUS character, then fail.
   Otherwise, move <var>position</var> forwards one character.</p></li>

   <li><p>If <var>position</var> is beyond the end of <var>input</var> or if the
   character at <var>position</var> is not a U+0057 LATIN CAPITAL LETTER W character (W),
   then fail. Otherwise, move <var>position</var> forwards one character.</p></li>

   <li><p><span>Collect a sequence of code points</span> that are <span>ASCII digits</span> from
   <var>input</var> given <var>position</var>. If the collected sequence is not exactly two
   characters long, then fail. Otherwise, interpret the resulting sequence as a base-ten integer.
   Let that number be the <var>week</var>.</p></li>

   <li><p>Let <var>maxweek</var> be the <span>week number of the last day</span> of year
   <var>year</var>.</p></li>

   <li><p>If <var>week</var> is not a number in the range 1&nbsp;&le;&nbsp;<var>week</var>&nbsp;&le;&nbsp;<var>maxweek</var>, then fail.</p></li>

   <li><p>If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.</p></li>

   <li><p>Return the week-year number <var>year</var> and the week number <var>week</var>.</p></li>
  </ol>

  </div>


  <h5>Durations</h5>

  <!-- if you add support for year and month durations, then search for MONTHS throughout the spec
  (not just this section) for things that have to change -->

  <p>A <dfn data-x="concept-duration">duration</dfn> consists of <!--MONTHS: either a number of
  months or--> a number of seconds.</p>

  <p class="note">Since months and seconds are not comparable (a month is not a precise number of
  seconds, but is instead a period whose exact length depends on the precise day from which it is
  measured) a <span data-x="concept-duration">duration</span> as defined in this specification cannot
  <!--MONTHS: consist of a mixture of both--> include months (or years, which are equivalent to
  twelve months). Only durations that describe a specific number of seconds can be described.</p>

  <p>A string is a <dfn>valid duration string</dfn> representing a <span
  data-x="concept-duration">duration</span> <var>t</var> if it consists of either of the
  following:</p>

  <ul>

   <li>
    <!-- The ISO format -->

    <!-- NOTE: ISO durations also have a number of formats we do not
         consider conforming:

         - a "week" format (e.g. P4W). This one is actually supported
           by the parser.

         - P<date>T<time>, with or without hyphens

         - All these formats, with commas instead of periods for the
           seconds decimal

    -->

    <p>A literal U+0050 LATIN CAPITAL LETTER P character followed by one or more of the following
    subcomponents, in the order given, where <!--the number of years, if any, multiplied by twelve,
    plus the number of months, if any, equals the number of months in <var>t</var>, if the
    duration is in months; or, if it is in seconds, -->the number of days, hours, minutes, and
    seconds corresponds to the same number of seconds as in <var>t</var>:</p>

    <ol>
<!--MONTHS:
     <li><p>One or more <span>ASCII digits</span> followed by a U+0059 LATIN CAPITAL LETTER Y
     character, representing a number of years.</p></li>

     <li><p>One or more <span>ASCII digits</span> followed by a U+004D LATIN CAPITAL LETTER M
     character, representing a number of months.</p></li>
-->

     <li><p>One or more <span>ASCII digits</span> followed by a U+0044 LATIN CAPITAL LETTER D
     character, representing a number of days.</p></li>

     <li>
      <p>A U+0054 LATIN CAPITAL LETTER T character followed by one or more of the following
      subcomponents, in the order given:</p>

      <ol>
       <li><p>One or more <span>ASCII digits</span> followed by a U+0048 LATIN CAPITAL LETTER H
       character, representing a number of hours.</p></li>

       <li><p>One or more <span>ASCII digits</span> followed by a U+004D LATIN CAPITAL LETTER M
       character, representing a number of minutes.</p></li>

       <li>
        <p>The following components:</p>

        <ol>
         <li><p>One or more <span>ASCII digits</span>, representing a number of seconds.</p></li>

         <li><p>Optionally, a U+002E FULL STOP character (.) followed by one, two, or three
         <span>ASCII digits</span>, representing a fraction of a second.</p></li>

         <li><p>A U+0053 LATIN CAPITAL LETTER S character.</p></li>
        </ol>
       </li>
      </ol>
     </li>
    </ol>

    <p class="note">This, as with a number of other date- and time-related microsyntaxes defined in
    this specification, is based on one of the formats defined in ISO 8601. <ref spec=ISO8601></p>
   </li>

   <li>
    <p>One or more <span data-x="duration time component">duration time components</span>, each with
    a different <span>duration time component scale</span>, in any order; the sum of the represented
    seconds being equal to the number of seconds in <var>t</var>.</p>

    <p>A <dfn>duration time component</dfn> is a string consisting of the following components:</p>

    <ol>
     <li><p>Zero or more <span>ASCII whitespace</span>.</p></li>

     <li><p>One or more <span>ASCII digits</span>, representing a number of time units, scaled by
     the <span>duration time component scale</span> specified (see below) to represent a number of
     seconds.</p></li>

     <li><p>If the <span>duration time component scale</span> specified is 1 (i.e. the units are
     seconds), then, optionally, a U+002E FULL STOP character (.) followed by one, two, or three
     <span>ASCII digits</span>, representing a fraction of a second.</p></li>

     <li><p>Zero or more <span>ASCII whitespace</span>.</p></li>

     <li>
      <p>One of the following characters, representing the <dfn>duration time component scale</dfn>
      of the time unit used in the numeric part of the <span>duration time component</span>:</p>

      <dl>
       <dt>U+0057 LATIN CAPITAL LETTER W character</dt>
       <dt>U+0077 LATIN SMALL LETTER W character</dt>

       <dd>Weeks. The scale is 604800.</dd>

       <dt>U+0044 LATIN CAPITAL LETTER D character</dt>
       <dt>U+0064 LATIN SMALL LETTER D character</dt>

       <dd>Days. The scale is 86400.</dd>

       <dt>U+0048 LATIN CAPITAL LETTER H character</dt>
       <dt>U+0068 LATIN SMALL LETTER H character</dt>

       <dd>Hours. The scale is 3600.</dd>

       <dt>U+004D LATIN CAPITAL LETTER M character</dt>
       <dt>U+006D LATIN SMALL LETTER M character</dt>

       <dd>Minutes. The scale is 60.</dd>

       <dt>U+0053 LATIN CAPITAL LETTER S character</dt>
       <dt>U+0073 LATIN SMALL LETTER S character</dt>

       <dd>Seconds. The scale is 1.</dd>
      </dl>
     </li>

     <li><p>Zero or more <span>ASCII whitespace</span>.</p></li>
    </ol>

    <p class="note">This is not based on any of the formats in ISO 8601. It is intended to be a more
    human-readable alternative to the ISO 8601 duration format.</p>
   </li>

  </ul>

  <div w-nodev>

  <p>The rules to <dfn>parse a duration string</dfn> are as follows. This will return either a <span
  data-x="concept-duration">duration</span> or nothing. If at any point the algorithm says that it
  "fails", this means that it is aborted at that point and returns nothing.</p>

  <ol>
   <!--MONTHS: this algorithm actually already parses months adequately, though it would need
   tweaking if we introduced a "mo" unit for the non-ISO variant. See other "MONTHS" annotations
   below. -->

   <li><p>Let <var>input</var> be the string being parsed.</p></li>

   <li><p>Let <var>position</var> be a pointer into <var>input</var>, initially
   pointing at the start of the string.</p></li>

   <li><p>Let <var>months</var>, <var>seconds</var>, and <var>component
   count</var> all be zero.</p></li>

   <li>
    <p>Let <var>M-disambiguator</var> be <i>minutes</i>.</p>

    <!--MONTHS: this note would change-->
    <p class="note">This flag's other value is <i>months</i>. It is used to disambiguate the "M"
    unit in ISO8601 durations, which use the same unit for months and minutes. Months are not
    allowed, but are parsed for future compatibility and to avoid misinterpreting ISO8601 durations
    that would be valid in other contexts.</p>
   </li>

   <li><p><span>Skip ASCII whitespace</span> within <var>input</var> given
   <var>position</var>.</p></li>

   <li><p>If <var>position</var> is past the end of <var>input</var>, then
   fail.</p></li>

   <li><p>If the character in <var>input</var> pointed to by <var>position</var> is a U+0050 LATIN
   CAPITAL LETTER P character, then advance <var>position</var> to the next character, set
   <var>M-disambiguator</var> to <i>months</i>, and <span>skip ASCII whitespace</span> within
   <var>input</var> given <var>position</var>.</p></li>

   <li>
    <p>While true:</p>

    <ol>
     <li><p>Let <var>units</var> be undefined. It will be assigned one of the following
     values: <i>years</i>, <i>months</i>, <i>weeks</i>, <i>days</i>, <i>hours</i>, <i>minutes</i>,
     and <i>seconds</i>.</p></li>

     <li><p>Let <var>next character</var> be undefined. It is used to process characters
     from the <var>input</var>.</p></li>

     <li><p>If <var>position</var> is past the end of <var>input</var>, then break.</p></li>

     <li><p>If the character in <var>input</var> pointed to by <var>position</var> is a U+0054 LATIN
     CAPITAL LETTER T character, then advance <var>position</var> to the next character, set
     <var>M-disambiguator</var> to <i>minutes</i>, <span>skip ASCII whitespace</span> within
     <var>input</var> given <var>position</var>, and <span>continue</span>.</p></li>

     <li><p>Set <var>next character</var> to the character in <var>input</var>
     pointed to by <var>position</var>.</p></li>

     <li>
      <p>If <var>next character</var> is a U+002E FULL STOP character (.), then let <var>N</var> equal zero. (Do not advance <var>position</var>. That is taken care
      of below.)</p>

      <p>Otherwise, if <var>next character</var> is an <span data-x="ASCII digits">ASCII
      digit</span>, then <span>collect a sequence of code points</span> that are <span>ASCII
      digits</span> from <var>input</var> given <var>position</var>, interpret the resulting
      sequence as a base-ten integer, and let <var>N</var> be that number.</p>

      <p>Otherwise <var>next character</var> is not part of a number; fail.</p>
     </li>

     <li><p>If <var>position</var> is past the end of <var>input</var>, then
     fail.</p></li>

     <li><p>Set <var>next character</var> to the character in <var>input</var>
     pointed to by <var>position</var>, and this time advance <var>position</var>
     to the next character. (If <var>next character</var> was a U+002E FULL STOP character
     (.) before, it will still be that character this time.)</p></li>

     <li>
      <p>If <var>next character</var> is U+002E (.), then:</p>

      <ol>
       <li><p><span>Collect a sequence of code points</span> that are <span>ASCII digits</span> from
       <var>input</var> given <var>position</var>. Let <var>s</var> be the resulting
       sequence.</p></li>

       <li><p>If <var>s</var> is the empty string, then fail.</p></li>

       <li><p>Let <var>length</var> be the number of characters in <var>s</var>.</p></li>

       <li><p>Let <var>fraction</var> be the result of interpreting <var>s</var>
       as a base-ten integer, and then dividing that number by <span data-x="">10<sup><var>length</var></sup></span>.</li>

       <li><p>Increment <var>N</var> by <var>fraction</var>.</p></li>

       <li><p><span>Skip ASCII whitespace</span> within <var>input</var> given
       <var>position</var>.</p></li>

       <li><p>If <var>position</var> is past the end of <var>input</var>, then
       fail.</p></li>

       <li><p>Set <var>next character</var> to the character in <var>input</var>
       pointed to by <var>position</var>, and advance <var>position</var> to the
       next character.</p></li>

       <li><p>If <var>next character</var> is neither a U+0053 LATIN CAPITAL LETTER S
       character nor a U+0073 LATIN SMALL LETTER S character, then fail.</p></li>

       <li><p>Set <var>units</var> to <i>seconds</i>.</p></li>
      </ol>

      <p>Otherwise:</p>

      <ol>
       <li><p>If <var>next character</var> is <span>ASCII whitespace</span>, then <span>skip ASCII
       whitespace</span> within <var>input</var> given <var>position</var>, set <var>next
       character</var> to the character in <var>input</var> pointed to by <var>position</var>, and
       advance <var>position</var> to the next character.</p></li>

       <li>
        <!--MONTHS: this would probably be where we would add more
        logic to support a new unit like 'mo' -->

        <p>If <var>next character</var> is a U+0059 LATIN CAPITAL LETTER Y character, or a
        U+0079 LATIN SMALL LETTER Y character, set <var>units</var> to <i>years</i> and set
        <var>M-disambiguator</var> to <i>months</i>.</p>

        <p>If <var>next character</var> is a U+004D LATIN CAPITAL LETTER M character or a
        U+006D LATIN SMALL LETTER M character, and <var>M-disambiguator</var> is
        <i>months</i>, then set <var>units</var> to <i>months</i>.</p>

        <p>If <var>next character</var> is a U+0057 LATIN CAPITAL LETTER W character or a
        U+0077 LATIN SMALL LETTER W character, set <var>units</var> to <i>weeks</i> and set
        <var>M-disambiguator</var> to <i>minutes</i>.</p>

        <p>If <var>next character</var> is a U+0044 LATIN CAPITAL LETTER D character or a
        U+0064 LATIN SMALL LETTER D character, set <var>units</var> to <i>days</i> and set
        <var>M-disambiguator</var> to <i>minutes</i>.</p>

        <p>If <var>next character</var> is a U+0048 LATIN CAPITAL LETTER H character or a
        U+0068 LATIN SMALL LETTER H character, set <var>units</var> to <i>hours</i> and set
        <var>M-disambiguator</var> to <i>minutes</i>.</p>

        <p>If <var>next character</var> is a U+004D LATIN CAPITAL LETTER M character or a
        U+006D LATIN SMALL LETTER M character, and <var>M-disambiguator</var> is
        <i>minutes</i>, then set <var>units</var> to <i>minutes</i>.</p>

        <p>If <var>next character</var> is a U+0053 LATIN CAPITAL LETTER S character or a
        U+0073 LATIN SMALL LETTER S character, set <var>units</var> to <i>seconds</i> and
        set <var>M-disambiguator</var> to <i>minutes</i>.</p>

        <p>Otherwise if <var>next character</var> is none of the above characters, then
        fail.</p>
       </li>
      </ol>
     </li>

     <li><p>Increment <var>component count</var>.</p></li>

     <li><p>Let <var>multiplier</var> be 1.</p></li>

     <li><p>If <var>units</var> is <i>years</i>, multiply <var>multiplier</var> by
     12 and set <var>units</var> to <i>months</i>.</p></li>

     <li>
      <p>If <var>units</var> is <i>months</i>, add the product of <var>N</var> and
      <var>multiplier</var> to <var>months</var>.</p>

      <p>Otherwise:</p>

      <ol>
       <li><p>If <var>units</var> is <i>weeks</i>, multiply <var>multiplier</var>
       by 7 and set <var>units</var> to <i>days</i>.</p></li>

       <li><p>If <var>units</var> is <i>days</i>, multiply <var>multiplier</var>
       by 24 and set <var>units</var> to <i>hours</i>.</p></li>

       <li><p>If <var>units</var> is <i>hours</i>, multiply <var>multiplier</var>
       by 60 and set <var>units</var> to <i>minutes</i>.</p></li>

       <li><p>If <var>units</var> is <i>minutes</i>, multiply <var>multiplier</var> by 60 and set <var>units</var> to <i>seconds</i>.</p></li>

       <li><p>Forcibly, <var>units</var> is now <i>seconds</i>. Add the product of <var>N</var> and <var>multiplier</var> to <var>seconds</var>.</p></li>
      </ol>
     </li>

     <li><p><span>Skip ASCII whitespace</span> within <var>input</var> given
     <var>position</var>.</p></li>
    </ol>
   </li>

   <li><p>If <var>component count</var> is zero,
   fail.</p></li>

   <!--MONTHS: if we add month support this is where you'd return them-->
   <li><p>If <var>months</var> is not zero, fail.</p></li>

   <li><p>Return the <span data-x="concept-duration">duration</span> consisting of <var>seconds</var> seconds.</p></li>
  </ol>

  </div>


  <h5>Vaguer moments in time</h5>

  <p>A string is a <dfn>valid date string with optional time</dfn> if
  it is also one of the following:</p>

  <ul>

   <li>A <span>valid date string</span></li>

   <li>A <span>valid global date and time string</span></li>

  </ul>

  <div w-nodev>

  <hr>

  <p>The rules to <dfn>parse a date or time string</dfn> are as follows. The algorithm will return
  either a <span data-x="concept-date">date</span>, a <span data-x="concept-time">time</span>, a <span
  data-x="concept-datetime">global date and time</span>, or nothing. If at any point the algorithm
  says that it "fails", this means that it is aborted at that point and returns nothing.</p>

  <ol>
   <li><p>Let <var>input</var> be the string being parsed.</p></li>

   <li><p>Let <var>position</var> be a pointer into <var>input</var>, initially
   pointing at the start of the string.</p></li>

   <li><p>Set <var>start position</var> to the same position as <var>position</var>.</p></li>

   <li><p>Set the <var>date present</var> and <var>time present</var> flags to
   true.</p></li>

   <li><p><span>Parse a date component</span> to obtain <var>year</var>, <var>month</var>, and <var>day</var>. If this fails, then set the <var>date
   present</var> flag to false.</p>

   <li>
    <p>If <var>date present</var> is true, and <var>position</var> is not beyond
    the end of <var>input</var>, and the character at <var>position</var> is
    either a U+0054 LATIN CAPITAL LETTER T character (T) or a U+0020 SPACE character, then advance
    <var>position</var> to the next character in <var>input</var>.</p>

    <p>Otherwise, if <var>date present</var> is true, and either <var>position</var> is beyond the end of <var>input</var> or the character at <var>position</var> is neither a U+0054 LATIN CAPITAL LETTER T character (T) nor a U+0020
    SPACE character, then set <var>time present</var> to false.</p>

    <p>Otherwise, if <var>date present</var> is false, set <var>position</var>
    back to the same position as <var>start position</var>.</p>
   </li>

   <li><p>If the <var>time present</var> flag is true, then <span>parse a time
   component</span> to obtain <var>hour</var>, <var>minute</var>, and <var>second</var>. If this returns nothing, then fail.</p></li>

   <li><p>If the <var>date present</var> and <var>time present</var> flags are
   both true, but <var>position</var> is beyond the end of <var>input</var>, then
   fail.</p></li>

   <li><p>If the <var>date present</var> and <var>time present</var> flags are
   both true, <span>parse a time-zone offset component</span> to obtain <var>timezone<sub>hours</sub></var> and <var>timezone<sub>minutes</sub></var>. If this
   returns nothing, then fail.</p>

   <li><p>If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.</p></li>

   <li>
    <p>If the <var>date present</var> flag is true and the <var>time present</var>
    flag is false, then let <var>date</var> be the date with year <var>year</var>,
    month <var>month</var>, and day <var>day</var>, and return <var>date</var>.</p>

    <p>Otherwise, if the <var>time present</var> flag is true and the <var>date
    present</var> flag is false, then let <var>time</var> be the time with hour <var>hour</var>, minute <var>minute</var>, and second <var>second</var>,
    and return <var>time</var>.</p>

    <p>Otherwise, let <var>time</var> be the moment in time at year <var>year</var>, month <var>month</var>, day <var>day</var>, hours <var>hour</var>, minute <var>minute</var>, second <var>second</var>,
    subtracting <var>timezone<sub>hours</sub></var> hours and <var>timezone<sub>minutes</sub></var> minutes, that moment in time being a moment
    in the UTC time zone; let <var>timezone</var> be <var>timezone<sub>hours</sub></var> hours and <var>timezone<sub>minutes</sub></var>
    minutes from UTC; and return <var>time</var> and <var>timezone</var>.</p>
   </li>
  </ol>

  </div>


  <!--en-GB--><h4 id="colours">Colors</h4>

  <p>A <!--en-GB--><dfn id="simple-colour">simple color</dfn> consists of three 8-bit numbers in the
  range 0 to 255, inclusive, representing the red, green, and blue components of the color
  respectively, in the <span>'srgb'</span> color space.</p>

  <p>A string is a <!--en-GB--><dfn id="valid-simple-colour">valid simple color</dfn> if it is
  exactly seven characters long, and the first character is a U+0023 NUMBER SIGN character (#), and
  the remaining six characters are all <span>ASCII hex digits</span>, with the first two digits
  representing the red component, the middle two digits representing the green component, and the
  last two digits representing the blue component, in hexadecimal.</p>

  <p>A string is a <!--en-GB--><dfn id="valid-lowercase-simple-colour">valid lowercase simple
  color</dfn> if it is a <span>valid simple color</span> and doesn't use any characters in the range
  U+0041 LATIN CAPITAL LETTER A to U+0046 LATIN CAPITAL LETTER F.</p>

  <div w-nodev>

  <p>The <!--en-GB--><dfn id="rules-for-parsing-simple-colour-values">rules for parsing simple color
  values</dfn> are as given in the following algorithm. When invoked, the steps must be followed in
  the order given, aborting at the first step that returns a value. This algorithm will return
  either a <span>simple color</span> or an error.</p>

  <ol>
   <li><p>Let <var>input</var> be the string being parsed.</p></li>

   <li><p>If <var>input</var> is not exactly seven characters long, then return an
   error.</p></li>

   <li><p>If the first character in <var>input</var> is not a U+0023 NUMBER SIGN character
   (#), then return an error.</p></li>

   <li><p>If the last six characters of <var>input</var> are not all <span>ASCII hex
   digits</span>, then return an error.</p></li>

   <li><p>Let <var>result</var> be a <span>simple color</span>.</p>

   <li><p>Interpret the second and third characters as a hexadecimal number and let the result be
   the red component of <var>result</var>.</p>

   <li><p>Interpret the fourth and fifth characters as a hexadecimal number and let the result be
   the green component of <var>result</var>.</p>

   <li><p>Interpret the sixth and seventh characters as a hexadecimal number and let the result be
   the blue component of <var>result</var>.</p>

   <li><p>Return <var>result</var>.</p>
  </ol>

  <p>The <!--en-GB--><dfn id="rules-for-serialising-simple-colour-values">rules for serializing
  simple color values</dfn> given a <span>simple color</span> are as given in the following
  algorithm:</p>

  <ol>
   <li><p>Let <var>result</var> be a string consisting of a single U+0023 NUMBER SIGN
   character (#).</p></li>

   <li><p>Convert the red, green, and blue components in turn to two-digit hexadecimal numbers using
   <span data-x="ASCII lower hex digit">ASCII lower hex digits</span>, zero-padding if necessary,
   and append these numbers to <var>result</var>, in the order red, green, blue.</p>

   <li><p>Return <var>result</var>, which will be a <span>valid lowercase simple
   color</span>.</p></li>
  </ol>

  <hr>

  <p>Some obsolete legacy attributes parse colors in a more complicated manner, using the
  <!--en-GB--><dfn id="rules-for-parsing-a-legacy-colour-value">rules for parsing a legacy color
  value</dfn>, which are given in the following algorithm. When invoked, the steps must be followed
  in the order given, aborting at the first step that returns a value. This algorithm will return
  either a <span>simple color</span> or an error.</p>

  <ol>
   <li><p>Let <var>input</var> be the string being parsed.</p></li>

   <li><p>If <var>input</var> is the empty string, then return an error.</p></li>

   <li><p><span>Strip leading and trailing ASCII whitespace</span> from <var>input</var>.</p></li>

   <li><p>If <var>input</var> is an <span>ASCII case-insensitive</span> match for the
   string "<code data-x="">transparent</code>", then return an error.</p></li>

   <li>
    <p>If <var>input</var> is an <span>ASCII case-insensitive</span> match for one of the
    <span data-x="named color">named colors</span>, then return the <span>simple
    color</span> corresponding to that keyword. <ref spec=CSSCOLOR></p>

    <p class="note"><a
    href="https://www.w3.org/TR/css3-color/#css2-system">CSS2 System
    Colors</a> are not recognized.</p>
   </li>

   <li>
    <p>If <var>input</var>'s <span>code point length</span> is four, and the first character in
    <var>input</var> is U+0023 (#), and the last three characters of <var>input</var> are all
    <span>ASCII hex digits</span>, then:</p>

    <ol>
     <li><p>Let <var>result</var> be a <span>simple color</span>.</p>

     <li><p>Interpret the second character of <var>input</var> as a hexadecimal digit; let
     the red component of <var>result</var> be the resulting number multiplied by 17.</p>

     <li><p>Interpret the third character of <var>input</var> as a hexadecimal digit; let
     the green component of <var>result</var> be the resulting number multiplied by 17.</p>

     <li><p>Interpret the fourth character of <var>input</var> as a hexadecimal digit; let
     the blue component of <var>result</var> be the resulting number multiplied by 17.</p>

     <li><p>Return <var>result</var>.</p>
    </ol>
   </li>

   <li><p>Replace any <span data-x="code point">code points</span> greater than U+FFFF in
   <var>input</var> (i.e., any characters that are not in the basic multilingual plane) with the
   two-character string "<code data-x="">00</code>".</p></li>

   <li><p>If <var>input</var>'s <span>code point length</span> is greater than 128, truncate
   <var>input</var>, leaving only the first 128 characters.</p></li>

   <li><p>If the first character in <var>input</var> is a U+0023 NUMBER SIGN character (#),
   remove it.</p></li>

   <li><p>Replace any character in <var>input</var> that is not an <span data-x="ASCII hex
   digits">ASCII hex digit</span> with the character U+0030 DIGIT ZERO (0).</p></li>

   <li><p>While <var>input</var>'s <span>code point length</span> is zero or not a multiple of
   three, append a U+0030 DIGIT ZERO (0) character to <var>input</var>.</p></li>

   <li><p>Split <var>input</var> into three strings of equal <span>code point length</span>, to
   obtain three components. Let <var>length</var> be the <span>code point length</span> that all of
   those components have (one third the <span>code point length</span> of <var>input</var>).</p></li>

   <li><p>If <var>length</var> is greater than 8, then remove the leading <span
   data-x=""><var>length</var>-8</span> characters in each component, and let <var>length</var> be 8.</p></li>

   <li><p>While <var>length</var> is greater than two and the first character in each
   component is a U+0030 DIGIT ZERO (0) character, remove that character and reduce <var>length</var> by one.</p></li>

   <li><p>If <var>length</var> is <em>still</em> greater than two, truncate each component,
   leaving only the first two characters in each.</p></li>

   <li><p>Let <var>result</var> be a <span>simple color</span>.</p>

   <li><p>Interpret the first component as a hexadecimal number; let the red component of <var>result</var> be the resulting number.</p></li>

   <li><p>Interpret the second component as a hexadecimal number; let the green component of <var>result</var> be the resulting number.</p></li>

   <li><p>Interpret the third component as a hexadecimal number; let the blue component of <var>result</var> be the resulting number.</p></li>

   <li><p>Return <var>result</var>.</p>
  </ol>

  </div>

  <hr>

  <p class="note">The <span data-x="canvas-context-2d">2D graphics context</span> has a separate
  color syntax that also handles opacity.</p>



  <h4>Space-separated tokens</h4>

  <p>A <dfn export>set of space-separated tokens</dfn> is a string containing zero or more words
  (known as tokens) separated by one or more <span>ASCII whitespace</span>, where words consist of
  any string of one or more characters, none of which are <span>ASCII whitespace</span>.</p>

  <p>A string containing a <span>set of space-separated tokens</span> may have leading or trailing
  <span>ASCII whitespace</span>.</p>

  <p>An <dfn export>unordered set of unique space-separated tokens</dfn> is a <span>set of
  space-separated tokens</span> where none of the tokens are duplicated.</p>

  <p>An <dfn>ordered set of unique space-separated tokens</dfn> is a <span>set of space-separated
  tokens</span> where none of the tokens are duplicated but where the order of the tokens is
  meaningful.</p>

  <p><span data-x="set of space-separated tokens">Sets of space-separated tokens</span> sometimes
  have a defined set of allowed values. When a set of allowed values is defined, the tokens must all
  be from that list of allowed values; other values are non-conforming. If no such set of allowed
  values is provided, then all values are conforming.</p>

  <p class="note">How tokens in a <span>set of space-separated tokens</span> are to be compared
  (e.g. case-sensitively or not) is defined on a per-set basis.</p>



  <h4>Comma-separated tokens</h4>

  <p>A <dfn>set of comma-separated tokens</dfn> is a string containing zero or more tokens each
  separated from the next by a single U+002C COMMA character (,), where tokens consist of any string
  of zero or more characters, neither beginning nor ending with <span>ASCII whitespace</span>, nor
  containing any U+002C COMMA characters (,), and optionally surrounded by <span>ASCII
  whitespace</span>.</p>

  <p class="example">For instance, the string "<code
  data-x="">&nbsp;a&nbsp;,b,,d&nbsp;d&nbsp;</code>" consists of four tokens: "a", "b", the empty
  string, and "d&nbsp;d". Leading and trailing whitespace around each token doesn't count as part of
  the token, and the empty string can be a token.</p>

  <p><span data-x="set of comma-separated tokens">Sets of comma-separated tokens</span> sometimes
  have further restrictions on what consists a valid token. When such restrictions are defined, the
  tokens must all fit within those restrictions; other values are non-conforming. If no such
  restrictions are specified, then all values are conforming.</p>



  <h4 id="syntax-references">References</h4>

  <p>A <dfn>valid hash-name reference</dfn> to an element of type <var>type</var> is a
  string consisting of a U+0023 NUMBER SIGN character (#) followed by a string which exactly matches
  the value of the <code data-x="">name</code> attribute of an element with type <var>type</var> in
  the same <span>tree</span>.</p>

  <div w-nodev>

  <p>The <dfn>rules for parsing a hash-name reference</dfn> to an element of type <var>type</var>,
  given a context node <var>scope</var>, are as follows:</p>

  <ol>
   <li><p>If the string being parsed does not contain a U+0023 NUMBER SIGN character, or if the
   first such character in the string is the last character in the string, then return null.</p></li>

   <li><p>Let <var>s</var> be the string from the character immediately after the first
   U+0023 NUMBER SIGN character in the string being parsed up to the end of that string.</p></li>

   <li>
    <p>Return the first element of type <var>type</var> in <var>scope</var>'s <span>tree</span>, in
    <span>tree order</span>, that has an <code data-x="attr-id">id</code> or <code
    data-x="">name</code> attribute whose value is <var>s</var>, or null if there is no such
    element.</p>

    <p class="note">Although <code data-x="attr-id">id</code> attributes are accounted for when
    parsing, they are not used in determining whether a value is a <span><em>valid</em> hash-name
    reference</span>. That is, a hash-name reference that refers to an element based on <code
    data-x="attr-id">id</code> is a conformance error (unless that element also has a <code
    data-x="">name</code> attribute with the same value).</p>
   </li>

   <!-- History behind case-sensitive matching above: https://github.com/whatwg/html/issues/1666 -->
  </ol>

  </div>


  <h4 id="mq">Media queries</h4>

  <p>A string is a <dfn>valid media query list</dfn> if it matches the <code
  data-x="">&lt;media-query-list&gt;</code> production of <cite>Media Queries</cite>. <ref spec=MQ></p>

  <p>A string <dfn>matches the environment</dfn> of the user if it is the empty string, a string
  consisting of only <span>ASCII whitespace</span>, or is a media query list that matches the user's
  environment according to the definitions given in <cite>Media Queries</cite>. <ref
  spec=MQ></p>


  <h4 id="unique-values">Unique internal values</h4>

  <p>A <dfn>unique internal value</dfn> is a value that is serializable, comparable by value, and
  never exposed to script.</p>

  <p>To create a <dfn>new unique internal value</dfn>, return a <span>unique internal value</span>
  that has never previously been returned by this algorithm.</p>


  <h3 split-filename="urls-and-fetching">URLs</h3>

  <h4>Terminology</h4>

  <p>A string is a <dfn>valid non-empty URL</dfn> if it is a <span>valid URL string</span> but it is
  not the empty string.</p>

  <p>A string is a <dfn>valid URL potentially surrounded by spaces</dfn> if, after <span
  data-x="strip leading and trailing ASCII whitespace">stripping leading and trailing ASCII
  whitespace</span> from it, it is a <span>valid URL string</span>.</p>

  <p>A string is a <dfn>valid non-empty URL potentially surrounded by spaces</dfn> if, after <span
  data-x="strip leading and trailing ASCII whitespace">stripping leading and trailing ASCII
  whitespace</span> from it, it is a <span>valid non-empty URL</span>.</p>

  <p>This specification defines the URL <dfn><code>about:legacy-compat</code></dfn> as a reserved,
  though unresolvable, <code data-x="about protocol">about:</code> URL, for use in <span
  data-x="syntax-doctype">DOCTYPE</span>s in <span>HTML documents</span> when needed for
  compatibility with XML tools. <ref spec=ABOUT></p>

  <p>This specification defines the URL <dfn><code>about:html-kind</code></dfn> as a reserved,
  though unresolvable, <code data-x="about protocol">about:</code> URL, that is used as an
  identifier for kinds of media tracks. <ref spec=ABOUT></p>

  <p>This specification defines the URL <dfn><code>about:srcdoc</code></dfn> as a reserved, though
  unresolvable, <code data-x="about protocol">about:</code> URL, that is used as the <span
  data-x="concept-document-url">URL</span> of <span data-x="an iframe srcdoc
  document"><code>iframe</code> <code data-x="attr-iframe-srcdoc">srcdoc</code> documents</span>.
  <ref spec=ABOUT></p>

  <p>The <dfn>fallback base URL</dfn> of a <code>Document</code> object <var>document</var> is the
  <span>URL record</span> obtained by running these steps:</p>

  <ol>
   <li><p>If <var>document</var> is <span>an <code>iframe</code> <code
   data-x="attr-iframe-srcdoc">srcdoc</code> document</span>, then return <var>document</var>'s
   <span data-x="doc-container-document">container document</span>'s <span>document base
   URL</span>.</p></li>

   <li>
    <!-- https://www.hixie.ch/tests/adhoc/html/navigation/javascript-url/ -->

    <!-- this should be tested in the case of a browsing context that was navigated to about:blank
    after having been elsewhere, as opposed to the about:blank used at the time of the browsing
    context's creation. -->

    <p>If <var>document</var>'s <span data-x="concept-document-url">URL</span> is
    <code>about:blank</code>, and <var>document</var>'s <span data-x="concept-document-bc">browsing
    context</span>'s <span>creator base URL</span> is non-null, then return that <span>creator base
    URL</span>.</p>
   </li>

   <!-- https://www.hixie.ch/tests/adhoc/dom/level0/history/pushState/001/ -->

   <li><p>Return <var>document</var>'s <span data-x="concept-document-url">URL</span>.</p></li>
  </ol>

  <p>The <dfn export>document base URL</dfn> of a <code>Document</code> object is the
  <span>URL record</span> obtained by running these steps:</p>

  <ol>
   <li><p>If there is no <code>base</code> element that has an <code
   data-x="attr-base-href">href</code> attribute in the <code>Document</code>, then return the
   <code>Document</code>'s <span>fallback base URL</span>.</p></li>

   <li><p>Otherwise, return the <span>frozen base URL</span> of the first <code>base</code> element
   in the <code>Document</code> that has an <code data-x="attr-base-href">href</code> attribute, in
   <span>tree order</span>.</p></li>
  </ol>

  <p>A <span>URL</span> <dfn>matches <code>about:blank</code></dfn> if its <span
  data-x="concept-url-scheme">scheme</span> is "<code data-x="">about</code>", its <span
  data-x="concept-url-path">path</span> contains a single string "<code data-x="">blank</code>", its
  <span data-x="concept-url-username">username</span> and <span
  data-x="concept-url-password">password</span> are the empty string, and its <span
  data-x="concept-url-host">host</span> is null.</p>

  <p class="note">Such a URL's <span data-x="concept-url-query">query</span> and <span
  data-x="concept-url-fragment">fragment</span> can be non-null. For example, the <span>URL
  record</span> created by <span data-x="URL parser">parsing</span> "<code
  data-x="">about:blank?foo#bar</code>" <span>matches <code>about:blank</code></span>.</p>


  <div w-nodev>

  <h4 id="resolving-urls">Parsing URLs</h4>

  <p>Parsing a URL is the process of taking a string and obtaining the <span>URL record</span> that
  it represents. While this process is defined in <cite>URL</cite>, the HTML standard defines
  a wrapper for convenience. <ref spec=URL></p>

  <p class="note">This wrapper is only useful when the character encoding for the URL parser has to
  match that of the document or environment settings object for legacy reasons. When that is not the
  case the <span>URL parser</span> can be used directly.</p>

  <p id="resolve-a-url">To <dfn>parse a URL</dfn> <var>url</var>, relative to either a
  <var>document</var> or <var>environment settings object</var>, the user agent must use the
  following steps. Parsing a URL either results in failure or a <span>resulting URL string</span>
  and <span>resulting URL record</span>.</p>

  <ol>
   <li><p>Let <var>encoding</var> be <var>document</var>'s <span data-x="document's character
   encoding">character encoding</span>, if <var>document</var> was given, and <var>environment
   settings object</var>'s <span>API URL character encoding</span> otherwise.</p></li>

   <li><p>Let <var>baseURL</var> be <var>document</var>'s <span data-x="document base URL">base
   URL</span>, if <var>document</var> was given, and <var>environment settings object</var>'s
   <span>API base URL</span> otherwise.</p></li>

   <li><p>Let <var>urlRecord</var> be the result of applying the <span>URL parser</span> to
   <var>url</var>, with <var>baseURL</var> and <var>encoding</var>.</p></li>

   <li><p>If <var>urlRecord</var> is failure, then return failure.</p></li>

   <li><p>Let <var>urlString</var> be the result of applying the <span
   data-x="concept-url-serializer">URL serializer</span> to <var>urlRecord</var>.</p></li>

   <li><p>Return <var>urlString</var> as the <dfn>resulting URL string</dfn> and
   <var>urlRecord</var> as the <dfn>resulting URL record</dfn>.</p></li>
  </ol>

  </div>



  <div w-nodev>

  <h4>Dynamic changes to base URLs</h4>

  <p>When a document's <span>document base URL</span> changes, all elements in that document are
  <span>affected by a base URL change</span>.</p>

  <p>The following are <span>base URL change steps</span>, which run when an element is
  <span>affected by a base URL change</span> (as defined by <cite>DOM</cite>):</p>

  <dl class="switch">

   <dt>If the element creates a <span>hyperlink</span></dt>

   <dd>
    <p>If the <span>URL</span> identified by the hyperlink is being shown to the user, or if any
    data derived from that <span>URL</span> is affecting the display, then the <code
    data-x="attr-hyperlink-href">href</code> attribute should be <span data-x="parse a
    url">reparsed</span> relative to the element's <span>node document</span> and the UI updated
    appropriately.</p>

    <p class="example">For example, the CSS <code data-x="selector-link">:link</code>/<code
    data-x="selector-visited">:visited</code> <span data-x="pseudo-class">pseudo-classes</span>
    might have been affected.</p>

    <p>If the hyperlink has a <code data-x="attr-hyperlink-ping">ping</code> attribute and its
    <span data-x="URL">URL(s)</span> are being shown to the user, then the <code
    data-x="attr-hyperlink-ping">ping</code> attribute's tokens should be <span data-x="parse a
    url">reparsed</span> relative to the element's <span>node document</span> and the UI updated
    appropriately.</p>
   </dd>

   <dt>If the element is a <code>q</code>, <code>blockquote</code>, <code>ins</code>, or
   <code>del</code> element with a <code data-x="">cite</code> attribute</dt>

   <dd>
    <p>If the <span>URL</span> identified by the <code data-x="">cite</code> attribute is being
    shown to the user, or if any data derived from that <span>URL</span> is affecting the display,
    then the <span>URL</span> should be <span data-x="parse a url">reparsed</span> relative to the
    element's <span>node document</span> and the UI updated appropriately.</p>
   </dd>

   <dt>Otherwise</dt>

   <dd>
    <p>The element is not directly affected.</p>

    <p class="example">For instance, changing the base URL doesn't affect the image displayed by
    <code>img</code> elements, although subsequent accesses of the <code
    data-x="dom-img-src">src</code> IDL attribute from script will return a new <span>absolute
    URL</span> that might no longer correspond to the image being shown.</p>
   </dd>
  </dl>

  </div>


  <div w-nodev>

  <h3>Fetching resources</h3>

  <h4>Terminology</h4>

  <p>A <span data-x="concept-response">response</span> whose <span
  data-x="concept-response-type">type</span> is "<code data-x="">basic</code>", "<code
  data-x="">cors</code>", or "<code data-x="">default</code>" is <dfn
  export>CORS-same-origin</dfn>. <ref spec=FETCH></p>

  <p>A <span data-x="concept-response">response</span> whose <span
  data-x="concept-response-type">type</span> is "<code data-x="">opaque</code>" or "<code
  data-x="">opaqueredirect</code>" is <dfn>CORS-cross-origin</dfn>.</p>

  <p>A <span data-x="concept-response">response</span>'s <dfn export>unsafe response</dfn> is its
  <span data-x="concept-internal-response">internal response</span> if it has one, and the <span
  data-x="concept-response">response</span> itself otherwise.</p>

  <p>To <dfn>create a potential-CORS request</dfn>, given a <var>url</var>, <var>destination</var>,
  <var>corsAttributeState</var>, and an optional <i>same-origin fallback flag</i>, run these
  steps:</p>

  <ol>
   <li><p>Let <var>mode</var> be "<code data-x="">no-cors</code>" if <var>corsAttributeState</var>
   is <span data-x="attr-crossorigin-none">No CORS</span>, and "<code data-x="">cors</code>"
   otherwise.</p></li>

   <li><p>If <i>same-origin fallback flag</i> is set and <var>mode</var> is "<code
   data-x="">no-cors</code>", set <var>mode</var> to "<code data-x="">same-origin</code>".</p></li>

   <li><p>Let <var>credentialsMode</var> be "<code data-x="">include</code>".</p></li>

   <li><p>If <var>corsAttributeState</var> is <span
   data-x="attr-crossorigin-anonymous">Anonymous</span>, set <var>credentialsMode</var> to "<code
   data-x="">same-origin</code>".</p></li>

   <li><p>Let <var>request</var> be a new <span data-x="concept-request">request</span> whose
   <span data-x="concept-request-url">URL</span> is <var>url</var>, <span
   data-x="concept-request-destination">destination</span> is <var>destination</var>,
   <span data-x="concept-request-mode">mode</span> is <var>mode</var>, <span
   data-x="concept-request-credentials-mode">credentials mode</span> is
   <var>credentialsMode</var>, and whose <span>use-URL-credentials flag</span> is set.</p></li>
  </ol>


  <h4 id="content-type-sniffing">Determining the type of a resource</h4>

  <p>The <dfn data-x="Content-Type">Content-Type metadata</dfn> of a resource must be obtained and
  interpreted in a manner consistent with the requirements of <cite>MIME Sniffing</cite>.
  <ref spec=MIMESNIFF></p>

  <p>The <dfn data-x="Content-Type sniffing"
  data-x-href="https://mimesniff.spec.whatwg.org/#computed-mime-type">computed MIME type</dfn> of a
  resource must be found in a manner consistent with the requirements given in <cite>MIME
  Sniffing</cite>. <ref spec=MIMESNIFF></p>

  <p>The <dfn data-x="Content-Type sniffing: image"
  data-x-href="https://mimesniff.spec.whatwg.org/#rules-for-sniffing-images-specifically">rules for
  sniffing images specifically</dfn>, the <dfn data-x="Content-Type sniffing: text or binary"
  data-x-href="https://mimesniff.spec.whatwg.org/#rules-for-text-or-binary">rules for distinguishing
  if a resource is text or binary</dfn>, and the <dfn data-x="Content-Type sniffing: video"
  data-x-href="https://mimesniff.spec.whatwg.org/#rules-for-sniffing-audio-and-video-specifically">rules
  for sniffing audio and video specifically</dfn> are also defined in <cite>MIME Sniffing</cite>. These rules return a <span>MIME type</span> as their result. <ref
  spec=MIMESNIFF></p>

  <p class="warning">It is imperative that the rules in <cite>MIME Sniffing</cite> be
  followed exactly. When a user agent uses different heuristics for content type detection than the
  server expects, security problems can occur. For more details, see <cite>MIME Sniffing</cite>. <ref spec=MIMESNIFF></p>


  <h4>Extracting character encodings from <code>meta</code> elements</h4>

  <p>The <dfn>algorithm for extracting a character encoding from a <code>meta</code> element</dfn>,
  given a string <var>s</var>, is as follows. It either returns a character encoding or
  nothing.</p>

  <ol> <!-- https://www.hixie.ch/tests/adhoc/html/parsing/encoding/all.html -->

   <li><p>Let <var>position</var> be a pointer into <var>s</var>, initially
   pointing at the start of the string.</p></li>

   <li><p><i>Loop</i>: Find the first seven characters in <var>s</var> after <var>position</var> that are an <span>ASCII case-insensitive</span> match for the word "<code
   data-x="">charset</code>". If no such match is found, return nothing.</p></li>

   <li><p>Skip any <span>ASCII whitespace</span> that immediately follow the word "<code
   data-x="">charset</code>" (there might not be any).</p></li>

   <li><p>If the next character is not a U+003D EQUALS SIGN (=), then move <var>position</var> to point just before that next character, and jump back to the step
   labeled <i>loop</i>.</p></li>

   <li><p>Skip any <span>ASCII whitespace</span> that immediately follow the equals sign (there
   might not be any).</p></li>

   <li>
    <p>Process the next character as follows:</p>

    <dl class="switch">

     <dt>If it is a U+0022 QUOTATION MARK character (") and there is a later U+0022 QUOTATION MARK character (") in <var>s</var></dt>
     <dt>If it is a U+0027 APOSTROPHE character (') and there is a later U+0027 APOSTROPHE character (') in <var>s</var></dt>
     <dd>Return the result of <span>getting an encoding</span> from the substring that is between
     this character and the next earliest occurrence of this character.</dd>

     <dt>If it is an unmatched U+0022 QUOTATION MARK character (")</dt>
     <dt>If it is an unmatched U+0027 APOSTROPHE character (')</dt>
     <dt>If there is no next character</dt>
     <dd>Return nothing.</dd>

     <dt>Otherwise</dt>
     <dd>Return the result of <span>getting an encoding</span> from the substring that consists of
     this character up to but not including the first <span>ASCII whitespace</span> or U+003B
     SEMICOLON character (;), or the end of <var>s</var>, whichever comes first.</dd>
    </dl>
   </li>
  </ol>

  <p class="note">This algorithm is distinct from those in the HTTP specifications (for example,
  HTTP doesn't allow the use of single quotes and requires supporting a backslash-escape mechanism
  that is not supported by this algorithm<!-- not to mention not having any rules for
  error-handling, which is of course why we're having to define it ourselves -->). While the
  algorithm is used in contexts that, historically, were related to HTTP, the syntax as supported by
  implementations diverged some time ago. <ref spec=HTTP></p>

  </div>


  <h4>CORS settings attributes</h4>

  <p>A <dfn>CORS settings attribute</dfn> is an <span>enumerated attribute</span>. The following
  table lists the keywords and states for the attribute &mdash; the states given in the first cell
  of the rows with keywords give the states to which those keywords map.</p>

  <table>
   <thead>
    <tr>
     <th> State
     <th> Keywords
     <th> Brief description
   <tbody>
    <tr>
     <td rowspan=2><dfn data-x="attr-crossorigin-anonymous">Anonymous</dfn>
     <td><dfn attr-value for="audio/crossorigin,video/crossorigin,img/crossorigin,link/crossorigin,script/crossorigin"><code data-x="attr-crossorigin-anonymous-keyword">anonymous</code></dfn>
     <td rowspan=2><span data-x="concept-request">Requests</span> for the element will have their
     <span data-x="concept-request-mode">mode</span> set to "<code data-x="">cors</code>" and their
     <span data-x="concept-request-credentials-mode">credentials mode</span> set to "<code
     data-x="">same-origin</code>".
    <tr>
     <td>(the empty string)
    <tr>
     <td><dfn data-x="attr-crossorigin-use-credentials">Use Credentials</dfn>
     <td><dfn attr-value for="audio/crossorigin,video/crossorigin,img/crossorigin,link/crossorigin,script/crossorigin"><code data-x="attr-crossorigin-use-credentials-keyword">use-credentials</code></dfn>
     <td><span data-x="concept-request">Requests</span> for the element will have their <span
     data-x="concept-request-mode">mode</span> set to "<code data-x="">cors</code>" and their <span
     data-x="concept-request-credentials-mode">credentials mode</span> set to "<code
     data-x="">include</code>".
  </table>

  <p>The attribute's <i data-x="invalid value default">invalid value default</i> is the <span
  data-x="attr-crossorigin-anonymous">Anonymous</span> state, and its <i data-x="missing value
  default">missing value default</i> is the <dfn data-x="attr-crossorigin-none">No CORS</dfn> state.
  For the purposes of <span data-x="reflect">reflection</span>, the <span>canonical keyword</span>
  for the <span data-x="attr-crossorigin-anonymous">Anonymous</span> state is the <code
  data-x="attr-crossorigin-anonymous-keyword">anonymous</code> keyword.</p>

  <p>The majority of fetches governed by <span data-x="CORS settings attribute">CORS settings
  attributes</span> will be done via the <span>create a potential-CORS request</span> algorithm.</p>

  <p id="module-script-credentials-mode">For more modern features, where the request's <span
  data-x="concept-request-mode">mode</span> is always "<code data-x="">cors</code>", certain <span
  data-x="CORS settings attribute">CORS settings attributes</span> have been repurposed to have a
  slightly different meaning, wherein they only impact the <span
  data-x="concept-request">request</span>'s <span
  data-x="concept-request-credentials-mode">credentials mode</span>. To perform this translation, we
  define the <dfn export>CORS settings attribute credentials mode</dfn> for a given <span>CORS
  settings attribute</span> to be determined by switching on the attribute's state:</p>

  <dl class="switch">
   <dt><span data-x="attr-crossorigin-none">No CORS</span></dt>
   <dt><span data-x="attr-crossorigin-anonymous">Anonymous</span></dt>
   <dd>"<code data-x="">same-origin</code>"</dd>

   <dt><span data-x="attr-crossorigin-none">Use Credentials</span></dt>
   <dd>"<code data-x="">include</code>"</dd>
  </dl>


  <h4>Referrer policy attributes</h4>

  <p>A <dfn export>referrer policy attribute</dfn> is an <span>enumerated attribute</span>.  Each
  <span>referrer policy</span>, including the empty string, is a keyword for this attribute, mapping
  to a state of the same name.</p>

  <p>The attribute's <i data-x="invalid value default">invalid value default</i> and <i
  data-x="missing value default">missing value default</i> are both the empty string state.</p>

  <p>The impact of these states on the processing model of various <span
  data-x="concept-fetch">fetches</span> is defined in more detail throughout this specification, in
  <cite>Fetch</cite>, and in <cite>Referrer Policy</cite>. <ref spec=FETCH> <ref
  spec=REFERRERPOLICY></p>

  <div class="note">
   <p>Several signals can contribute to which processing model is used for a given <span
   data-x="concept-fetch">fetch</span>; a <span>referrer policy attribute</span> is only one of
   them. In general, the order in which these signals are processed are:</p>

   <ol>
    <li><p>First, the presence of a <code data-x="rel-noreferrer">noreferrer</code> link
    type;</p></li>
    <li><p>Then, the value of a <span>referrer policy attribute</span>;</p></li>
    <li><p>Then, the presence of any <code>meta</code> element with <code
    data-x="attr-meta-name">name</code> attribute set to <code
    data-x="meta-referrer">referrer</code>.</p></li>
    <li><p>Finally, the `<code data-x="http-referrer-policy">Referrer-Policy</code>` HTTP
    header.</p></li>
   </ol>
  </div>

  <h4>Nonce attributes</h4>

  <p>A <dfn element-attr for="htmlsvg-global" data-x="attr-nonce"><code>nonce</code></dfn> content
  attribute represents a cryptographic nonce ("number used once") which can be used by <cite>Content
  Security Policy</cite> to determine whether or not a given fetch will be allowed to proceed. The
  value is text. <ref spec="CSP"></p>

  <p>Elements that have a <code data-x="attr-nonce">nonce</code> content attribute ensure that the
  cryptographic nonce is only exposed to script (and not to side-channels like CSS attribute
  selectors) by taking the value from the content attribute, moving it into an internal slot
  named <dfn for="HTMLOrSVGElement" attribute>[[CryptographicNonce]]</dfn>, exposing it to script
  via the <code>HTMLOrSVGElement</code> interface mixin, and setting the content attribute to the
  empty string. Unless otherwise specified, the slot's value is the empty string.</p>

  <dl class="domintro">
   <dt><code data-x=""><var>element</var>.<span subdfn data-x="dom-HTMLOrSVGElement-nonce">nonce</span></code></dt>
   <dd><p>Returns the value set for <var>element</var>'s cryptographic nonce. If the setter was not
   used, this will be the value originally found in the <code data-x="attr-nonce">nonce</code>
   content attribute.</p></dd>

   <dt><code data-x=""><var>element</var>.<span data-x="dom-HTMLOrSVGElement-nonce">nonce</span> = <var>value</var></code></dt>
   <dd><p>Updates <var>element</var>'s cryptographic nonce value.</p></dd>
  </dl>

  <p>The <dfn id="dom-noncedelement-nonce" attribute for="HTMLOrSVGElement"><code
  data-x="dom-HTMLOrSVGElement-nonce">nonce</code></dfn> IDL attribute must, on getting, return the
  value of this element's <span>[[CryptographicNonce]]</span>; and on setting, set this element's
  <span>[[CryptographicNonce]]</span> to the given value.</p>

  <p class="note" id="nonce-does-not-update-dom">Note how the setter for the <code
  data-x="dom-HTMLOrSVGElement-nonce">nonce</code> IDL attribute does not update the corresponding
  content attribute. This, as well as the below setting of the <code
  data-x="attr-nonce">nonce</code> content attribute to the empty string when an element
  <span>becomes browsing-context connected</span>, is meant to prevent exfiltration of the nonce
  value through mechanisms that can easily read content attributes, such as selectors. Learn more in
  <a href="https://github.com/whatwg/html/issues/2369">issue #2369</a>, where this behavior was
  introduced.</p>

  <p>The following <span data-x="concept-element-attributes-change-ext">attribute change
  steps</span> are used for the <code data-x="attr-nonce">nonce</code> content attribute:

  <ol>
   <li><p>If <var>element</var> does not <span>include</span> <code>HTMLOrSVGElement</code>, then
   return.</p></li>

   <li><p>If <var>localName</var> is not <code data-x="attr-nonce">nonce</code> or
   <var>namespace</var> is not null, then return.</p></li>

   <li><p>If <var>value</var> is null, then set <var>element</var>'s
   <span>[[CryptographicNonce]]</span> to the empty string.</p></li>

   <li><p>Otherwise, set <var>element</var>'s <span>[[CryptographicNonce]]</span> to
   <var>value</var>.</p></li>
  </ol>

  <p>Whenever an element <span data-x="include">including</span> <code>HTMLOrSVGElement</code>
  <span>becomes browsing-context connected</span>, the user agent must execute the following steps
  on the <var>element</var>:</p>

  <ol>
   <li><p>Let <var>CSP list</var> be <var>element</var>'s <span data-x="shadow-including
   root">shadow-including root</span>'s <span data-x="concept-document-policy-container">policy
   container</span>'s <span data-x="policy-container-csp-list">CSP list</span>.</p></li>

   <li>
    <p>If <var>CSP list</var> <span>contains a header-delivered Content Security Policy</span>, and
    <var>element</var> has a <code data-x="attr-nonce">nonce</code> content attribute
    <var>attr</var> whose value is not the empty string, then:</p>

    <ol>
     <li><p>Let <var>nonce</var> be <var>element</var>'s
     <span>[[CryptographicNonce]]</span>.</p></li>

     <li><p><span data-x="concept-element-attributes-set-value">Set an attribute value</span> for
     <var>element</var> using "<code data-x="attr-nonce">nonce</code>" and the empty
     string.</p></li>

     <li><p>Set <var>element</var>'s <span>[[CryptographicNonce]]</span> to
     <var>nonce</var>.</p></li>
    </ol>

    <p class="note">If <var>element</var>'s <span>[[CryptographicNonce]]</span> were not restored it
    would be the empty string at this point.</p>
   </li>
  </ol>

  <p>The <span data-x="concept-node-clone-ext">cloning steps</span> for elements that
  <span>include</span> <code>HTMLOrSVGElement</code> must set the
  <span>[[CryptographicNonce]]</span> slot on the copy to the value of the slot on the element being
  cloned.</p>

  <h4>Lazy loading attributes</h4>

  <p>A <dfn>lazy loading attribute</dfn> is an <span>enumerated attribute</span>. The following
  table lists the keywords and states for the attribute &mdash; the keywords in the left column map
  to the states in the cell in the second column on the same row as the keyword.</p>

  <p>The attribute directs the user agent to fetch a resource immediately or to defer fetching until
  some conditions associated with the element are met, according to the attribute's current
  state.</p>

  <table>
   <thead>
    <tr>
     <th>Keyword
     <th>State
     <th>Description
   <tbody>
    <tr>
     <td><dfn attr-value for="img/loading,iframe/loading"><code data-x="attr-loading-lazy">lazy</code></dfn>
     <td><dfn data-x="attr-loading-lazy-state">Lazy</dfn>
     <td>Used to defer fetching a resource until some conditions are met.
    <tr>
     <td><dfn attr-value for="img/loading,iframe/loading"><code data-x="attr-loading-eager">eager</code></dfn>
     <td><dfn data-x="attr-loading-eager-state">Eager</dfn>
     <td>Used to fetch a resource immediately; the default state.
  </table>

  <p>The attribute's <i data-x="missing value default">missing value default</i> and <i
  data-x="invalid value default">invalid value default</i> are both the <span
  data-x="attr-loading-eager-state">Eager</span> state.</p>

  <hr>

  <p>The <dfn>will lazy load element steps</dfn>, given an element <var>element</var>,
  are as follows:</p>

  <ol>
   <li>
    <p>If <span data-x="concept-n-noscript">scripting is disabled</span> for <var>element</var>,
    then return false.</p>

    <p class="note">This is an anti-tracking measure, because if a user agent supported lazy loading
    when scripting is disabled, it would still be possible for a site to track a user's approximate
    scroll position throughout a session, by strategically placing images in a page's markup such
    that a server can track how many images are requested and when.</p>
   </li>

   <li><p>If <var>element</var>'s <span>lazy loading attribute</span> is in the <span
   data-x="attr-loading-lazy-state">Lazy</span> state, then return true.</p></li>

   <li><p>Return false.</p></li>
  </ol>

  <p>Each <code>img</code> and <code>iframe</code> element has associated <dfn>lazy load resumption
  steps</dfn>, initially null.</p>

  <p class="note">For <code>img</code> and <code>iframe</code> elements that <span data-x="will lazy
  load element steps">will lazy load</span>, these steps are run from the <span>lazy load
  intersection observer</span>'s callback or when their <span>lazy loading attribute</span> is set
  to the <span data-x="attr-loading-eager-state">Eager</span> state. This causes the element to
  continue loading.</p>

  <p>Each <code>Document</code> has a <dfn>lazy load intersection observer</dfn>, initially set to
  null but can be set to an <code>IntersectionObserver</code> instance.</p>

  <p>To <dfn>start intersection-observing a lazy loading element</dfn> <var>element</var>, run these
  steps:</p>

  <ol>
   <li><p>Let <var>doc</var> be <var>element</var>'s <span>node document</span>.</p></li>

   <li>
    <p>If <var>doc</var>'s <span>lazy load intersection observer</span> is null, set it to a new
    <code>IntersectionObserver</code> instance, initialized as follows:</p>

    <p class="XXX">The intention is to use the original value of the
    <code>IntersectionObserver</code> constructor. However, we're forced to use the
    JavaScript-exposed constructor in this specification, until <cite>Intersection Observer</cite>
    exposes low-level hooks for use in specifications. See bug <a
    href="https://github.com/w3c/IntersectionObserver/issues/464">w3c/IntersectionObserver#464</a>
    which tracks this. <ref spec="INTERSECTIONOBSERVER"></p>

    <ul>
     <li>
      <p>The <var>callback</var> is these steps, with arguments <var>entries</var> and
      <var>observer</var>:</p>

      <ol>
       <li>
        <p>For each <var>entry</var> in <var>entries</var> <span class="XXX">using a method of
        iteration which does not trigger developer-modifiable array accessors or
        iteration hooks</span>:</p>

        <ol>
         <li><p>Let <var>resumptionSteps</var> be null.</p></li>

         <li><p>If <var>entry</var>.<code
         data-x="dom-IntersectionObserverEntry-isIntersecting">isIntersecting</code> is true, then
         set <var>resumptionSteps</var> to <var>entry</var>.<code
         data-x="dom-IntersectionObserverEntry-target">target</code>'s
         <span>lazy load resumption steps</span>.</p></li>

         <li><p>If <var>resumptionSteps</var> is null, then return.</p></li>

         <li><p><span>Stop intersection-observing a lazy loading element</span> for
         <var>entry</var>.<code data-x="dom-IntersectionObserverEntry-target">target</code>.</p></li>

         <li><p>Set <var>entry</var>.<code
         data-x="dom-IntersectionObserverEntry-target">target</code>'s <span>lazy load resumption
         steps</span> to null.</p></li>

         <li><p>Invoke <var>resumptionSteps</var>.</p></li>
        </ol>

        <p class="XXX">The intention is to use the original value of the
        <code data-x="dom-IntersectionObserverEntry-isIntersecting">isIntersecting</code> and
        <code data-x="dom-IntersectionObserverEntry-target">target</code> getters. See <a
        href="https://github.com/w3c/IntersectionObserver/issues/464">w3c/IntersectionObserver#464</a>.
        <ref spec="INTERSECTIONOBSERVER"></p>
       </li>
      </ol>
     </li>

     <li>
      <p>The <var>options</var> is an <code>IntersectionObserverInit</code> dictionary with the
      following dictionary members: «[ "<code data-x="">rootMargin</code>" → <span>lazy load root
      margin</span> ]»</p>

      <p class="note">This allows for fetching the image during scrolling, when it does not yet —
      but is about to — intersect the viewport.</p>

      <p class="XXX">The <span>lazy load root margin</span> suggestions imply dynamic changes to the
      value, but the <code>IntersectionObserver</code> API does not support changing the root
      margin. See issue <a
      href="https://github.com/w3c/IntersectionObserver/issues/428">w3c/IntersectionObserver#428</a>.</p>
     </li>
    </ul>
   </li>

   <li>
    <p>Call <var>doc</var>'s <span>lazy load intersection observer</span>'s <code
    data-x="dom-IntersectionObserver-observe">observe</code> method with <var>element</var> as the
    argument.</p>

    <p class="XXX">The intention is to use the original value of the <code
    data-x="dom-IntersectionObserver-observe">observe</code> method. See <a
    href="https://github.com/w3c/IntersectionObserver/issues/464">w3c/IntersectionObserver#464</a>.
    <ref spec="INTERSECTIONOBSERVER"></p>
   </li>
  </ol>

  <p>To <dfn>stop intersection-observing a lazy loading element</dfn> <var>element</var>, run these
  steps:</p>

  <ol>
   <li><p>Let <var>doc</var> be <var>element</var>'s <span>node document</span>.</p></li>

   <li><p><span>Assert</span>: <var>doc</var>'s <span>lazy load intersection observer</span> is not
   null.</p></li>

   <li>
    <p>Call <var>doc</var>'s <span>lazy load intersection observer</span> <code
    data-x="dom-IntersectionObserver-unobserve">unobserve</code> method with <var>element</var> as
    the argument.</p>

    <p class="XXX">The intention is to use the original value of the <code
    data-x="dom-IntersectionObserver-unobserve">unobserve</code> method. See <a
    href="https://github.com/w3c/IntersectionObserver/issues/464">w3c/IntersectionObserver#464</a>.
    <ref spec="INTERSECTIONOBSERVER"></p>
   </li>
  </ol>

  <p>
  <!--INSERT TRACKING-->
  The <dfn>lazy load root margin</dfn> is an <span>implementation-defined</span> value, but with
  the following suggestions to consider:</p>

  <ul>
   <li><p>Set a minimum value that most often results in the resources being loaded before they
   intersect the viewport under normal usage patterns for the given device.</p></li>

   <li><p>The typical scrolling speed: increase the value for devices with faster typical scrolling
   speeds.</p></li>

   <li><p>The current scrolling speed or momentum: the UA can attempt to predict where the scrolling
   will likely stop, and adjust the value accordingly.</p></li>

   <li><p>The network quality: increase the value for slow or high-latency connections.</p></li>

   <li><p>User preferences can influence the value.</p></li>
  </ul>

  <p class="note">It is important <span data-x="tracking vector">for privacy</span> that the
  <span>lazy load root margin</span> not leak additional information. For example, the typical
  scrolling speed on the current device could be imprecise so as to not introduce a new
  fingerprinting vector.</p>

  <h4>Blocking attributes</h4>

  <p>A <dfn>blocking attribute</dfn> explicitly indicates that certain operations should be blocked
  on the fetching of an external resource. The operations that can be blocked are represented by
  <dfn data-x="possible blocking token">possible blocking tokens</dfn>, which are strings listed by
  the following table:</p>

  <table>
   <thead>
    <tr>
     <th>Possible blocking token
     <th>Description
   <tbody>
    <tr>
     <td>"<dfn><code data-x="blocking-token-render">render</code></dfn>"
     <td>The element is <span>potentially render-blocking</span>.
  </table>


  <p class="note" id="future-blocking-tokens">In the future, there might be more <span
  data-x="possible blocking token">possible blocking tokens</span>.</p>

  <p>A <span>blocking attribute</span> must have a value that is an <span>unordered set of unique
  space-separated tokens</span>, each of which are <span data-x="possible blocking token">possible
  blocking tokens</span>. The <span data-x="concept-supported-tokens">supported tokens</span> of a
  <span>blocking attribute</span> are the <span data-x="possible blocking token">possible blocking
  tokens</span>. Any element can have at most one <span>blocking attribute</span>.</p>

  <p>The <dfn>blocking tokens set</dfn> for an element <var>el</var> are the result of the
  following steps:</p>

  <ol>
   <li><p>Let <var>value</var> be the value of <var>el</var>'s <span>blocking attribute</span>, or
   the empty string if no such attribute exists.</p>

   <li><p>Set <var>value</var> to <var>value</var>, <span>converted to ASCII lowercase</span>.</p>

   <li><p>Let <var>rawTokens</var> be the result of <span data-x="split a string on ASCII
   whitespace">splitting <var>value</var> on ASCII whitespace</span>.</p>

   <li><p>Return a set containing the elements of <var>rawTokens</var> that are <span
   data-x="possible blocking token">possible blocking tokens</span>.</p>
  </ol>

  <p>An element is <dfn>potentially render-blocking</dfn> if its <span>blocking tokens set</span>
  contains "<code data-x="blocking-token-render">render</code>", or if it is
  <dfn>implicitly potentially render-blocking</dfn>, which will be defined at the individual
  elements. By default, an element is not <span>implicitly potentially render-blocking</span>.</p>

  <h4>Fetch priority attributes</h4>

  <p>A <dfn>fetch priority attribute</dfn> is an <span>enumerated attribute</span>. The following
  table lists the keywords and states for the attribute — the keywords in the left column map to
  the states in the cell in the second column on the same row as the keyword.</p>

  <table>
    <thead>
    <tr>
      <th>Keyword
      <th>State
      <th>Description
    <tbody>
    <tr>
      <td><dfn attr-value
      for="img/fetchpriority,script/fetchpriority,link/fetchpriority"
      data-x="attr-fetchpriority-high"><code>high</code></dfn>
      <td><dfn data-x="attr-fetchpriority-high-state">high</dfn>
      <td>Signals a high-priority <span data-x="concept-fetch">fetch</span> relative to other
      resources with the same <span data-x="concept-request-destination">destination</span>.
    <tr>
      <td><dfn attr-value
      for="img/fetchpriority,script/fetchpriority,link/fetchpriority"
      data-x="attr-fetchpriority-low"><code>low</code></dfn>
      <td><dfn data-x="attr-fetchpriority-low-state">low</dfn>
      <td>Signals a low-priority <span data-x="concept-fetch">fetch</span> relative to other
      resources with the same <span data-x="concept-request-destination">destination</span>.
    <tr>
      <td><dfn attr-value
      for="img/fetchpriority,script/fetchpriority,link/fetchpriority"
      data-x="attr-fetchpriority-auto"><code>auto</code></dfn>
      <td><dfn data-x="attr-fetchpriority-auto-state">auto</dfn>
      <td>Signals automatic determination of <span data-x="concept-fetch">fetch</span> priority
      relative to other resources with the same <span
      data-x="concept-request-destination">destination</span>.
  </table>

  <p>The attribute's <i data-x="missing value default">missing value default</i> and
  <i data-x="invalid value default">invalid value default</i> are both the
  <span data-x="attr-fetchpriority-auto-state">auto</span> state.</p>

  <h3 split-filename="common-dom-interfaces">Common DOM interfaces</h3>

  <h4>Reflecting content attributes in IDL attributes</h4>

  <p>The building blocks for reflecting are as follows:</p>

  <ul>
   <li><p>A <dfn>reflected target</dfn> is an element or <code>ElementInternals</code>
   object. It is typically clear from context and typically identical to the interface of the
   <span>reflected IDL attribute</span>. It is always identical to that interface when it is an
   <code>ElementInternals</code> object.</p></li>

   <li><p>A <dfn>reflected IDL attribute</dfn> is an attribute interface member.</p></li>

   <li><p>A <dfn>reflected content attribute name</dfn> is a string. When the <span>reflected
   target</span> is an element, it represents the local name of a content attribute whose namespace
   is null. When the <span>reflected target</span> is an <code>ElementInternals</code> object, it
   represents a key of the <span>reflected target</span>'s <span data-x="internals-target">target
   element</span>'s <span>internal content attribute map</span>.</p></li>
  </ul>

  <p>A <span>reflected IDL attribute</span> can be defined to <dfn export>reflect</dfn> a
  <span>reflected content attribute name</span> of a <span>reflected target</span>. In general this
  means that the IDL attribute getter returns the current value of the content attribute, and the
  setter changes the value of the content attribute to the given value.</p>

  <p>If the <span>reflected target</span> is an element, then the <span>reflected IDL
  attribute</span> can additionally declare to <dfn>support <code>ElementInternals</code></dfn>.
  This means that the <code>ElementInternals</code> interface also has a <span>reflected IDL
  attribute</span>, with the same identifier, and that <span>reflected IDL attribute</span> <span
  data-x="reflect">reflects</span> the same <span>reflected content attribute name</span>.</p>

  <p class="example" id="example-reflect-incantation">The <code data-x=""><var>fooBar</var></code>
  IDL attribute <!--non-normative-->must <span>reflect</span> the <code
  data-x=""><var>foobar</var></code> content attribute and <span>support
  <code>ElementInternals</code></span>.</p>

  <div w-nodev>

  <p><span data-x="reflected target">Reflected targets</span> have these associated algorithms:

  <ul class="brief">
   <li><dfn>get the element</dfn>: takes no arguments; returns an element.</li>
   <li><dfn>get the content attribute</dfn>: takes no arguments; returns null or a string.</li>
   <li><dfn>set the content attribute</dfn>: takes a string <var>value</var>; returns nothing.</li>
   <li><dfn>delete the content attribute</dfn>: takes no arguments; returns nothing.</li>
  </ul>

  <p>For a <span>reflected target</span> that is an element <var>element</var>, these are defined as
  follows:</p>

  <dl>
   <dt><span>get the element</span></dt>
   <dd><ol><li><p>Return <var>element</var>.</p></li></ol></dd>

   <dt><span>get the content attribute</span></dt>
   <dd>
    <ol>
     <li><p>Let <var>attribute</var> be the result of running <span
     data-x="concept-element-attributes-get-by-namespace">get an attribute by namespace and local
     name</span> given null, the <span>reflected content attribute name</span>, and
     <var>element</var>.</p></li>

     <li><p>If <var>attribute</var> is null, then return null.</p></li>

     <li><p>Return <var>attribute</var>'s <span
     data-x="concept-attribute-value">value</span>.</p></li>
    </ol>
   </dd>

   <dt><span>set the content attribute</span> with a string <var>value</var></dt>
   <dd><ol><li><p><span data-x="concept-element-attributes-set-value">Set an attribute value</span>
   given <var>element</var>, the <span>reflected content attribute name</span>, and
   <var>value</var>.</p></li></ol></dd>

   <dt><span>delete the content attribute</span></dt>
   <dd><ol><li><p><span data-x="concept-element-attributes-remove-by-namespace">Remove an attribute
   by namespace and local name</span> given null, the <span>reflected content attribute name</span>,
   and <var>element</var>.</p></li></ol></dd>
  </dl>

  <p>For a <span>reflected target</span> that is an <code>ElementInternals</code> object
  <var>elementInternals</var>, they are defined as follows:</p>

  <dl>
   <dt><span>get the element</span></dt>
   <dd><ol><li><p>Return <var>elementInternals</var>'s <span data-x="internals-target">target
   element</span>.</p></li></ol></dd>

   <dt><span>get the content attribute</span></dt>
   <dd>
    <ol>
     <li><p>If <var>elementInternals</var>'s <span data-x="internals-target">target element</span>'s
     <span>internal content attribute map</span>[the <span>reflected content attribute name</span>]
     <span data-x="map exists">does not exist</span>, then return null.

     <li><p>Return <var>elementInternals</var>'s <span data-x="internals-target">target
     element</span>'s <span>internal content attribute map</span>[the <span>reflected content
     attribute name</span>].</p></li>
    </ol>
   </dd>

   <dt><span>set the content attribute</span> with a string <var>value</var></dt>
   <dd><ol><li><p><span data-x="map set">Set</span> <var>elementInternals</var>'s <span
   data-x="internals-target">target element</span>'s <span>internal content attribute map</span>[the
   <span>reflected content attribute name</span>] to <var>value</var>.</p></li></ol></dd>

   <dt><span>delete the content attribute</span></dt>
   <dd><ol><li><p><span data-x="map remove">Remove</span> <var>elementInternals</var>'s <span
   data-x="internals-target">target element</span>'s <span>internal content attribute map</span>[the
   <span>reflected content attribute name</span>].</p></li></ol></dd>
  </dl>

  <p class="note">This results in somewhat redundant data structures for
  <code>ElementInternals</code> objects as their <span data-x="internals-target">target
  element</span>'s <span>internal content attribute map</span> cannot be directly manipulated and as
  such reflection is only happening in a single direction. This approach was nevertheless chosen to
  make it less error-prone to define IDL attributes that are shared between <span data-x="reflected
  target">reflected targets</span> and benefit from common API semantics.</p>

  <hr>

  <p>IDL attributes of type <code data-x="idl-DOMString">DOMString</code> or <code data-x=""><span
  data-x="idl-DOMString">DOMString</span>?</code> that <span>reflect</span> <span data-x="enumerated
  attribute">enumerated</span> content attributes can be <dfn>limited to only known values</dfn>.
  Per the processing models below, those will cause the getters for such IDL attributes to only
  return keywords for those enumerated attributes, or the empty string or null.</p>

  <p>If a <span>reflected IDL attribute</span> has the type <code
  data-x="idl-DOMString">DOMString</code>:</p>

  <ul>
   <li>
    <p>The getter steps are:</p>

    <ol>
     <li><p>Let <var>element</var> be the result of running <span>this</span>'s <span>get the
     element</span>.</p></li>

     <li><p>Let <var>contentAttributeValue</var> be the result of running <span>this</span>'s
     <span>get the content attribute</span>.</p></li>

     <li><p>Let <var>attributeDefinition</var> be the attribute definition of <var>element</var>'s
     content attribute whose namespace is null and local name is the <span>reflected content
     attribute name</span>.

     <li>
      <p>If <var>attributeDefinition</var> indicates it is an <span>enumerated attribute</span> and
      the <span>reflected IDL attribute</span> is defined to be <span>limited to only known
      values</span>:</p>

      <ol>
       <li><p>If <var>contentAttributeValue</var> does not correspond to any state of
       <var>attributeDefinition</var> (e.g., it is null and there is no <i data-x="missing value
       default">missing value default</i>), or that it is in a state of
       <var>attributeDefinition</var> with no associated keyword value, then return the empty
       string.</p></li>

       <li><p>Return the <span>canonical keyword</span> for the state of
       <var>attributeDefinition</var> that <var>contentAttributeValue</var> corresponds to.</p></li>
      </ol>
     </li>

     <li><p>If <var>contentAttributeValue</var> is null, then return the empty string.</p></li>

     <li><p>Return <var>contentAttributeValue</var>.</p></li>
    </ol>
   </li>

   <li><p>The setter steps are to run <span>this</span>'s <span>set the content attribute</span>
   with the given value.</p></li>
  </ul>

  <p>If a <span>reflected IDL attribute</span> has the type <code data-x=""><span
  data-x="idl-DOMString">DOMString</span>?</code>:</p>

  <ul>
   <li>
    <p>The getter steps are:</p>

    <ol>
     <li><p>Let <var>element</var> be the result of running <span>this</span>'s <span>get the
     element</span>.</p></li>

     <li><p>Let <var>contentAttributeValue</var> be the result of running <span>this</span>'s
     <span>get the content attribute</span>.</p></li>

     <li><p>Let <var>attributeDefinition</var> be the attribute definition of <var>element</var>'s
     content attribute whose namespace is null and local name is the <span>reflected content
     attribute name</span>.

     <li><p><span>Assert</span>: <var>attributeDefinition</var> indicates it is an <span>enumerated
     attribute</span>.</p></li>

     <li><p><span>Assert</span>: the <span>reflected IDL attribute</span> is <span>limited to only
     known values</span>.</p></li>

     <li><p><span>Assert</span>: <var>contentAttributeValue</var> corresponds to a state of
     <var>attributeDefinition</var>.</p></li>

     <li><p>If <var>contentAttributeValue</var> corresponds to a state of
     <var>attributeDefinition</var> with no associated keyword value, then return null.</p></li>

     <li><p>Return the <span>canonical keyword</span> for the state of
     <var>attributeDefinition</var> that <var>contentAttributeValue</var> corresponds to.</p></li>
    </ol>
   </li>

   <li>
    <p>The setter steps are:</p>

    <ol>
     <li><p>If the given value is null, then run <span>this</span>'s <span>delete the content
     attribute</span>.</p></li>

     <li><p>Otherwise, run <span>this</span>'s <span>set the content attribute</span> with the given
     value.</p></li>
    </ol>
   </li>
  </ul>

  <p>If a <span>reflected IDL attribute</span> has the type <code
  data-x="idl-DOMString">USVString</code>:</p>

  <ul>
   <li>
    <p>The getter steps are:</p>

    <ol>
     <li><p>Let <var>element</var> be the result of running <span>this</span>'s <span>get the
     element</span>.</p></li>

     <li><p>Let <var>contentAttributeValue</var> be the result of running <span>this</span>'s
     <span>get the content attribute</span>.</p></li>

     <li><p>Let <var>attributeDefinition</var> be the attribute definition of <var>element</var>'s
     content attribute whose namespace is null and local name is the <span>reflected content
     attribute name</span>.

     <li>
      <p>If <var>attributeDefinition</var> indicates it contains a <span>URL</span>:</p>

      <ol>
       <li><p>If <var>contentAttributeValue</var> is null, then return the empty string.</p></li>

       <li><p><span data-x="parse a url">Parse</span> <var>contentAttributeValue</var> relative to
       the element's <span>node document</span>.</p></li>

       <li><p>If that does not return failure, then return the <span>resulting URL
       string</span>.</p></li>
      </ol>
     </li>

     <li><p>Return <var>contentAttributeValue</var>, <span
     data-x="convert">converted to a scalar value string</span>.</p></li>
    </ol>
   </li>

   <li><p>The setter steps are to run <span>this</span>'s <span>set the content attribute</span>
   with the given value.</p></li>
  </ul>

  <p>If a <span>reflected IDL attribute</span> has the type <code
  data-x="idl-boolean">boolean</code>:</p>

  <ul>
   <li>
    <p>The getter steps are:</p>

    <ol>
     <li><p>Let <var>contentAttributeValue</var> be the result of running <span>this</span>'s
     <span>get the content attribute</span>.</p></li>

     <li><p>If <var>contentAttributeValue</var> is null, then return false.</p></li>

     <li><p>Return true.</p></li>
    </ol>
   </li>

   <li>
    <p>The setter steps are:</p>

    <ol>
     <li><p>If the given value is false, then run <span>this</span>'s <span>delete the content
     attribute</span>.</p></li>

     <li><p>If the given value is true, then run <span>this</span>'s <span>set the content
     attribute</span> with the empty string.
    </ol>
   </li>
  </ul>

  <p class="note">This corresponds to the rules for <span data-x="boolean attribute">boolean content
  attributes</span>.

  <p>If a <span>reflected IDL attribute</span> has the type <code data-x="idl-long">long</code>,
  optionally <dfn>limited to only non-negative numbers</dfn> and optionally with a <dfn>default
  value</dfn> <var>defaultValue</var>:

  <ul>
   <li>
    <p>The getter steps are:</p>

    <ol>
     <li><p>Let <var>contentAttributeValue</var> be the result of running <span>this</span>'s
     <span>get the content attribute</span>.</p></li>

     <li>
      <p>If <var>contentAttributeValue</var> is not null:

      <ol>
       <li><p>Let <var>parsedValue</var> be the result of <span data-x="rules for parsing
       integers">integer parsing</span> <var>contentAttributeValue</var> if the <span>reflected IDL
       attribute</span> is not <span>limited to only non-negative numbers</span>; otherwise the
       result of <span data-x="rules for parsing non-negative integers">non-negative integer
       parsing</span> <var>contentAttributeValue</var>.</p></li>

       <li><p>If <var>parsedValue</var> is not an error and is within the <code
       data-x="idl-long">long</code> range, then return <var>parsedValue</var>.</p></li>
      </ol>
     </li>

     <li><p>If the <span>reflected IDL attribute</span> has a <span>default value</span>, then
     return <var>defaultValue</var>.</p></li>

     <li><p>If the <span>reflected IDL attribute</span> is <span>limited to only non-negative
     numbers</span>, then return &#x2212;1.</p></li>

     <li><p>Return 0.</p></li>
    </ol>
   </li>

   <li>
    <p>The setter steps are:</p>

    <ol>
     <li><p>If the <span>reflected IDL attribute</span> is <span>limited to only non-negative
     numbers</span> and the given value is negative, then throw an
     <span>"<code>IndexSizeError</code>"</span> <code>DOMException</code>.</p></li>

     <li><p>Run <span>this</span>'s <span>set the content attribute</span> with the given value
     converted to the shortest possible string representing the number as a <span>valid
     integer</span>.</p></li>
    </ol>
   </li>
  </ul>

  <p>If a <span>reflected IDL attribute</span> has the type <code
  data-x="idl-unsigned-long">unsigned long</code>, optionally <dfn
  id="limited-to-only-non-negative-numbers-greater-than-zero">limited to only positive
  numbers</dfn>, <dfn
  id="limited-to-only-non-negative-numbers-greater-than-zero-with-fallback">limited to only positive
  numbers with fallback</dfn>, or <dfn>clamped to the range</dfn> [<var>clampedMin</var>,
  <var>clampedMax</var>], and optionally with a <span>default value</span> <var>defaultValue</var>:

  <ul>
   <li>
    <p>The getter steps are:</p>

    <ol>
     <li><p>Let <var>contentAttributeValue</var> be the result of running <span>this</span>'s
     <span>get the content attribute</span>.</p></li>

     <li><p>Let <var>minimum</var> be 0.</p></li>

     <li><p>If the <span>reflected IDL attribute</span> is <span>limited to only positive
     numbers</span> or <span>limited to only positive numbers with fallback</span>, then set
     <var>minimum</var> to 1.</p></li>

     <li><p>If the <span>reflected IDL attribute</span> is <span>clamped to the range</span>, then
     set <var>minimum</var> to <var>clampedMin</var>.</p></li>

     <li><p>Let <var>maximum</var> be 2147483647 if the <span>reflected IDL attribute</span> is not
     <span>clamped to the range</span>; otherwise <var>clampedMax</var>.</p></li>

     <li>
      <p>If <var>contentAttributeValue</var> is not null:

      <ol>
       <li><p>Let <var>parsedValue</var> be the result of <span data-x="rules for parsing
       non-negative integers">non-negative integer parsing</span>
       <var>contentAttributeValue</var>.</p></li>

       <li><p>If <var>parsedValue</var> is not an error and is in the range <var>minimum</var> to
       <var>maximum</var>, inclusive, then return <var>parsedValue</var>.</p></li>

       <li>
        <p>If <var>parsedValue</var> is not an error and the <span>reflected IDL attribute</span> is
        <span>clamped to the range</span>:

        <ol>
         <li><p>If <var>parsedValue</var> is less than <var>minimum</var>, then return
         <var>minimum</var>.</p></li>

         <li><p>Return <var>maximum</var>.</p></li>
        </ol>
       </li>
      </ol>
     </li>

     <li><p>If the <span>reflected IDL attribute</span> has a <span>default value</span>, then
     return <var>defaultValue</var>.</p></li>

     <li><p>Return <var>minimum</var>.</p></li>
    </ol>
   </li>

   <li>
    <p>The setter steps are:</p>

    <ol>
     <li><p>If the <span>reflected IDL attribute</span> is <span>limited to only positive
     numbers</span> and the given value is 0, then throw an
     <span>"<code>IndexSizeError</code>"</span> <code>DOMException</code>.</p></li>

     <li><p>Let <var>minimum</var> be 0.</p></li>

     <li><p>If the <span>reflected IDL attribute</span> is <span>limited to only positive
     numbers</span> or <span>limited to only positive numbers with fallback</span>, then set
     <var>minimum</var> to 1.</p></li>

     <li><p>Let <var>newValue</var> be <var>minimum</var>.</p></li>

     <li><p>If the <span>reflected IDL attribute</span> has a <span>default value</span>, then set
     <var>newValue</var> to <var>defaultValue</var>.</p></li>

     <li><p>If the given value is in the range <var>minimum</var> to 2147483647, inclusive,
     then set <var>newValue</var> to it.</p></li>

     <li><p>Run <span>this</span>'s <span>set the content attribute</span> with <var>newValue</var>
     converted to the shortest possible string representing the number as a <span>valid non-negative
     integer</span>.</p></li>
    </ol>

    <p class="note"><span>Clamped to the range</span> has no effect on the setter steps.</p>
   </li>
  </ul>
  <!-- see https://www.w3.org/Bugs/Public/show_bug.cgi?id=10352
           https://bugzilla.mozilla.org/show_bug.cgi?id=586118
           https://www.w3.org/Bugs/Public/show_bug.cgi?id=17705
       ...for why the range is clamped to 2147483647 rather the normal unsigned long maximum value
       of 4294967295 -->

  <p>If a <span>reflected IDL attribute</span> has the type <code data-x="idl-double">double</code>,
  optionally <span id="limited-to-numbers-greater-than-zero">limited to only positive numbers</span>
  and optionally with a <span>default value</span> <var>defaultValue</var>:

  <ul>
   <li>
    <p>The getter steps are:</p>

    <ol>
     <li><p>Let <var>contentAttributeValue</var> be the result of running <span>this</span>'s
     <span>get the content attribute</span>.</p></li>

     <li>
      <p>If <var>contentAttributeValue</var> is not null:

      <ol>
       <li><p>Let <var>parsedValue</var> be the result of <span data-x="rules for parsing
       floating-point number values">floating-point number parsing</span>
       <var>contentAttributeValue</var>.</p></li>

       <li><p>If <var>parsedValue</var> is not an error and is greater than 0, then return
       <var>parsedValue</var>.</p></li>

       <li><p>If <var>parsedValue</var> is not an error and the <span>reflected IDL attribute</span>
       is not <span>limited to only positive numbers</span>, then return
       <var>parsedValue</var>.</p></li>
      </ol>
     </li>

     <li><p>If the <span>reflected IDL attribute</span> has a <span>default value</span>, then
     return <var>defaultValue</var>.</p></li>

     <li><p>Return 0.</p></li>
    </ol>
   </li>


   <li>
    <p>The setter steps are:</p>

    <ol>
     <li><p>If the <span>reflected IDL attribute</span> is <span>limited to only positive
     numbers</span> and the given value is not greater than 0, then return.</p></li>

     <li><p>Run <span>this</span>'s <span>set the content attribute</span> with the given value,
     converted to the <span>best representation of the number as a floating-point
     number</span>.</p></li>
    </ol>
   </li>
  </ul>

  <p class="note">The values Infinity and Not-a-Number (NaN) values throw an exception on setting,
  as defined in <cite>Web IDL</cite>. <ref spec=WEBIDL></p>

  <p>If a <span>reflected IDL attribute</span> has the type <code>DOMTokenList</code>, then its
  getter steps are to return a <code>DOMTokenList</code> object whose associated element is
  <span>this</span> and associated attribute's local name is the <span>reflected content
  attribute name</span>. Specification authors cannot use <span>support
  <code>ElementInternals</code></span> for IDL attributes of this type.</p>
  <!-- Supporting ElementInternals is doable in theory, but would require corresponding changes to
       DOMTokenList. -->

  <p>If a <span>reflected IDL attribute</span> has the type <code data-x=""><var>T</var>?</code>,
  where <var>T</var> is either <code>Element</code> or an interface that inherits from
  <code>Element</code>, then:

  <ul>
   <li><p>Let <var>attr</var> be the <span>reflected content attribute name</span>.</p></li>

   <li><p>Its <span>reflected target</span> has an <dfn>explicitly set
   <var>attr</var>-element</dfn>, which is a weak reference to an element or null. It is initially
   null.</p></li>

   <li>
    <p>Its <span>reflected target</span> has an <dfn for="Element,ElementInternals"
    export><var>attr</var>-associated element</dfn>. To compute the <span><var>attr</var>-associated
    element</span> for such a <span>reflected target</span> <var>reflectedTarget</var>:</p>

    <ol>
     <li><p>Let <var>element</var> be the result of running <var>reflectedTarget</var>'s <span>get
     the element</span>.</p></li>

     <li><p>Let <var>contentAttributeValue</var> be the result of running
     <var>reflectedTarget</var>'s <span>get the content attribute</span>.</p></li>

     <li>
      <p>If <var>reflectedTarget</var>'s <span>explicitly set <var>attr</var>-element</span> is not
      null:</p>

      <ul>
       <li><p>If <var>reflectedTarget</var>'s <span>explicitly set <var>attr</var>-element</span> is
       a <span>descendant</span> of any of <var>element</var>'s <span
       data-x="concept-shadow-including-ancestor">shadow-including ancestors</span>, then return
       <var>reflectedTarget</var>'s <span>explicitly set <var>attr</var>-element</span>.</p></li>

       <li><p>Return null.</p></li>
      </ul>
     </li>

     <li>
      <p>Otherwise, if <var>contentAttributeValue</var> is not null, return the first element
      <var>candidate</var>, in <span>tree order</span>, that meets the following criteria:</p>

      <ul class="brief">
       <li><var>candidate</var>'s <span>root</span> is the same as <var>element</var>'s
       <span>root</span>,</li>
       <li><var>candidate</var>'s <span data-x="concept-ID">ID</span> is
       <var>contentAttributeValue</var>, and</li>
       <li><var>candidate</var> <span>implements</span> <var>T</var>.</li>
      </ul>

      <p>If no such element exists, then return null.</p>
     </li>

     <li><p>Return null.</p></li>
    </ol>
   </li>

   <li><p>The getter steps are to return <span>this</span>'s <span><var>attr</var>-associated
   element</span>.</p></li>

   <li>
    <p>The setter steps are:</p>
    <ol>
     <li>
      <p>If the given value is null, then:</p>

      <ol>
       <li><p>Set <span>this</span>'s <span>explicitly set <var>attr</var>-element</span> to
       null.</p></li>

       <li><p>Run <span>this</span>'s <span>delete the content attribute</span>.</p></li>

       <li><p>Return.</p></li>
      </ol>
     </li>

     <li><p>Run <span>this</span>'s <span>set the content attribute</span> with the empty
     string.</p></li>

     <li><p>Set <span>this</span>'s <span>explicitly set <var>attr</var>-element</span> to a weak
     reference to the given value.</p></li>
    </ol>
   </li>

   <li>
    <p>For element <span data-x="reflected target">reflected targets</span> only: the following
    <span data-x="concept-element-attributes-change-ext">attribute change steps</span>, given
    <var>element</var>, <var>localName</var>, <var>oldValue</var>, <var>value</var>, and
    <var>namespace</var>, are used to synchronize between the content attribute and the IDL
    attribute:</p>

    <ol>
     <li><p>If <var>localName</var> is not <var>attr</var> or <var>namespace</var> is not null, then
     return.</p></li>

     <li><p>Set <var>element</var>'s <span>explicitly set <var>attr</var>-element</span> to
     null.</p></li>
    </ol>
   </li>
  </ul>

  <p class="note"><span data-x="reflected IDL attribute">Reflected IDL attributes</span> of this
  type are strongly encouraged to have their identifier end in "<code data-x="">Element</code>" for
  consistency.</p>

  <p>If a <span>reflected IDL attribute</span> has the type <code
  data-x="">FrozenArray&lt;<var>T</var>&gt;?</code>, where <var>T</var> is either
  <code>Element</code> or an interface that inherits from <code>Element</code>, then:</p>

  <ul>
   <li><p>Let <var>attr</var> be the <span>reflected content attribute name</span>.</p></li>

   <li><p>Its <span>reflected target</span> has an <dfn>explicitly set
   <var>attr</var>-elements</dfn>, which is either a <span>list</span> of weak references to
   elements or null. It is initially null.</p></li>

   <li><p>Its <span>reflected target</span> has a <dfn>cached <var>attr</var>-associated
   elements</dfn>, which is a <code data-x="">FrozenArray&lt;<var>T</var>&gt;?</code>. It is
   initially null.</p></li>

   <li>
    <p>Its <span>reflected target</span> has an <dfn for="Element,ElementInternals"
    export><var>attr</var>-associated elements</dfn>. To compute the
    <span><var>attr</var>-associated elements</span> for such a <span>reflected target</span>
    <var>reflectedTarget</var>:</p>

    <ol>
     <li><p>Let <var>elements</var> be an empty <span>list</span>.</p></li>

     <li><p>Let <var>element</var> be the result of running <var>reflectedTarget</var>'s <span>get
     the element</span>.</p></li>

     <li>
      <p>If <var>reflectedTarget</var>'s <span>explicitly set <var>attr</var>-elements</span> is not
      null:</p>

      <ol>
       <li>
        <p><span data-x="list iterate">For each</span> <var>attrElement</var> in
        <var>reflectedTarget</var>'s <span>explicitly set <var>attr</var>-elements</span>:</p>

        <ol>
         <li><p>If <var>attrElement</var> is not a <span>descendant</span> of any of
         <var>element</var>'s <span data-x="concept-shadow-including-ancestor">shadow-including
         ancestors</span>, then <span>continue</span>.</p></li>

         <li><p><span data-x="list append">Append</span> <var>attrElement</var> to
         <var>elements</var>.</p></li>
        </ol>
       </li>
      </ol>
     </li>

     <li>
      <p>Otherwise:</p>

      <ol>
       <li><p>Let <var>contentAttributeValue</var> be the result of running
       <var>reflectedTarget</var>'s <span>get the content attribute</span>.

       <li><p>If <var>contentAttributeValue</var> is null, then return null.</p></li>

       <li><p>Let <var>tokens</var> be <var>contentAttributeValue</var>, <span data-x="split a
       string on ASCII whitespace">split on ASCII whitespace</span>.

       <li>
        <p><span data-x="list iterate">For each</span> <var>id</var> of <var>tokens</var>:</p>

        <ol>
         <li>
          <p>Let <var>candidate</var> be the first element, in <span>tree order</span>, that meets
          the following criteria:</p>

          <ul class="brief">
           <li><var>candidate</var>'s <span>root</span> is the same as <var>element</var>'s
           <span>root</span>,</li>
           <li><var>candidate</var>'s <span data-x="concept-ID">ID</span> is <var>id</var>, and</li>
           <li><var>candidate</var> <span>implements</span> <var>T</var>.</li>
          </ul>

          <p>If no such element exists, then <span>continue</span>.</p>
         </li>

         <li><p><span data-x="list append">Append</span> <var>candidate</var> to
         <var>elements</var>.</p></li>
        </ol>
       </li>
      </ol>
     </li>

     <li><p>Return <var>elements</var>.</p></li>
    </ol>
   </li>

   <li>
    <p>The getter steps are:</p>

    <ol>
     <li><p>Let <var>elements</var> be <span>this</span>'s <span><var>attr</var>-associated
     elements</span>.</p></li>

     <li><p>If the contents of <var>elements</var> is equal to the contents of <span>this</span>'s
     <span>cached <var>attr</var>-associated elements</span>, then return <span>this</span>'s
     <span>cached <var>attr</var>-associated elements</span>.</p></li>

     <li><p>Let <var>elementsAsFrozenArray</var> be <var>elements</var>, <span
     data-x="concept-idl-convert">converted</span> to a <code
     data-x="">FrozenArray&lt;<var>T</var>&gt;?</code>.</p></li>

     <li><p>Set <span>this</span>'s <span>cached <var>attr</var>-associated elements</span> to
     <var>elementsAsFrozenArray</var>.</p></li>

     <li><p>Return <var>elementsAsFrozenArray</var>.</p></li>
    </ol>

    <p class="note">This extra caching layer is necessary to preserve the invariant that <code
    data-x="">element.reflectedElements === element.reflectedElements</code>.</p>
   </li>

   <li>
    <p>The setter steps are:</p>
    <ol>
     <li>
      <p>If the given value is null:</p>

      <ol>
       <li><p>Set <span>this</span>'s <span>explicitly set <var>attr</var>-elements</span> to
       null.</p></li>

       <li><p>Run <span>this</span>'s <span>delete the content attribute</span>.</p></li>

       <li><p>Return.</p></li>
      </ol>
     </li>

     <li><p>Run <span>this</span>'s <span>set the content attribute</span> with the empty
     string.</p></li>

     <li><p>Let <var>elements</var> be an empty <span>list</span>.</p></li>

     <li>
      <p><span data-x="list iterate">For each</span> <var>element</var> in the given value:</p>

      <ol>
       <li><p><span data-x="list append">Append</span> a weak reference to <var>element</var> to
       <var>elements</var>.</p></li>
      </ol>
     </li>

     <li><p>Set <span>this</span>'s <span>explicitly set <var>attr</var>-elements</span> to
     <var>elements</var>.</p></li>
    </ol>
   </li>

   <li>
    <p>For element <span data-x="reflected target">reflected targets</span> only: the following
    <span data-x="concept-element-attributes-change-ext">attribute change steps</span>, given
    <var>element</var>, <var>localName</var>, <var>oldValue</var>, <var>value</var>, and
    <var>namespace</var>, are used to synchronize between the content attribute and the IDL
    attribute:</p>

    <ol>
     <li><p>If <var>localName</var> is not <var>attr</var> or <var>namespace</var> is not null, then
     return.</p></li>

     <li><p>Set <var>element</var>'s <span>explicitly set <var>attr</var>-elements</span> to
     null.</p></li>
    </ol>
   </li>
  </ul>

  <p class="note"><span data-x="reflected IDL attribute">Reflected IDL attributes</span> of this
  type are strongly encouraged to have their identifier end in "<code data-x="">Elements</code>" for
  consistency.</p>

  <h4>Using reflect in specifications</h4>

  <p><span data-x="reflect">Reflection</span> is primarily about improving web developer ergonomics
  by giving them typed access to content attributes through <span data-x="reflected IDL
  attribute">reflected IDL attributes</span>. The ultimate source of truth, which the web platform
  builds upon, is the content attributes themselves. That is, specification authors must not use the
  <span>reflected IDL attribute</span> getter or setter steps, but instead must use the content
  attribute presence and value. (Or an abstraction on top, such as the state of an <span>enumerated
  attribute</span>.)</p>

  <p>Two important exceptions to this are <span data-x="reflected IDL attribute">reflected IDL
  attributes</span> whose type is one of the following:</p>

  <ul>
   <li><p><code data-x=""><var>T</var>?</code>, where <var>T</var> is either <code>Element</code> or
   an interface that inherits from <code>Element</code></p></li>

   <li><p><code data-x="">FrozenArray&lt;<var>T</var>&gt;?</code>, where <var>T</var> is either
   <code>Element</code> or an interface that inherits from <code>Element</code></p></li>
  </ul>

  <p>For those, specification authors must use the <span>reflected target</span>'s
  <span><var>attr</var>-associated element</span> and <span><var>attr</var>-associated
  elements</span>, respectively. The content attribute presence and value must not be used as they
  cannot be fully synchronized with the <span>reflected IDL attribute</span>.</p>

  <p>A <span>reflected target</span>'s <span>explicitly set <var>attr</var>-element</span>,
  <span>explicitly set <var>attr</var>-elements</span>, and <span>cached <var>attr</var>-associated
  elements</span> are to be treated as internal implementation details and not to be built upon.</p>

  </div>

  <h4>Collections</h4>

  <p>The <code>HTMLFormControlsCollection</code> and <code>HTMLOptionsCollection</code> interfaces
  are <span data-x="concept-collection">collections</span> derived from the
  <code>HTMLCollection</code> interface. The <code>HTMLAllCollection</code> interface is a <span
  data-x="concept-collection">collection</span>, but is not so derived.</p>


  <h5>The <code>HTMLAllCollection</code> interface</h5>

  <p>The <code>HTMLAllCollection</code> interface is used for the legacy <code
  data-x="dom-document-all">document.all</code> attribute. It operates similarly to
  <code>HTMLCollection</code>; the main differences are that it allows a staggering variety of
  different (ab)uses of its methods to all end up returning something, and that it can be called as
  a function as an alternative to property access.</p>

  <p class="note">All <code>HTMLAllCollection</code> objects are rooted at a <code>Document</code>
  and have a filter that matches all elements, so the elements <span>represented by the
  collection</span> of an <code>HTMLAllCollection</code> object consist of all the descendant
  elements of the root <code>Document</code>.</p>

  <p w-nodev>Objects that implement the <code>HTMLAllCollection</code> interface are <span
  data-x="legacy platform object">legacy platform objects</span> with an additional [[Call]] internal
  method described in the <a href="#HTMLAllCollection-call">section below</a>. They also have an
  <span>[[IsHTMLDDA]]</span> internal slot.</p>

  <div class="note">
   <p>Objects that implement the <code>HTMLAllCollection</code> interface have several unusual
   behaviors, due of the fact that they have an <span>[[IsHTMLDDA]]</span> internal slot:</p>

   <ul>
    <li><p>The <span data-x="js-ToBoolean">ToBoolean</span> abstract operation in JavaScript returns
    false when given objects implementing the <code>HTMLAllCollection</code> interface.</p></li>

    <li><p>The <span data-x="js-abstract-equality">IsLooselyEqual</span> abstract operation,
    when given objects implementing the <code>HTMLAllCollection</code> interface, returns true when
    compared to the <code data-x="">undefined</code> and <code data-x="">null</code> values.
    (Comparisons using the <span data-x="js-strict-equality">IsStrictlyEqual</span> abstract
    operation, and IsLooselyEqual comparisons to other values such as strings or objects, are
    unaffected.)</p></li>

    <li><p>The <code data-x="js-typeof">typeof</code> operator in JavaScript returns the string
    <code data-x="">"undefined"</code> when applied to objects implementing the
    <code>HTMLAllCollection</code> interface.</p></li>
   </ul>

   <p>These special behaviors are motivated by a desire for compatibility with two classes of legacy
   content: one that uses the presence of <code data-x="dom-document-all">document.all</code> as a
   way to detect legacy user agents, and one that only supports those legacy user agents and uses
   the <code data-x="dom-document-all">document.all</code> object without testing for its presence
   first. <ref spec=JAVASCRIPT></p>
  </div>

  <pre><code class="idl">[Exposed=Window,
 <span>LegacyUnenumerableNamedProperties</span>]
interface <dfn interface>HTMLAllCollection</dfn> {
  readonly attribute unsigned long <span data-x="dom-HTMLAllCollection-length">length</span>;
  getter <span>Element</span> (unsigned long index);
  getter (<span>HTMLCollection</span> or <span>Element</span>)? <span data-x="dom-HTMLAllCollection-namedItem">namedItem</span>(DOMString name);
  (<span>HTMLCollection</span> or <span>Element</span>)? <span data-x="dom-HTMLAllCollection-item">item</span>(optional DOMString nameOrIndex);

  // Note: HTMLAllCollection objects have a <a href="#HTMLAllCollection-call">custom [[Call]] internal method</a> and an <span>[[IsHTMLDDA]]</span> internal slot.
};</code></pre>

  <div w-nodev>

  <p>The object's <span>supported property indices</span> are as defined for
  <code>HTMLCollection</code> objects.</p>

  <p>The <span>supported property names</span> consist of the non-empty values of all the <code
  data-x="attr-id">id</code> attributes of all the elements <span>represented by the
  collection</span>, and the non-empty values of all the <code data-x="">name</code> attributes of
  all the <span>"all"-named elements</span> <span>represented by the collection</span>, in
  <span>tree order</span>, ignoring later duplicates, with the <code data-x="attr-id">id</code> of
  an element preceding its <code data-x="">name</code> if it contributes both, they differ from
  each other, and neither is the duplicate of an earlier entry.</p>

  <p>The <dfn attribute for="HTMLAllCollection"><code
  data-x="dom-HTMLAllCollection-length">length</code></dfn> getter steps are to return the number
  of nodes <span>represented by the collection</span>.</p>

  <p>The indexed property getter must return the result of <span
  data-x="concept-get-all-indexed">getting the "all"-indexed element</span> from <span>this</span>
  given the passed index.</p>

  <p>The <dfn method for="HTMLAllCollection"><code
  data-x="dom-HTMLAllCollection-namedItem">namedItem(<var>name</var>)</code></dfn> method steps are
  to return the result of <span data-x="concept-get-all-named">getting the "all"-named
  element(s)</span> from <span>this</span> given <var>name</var>.</p>

  <p>The <dfn method for="HTMLAllCollection"><code
  data-x="dom-HTMLAllCollection-item">item(<var>nameOrIndex</var>)</code></dfn> method  steps
  are:</p>

  <ol>
   <li><p>If <var>nameOrIndex</var> was not provided, return null.</p></li>

   <li><p>Return the result of <span data-x="concept-get-all-indexed-or-named">getting the
   "all"-indexed or named element(s)</span> from <span>this</span>, given
   <var>nameOrIndex</var>.</p></li>
  </ol>

  <hr>

  <!-- https://software.hixie.ch/utilities/js/live-dom-viewer/?saved=2837 -->
  <p>The following elements are <dfn>"all"-named elements</dfn>:
   <code>a</code>,
   <code>button</code>,
   <code>embed</code>,
   <code>form</code>,
   <code>frame</code>,
   <code>frameset</code>,
   <code>iframe</code>,
   <code>img</code>,
   <code>input</code>,
   <code>map</code>,
   <code>meta</code>,
   <code>object</code>,
   <code>select</code>, and
   <code>textarea</code>
  </p>

  <p>To <dfn data-x="concept-get-all-indexed">get the "all"-indexed element</dfn> from an
  <code>HTMLAllCollection</code> <var>collection</var> given an index <var>index</var>, return the
  <var>index</var><sup>th</sup> element in <var>collection</var>, or null if there is no such
  <var>index</var><sup>th</sup> element.</p>

  <p>To <dfn data-x="concept-get-all-named">get the "all"-named element(s)</dfn> from an
  <code>HTMLAllCollection</code> <var>collection</var> given a name <var>name</var>, perform the
  following steps:</p>

  <ol>
   <li><p>If <var>name</var> is the empty string, return null.</p></li>

   <li>
    <p>Let <var>subCollection</var> be an <code>HTMLCollection</code> object rooted at the same
    <code>Document</code> as <var>collection</var>, whose filter matches only elements that are
    either:</p>

    <ul>
     <li><p><span>"all"-named elements</span> with a <code data-x="">name</code> attribute equal to
     <var>name</var>, or,</p></li>

     <li><p>elements with an <span data-x="concept-id">ID</span> equal to <var>name</var>.</p></li>
    </ul>
   </li>

   <li><p>If there is exactly one element in <var>subCollection</var>, then return that
   element.</p></li>

   <li><p>Otherwise, if <var>subCollection</var> is empty, return null.</p></li>

   <li><p>Otherwise, return <var>subCollection</var>.</p></li>
  </ol>

  <p>To <dfn data-x="concept-get-all-indexed-or-named">get the "all"-indexed or named
  element(s)</dfn> from an <code>HTMLAllCollection</code> <var>collection</var> given
  <var>nameOrIndex</var>:

  <ol>
   <li><p>If <var>nameOrIndex</var>, <span data-x="concept-idl-convert">converted</span> to a
   JavaScript String value, is an <span>array index property name</span>, return the result of <span
   data-x="concept-get-all-indexed">getting the "all"-indexed element</span> from
   <var>collection</var> given the number represented by <var>nameOrIndex</var>.</p></li>

   <li><p>Return the result of <span data-x="concept-get-all-named">getting the "all"-named
   element(s)</span> from <var>collection</var> given <var>nameOrIndex</var>.</p></li>
  </ol>

  <h6 id="HTMLAllCollection-call">[[Call]] ( <var>thisArgument</var>,  <var>argumentsList</var> )</h6>

  <ol>
   <li><p>If <var>argumentsList</var>'s <span data-x="list size">size</span> is zero, or if
   <var>argumentsList</var>[0] is undefined, return null.</p></li>

   <li><p>Let <var>nameOrIndex</var> be the result of <span
   data-x="concept-idl-convert">converting</span> <var>argumentsList</var>[0] to a <code
   data-x="idl-DOMString">DOMString</code>.</p></li>

   <li><p>Let <var>result</var> be the result of <span
   data-x="concept-get-all-indexed-or-named">getting the "all"-indexed or named element(s)</span>
   from this <code>HTMLAllCollection</code> given <var>nameOrIndex</var>.</p></li>

   <li><p>Return the result of <span data-x="concept-idl-convert">converting</span>
   <var>result</var> to an ECMAScript value.</p></li>
  </ol>

  <p class="note">The <var>thisArgument</var> is ignored, and thus code such as <code
  data-x="">Function.prototype.call.call(document.all, null, "x")</code> will still search for
  elements. (<code data-x="">document.all.call</code> does not exist, since <code
  data-x="">document.all</code> does not inherit from <code
  data-x="">Function.prototype</code>.)</p>

  </div>


  <h5>The <code>HTMLFormControlsCollection</code> interface</h5>

  <p>The <code>HTMLFormControlsCollection</code> interface is used for
  <span data-x="concept-collection">collections</span> of <span data-x="category-listed">listed
  elements</span> in <code>form</code> elements.</p>

  <pre><code class="idl">[Exposed=Window]
interface <dfn interface>HTMLFormControlsCollection</dfn> : <span>HTMLCollection</span> {
  // inherits <span data-x="dom-HTMLCollection-length">length</span> and <span data-x="dom-HTMLCollection-item">item</span>()
  getter (<span>RadioNodeList</span> or <span>Element</span>)? <span data-x="dom-HTMLFormControlsCollection-namedItem">namedItem</span>(DOMString name); // shadows inherited <span data-x="dom-HTMLCollection-namedItem">namedItem()</span>
};

[Exposed=Window]
interface <dfn interface>RadioNodeList</dfn> : <span>NodeList</span> {
  attribute DOMString <span data-x="dom-RadioNodeList-value">value</span>;
};</code></pre>

  <dl class="domintro">
   <dt><code data-x=""><var>collection</var>.<span subdfn data-x="dom-HTMLCollection-length">length</span></code></dt>
   <dd><p>Returns the number of elements in <var>collection</var>.</p></dd>

   <dt><code data-x=""><var>element</var> = <var>collection</var>.<span subdfn data-x="dom-HTMLCollection-item">item</span>(<var>index</var>)</code></dt>
   <dt><code data-x=""><var>element</var> = <var>collection</var>[<var>index</var>]</code></dt>
   <dd><p>Returns the item at index <var>index</var> in <var>collection</var>. The items are sorted
   in <span>tree order</span>.</p></dd>

   <dt><code data-x=""><var>element</var> = <var>collection</var>.<span subdfn data-x="dom-HTMLFormControlsCollection-namedItem">namedItem</span>(<var>name</var>)</code></dt>
   <dt><code data-x=""><var>radioNodeList</var> = <var>collection</var>.<span data-x="dom-HTMLFormControlsCollection-namedItem">namedItem</span>(<var>name</var>)</code></dt>
   <dt><code data-x=""><var>element</var> = <var>collection</var>[<var>name</var>]</code></dt>
   <dt><code data-x=""><var>radioNodeList</var> = <var>collection</var>[<var>name</var>]</code></dt>
   <dd>
    <p>Returns the item with <span data-x="concept-id">ID</span> or <code
    data-x="attr-fe-name">name</code> <var>name</var> from <var>collection</var>.</p>

    <p>If there are multiple matching items, then a <code>RadioNodeList</code> object containing all
    those elements is returned.</p>
   </dd>

   <dt><code data-x=""><var>radioNodeList</var>.<span subdfn data-x="dom-radionodelist-value">value</span></code></dt>
   <dd><p>Returns the value of the first checked radio button represented by
   <var>radioNodeList</var>.</p></dd>

   <dt><code data-x=""><var>radioNodeList</var>.<span data-x="dom-radionodelist-value">value</span> = <var>value</var></code></dt>
   <dd><p>Checks the first first radio button represented by <var>radioNodeList</var> that has value
   <var>value</var>.</p></dd>
  </dl>

  <div w-nodev>

  <p>The object's <span>supported property indices</span> are as defined for
  <code>HTMLCollection</code> objects.</p>

  <p>The <span>supported property names</span> consist of the non-empty values of all the <code
  data-x="attr-id">id</code> and <code data-x="attr-fe-name">name</code> attributes of all the
  elements <span>represented by the collection</span>, in <span>tree order</span>, ignoring later
  duplicates, with the <code data-x="attr-id">id</code> of an element preceding its <code
  data-x="attr-fe-name">name</code> if it contributes both, they differ from each other, and neither is the
  duplicate of an earlier entry.</p>

  <p>The <dfn method for="HTMLFormControlsCollection"><code
  data-x="dom-HTMLFormControlsCollection-namedItem">namedItem(<var>name</var>)</code></dfn> method
  must act according to the following algorithm:</p>

  <ol>
   <li>If <var>name</var> is the empty string, return null and stop the algorithm.</li>

   <li>If, at the time the method is called, there is exactly one node in the collection that has
   either an <code data-x="attr-id">id</code> attribute or a <code data-x="attr-fe-name">name</code>
   attribute equal to <var>name</var>, then return that node and stop the algorithm.</li>

   <li>Otherwise, if there are no nodes in the collection that have either an <code
   data-x="attr-id">id</code> attribute or a <code data-x="attr-fe-name">name</code> attribute equal
   to <var>name</var>, then return null and stop the algorithm.</li>

   <li>Otherwise, create a new <code>RadioNodeList</code> object representing a <span>live</span>
   view of the <code>HTMLFormControlsCollection</code> object, further filtered so that the only
   nodes in the <code>RadioNodeList</code> object are those that have either an <code
   data-x="attr-id">id</code> attribute or a <code data-x="attr-fe-name">name</code> attribute equal
   to <var>name</var>. The nodes in the <code>RadioNodeList</code> object must be sorted in
   <span>tree order</span>.</li>

   <li>Return that <code>RadioNodeList</code> object.</li>
  </ol>

  <hr>

  <p>Members of the <code>RadioNodeList</code> interface inherited from the <code>NodeList</code>
  interface must behave as they would on a <code>NodeList</code> object.</p>

  <p>The <dfn attribute for="RadioNodeList"><code
  data-x="dom-RadioNodeList-value">value</code></dfn> IDL attribute on the
  <code>RadioNodeList</code> object, on getting, must return the value returned by running the
  following steps:</p>

  <ol>
   <li><p>Let <var>element</var> be the first element in <span>tree order</span>
   represented by the <code>RadioNodeList</code> object that is an <code>input</code> element whose
   <code data-x="attr-input-type">type</code> attribute is in the <span
   data-x="attr-input-type-radio">Radio Button</span> state and whose <span
   data-x="concept-fe-checked">checkedness</span> is true. Otherwise, let it be null.</p></li>

   <li><p>If <var>element</var> is null, return the empty string.</p></li>

   <li><p>If <var>element</var> is an element with no <code
   data-x="attr-input-value">value</code> attribute, return the string "<code data-x="">on</code>".</p></li>

   <li><p>Otherwise, return the value of <var>element</var>'s <code
   data-x="attr-input-value">value</code> attribute.</p></li>
  </ol>

  <p>On setting, the <code data-x="dom-RadioNodeList-value">value</code> IDL attribute must run the
  following steps:</p>

  <ol>
   <li><p>If the new value is the string "<code data-x="">on</code>": let <var>element</var> be the first element in <span>tree order</span>
   represented by the <code>RadioNodeList</code> object that is an <code>input</code> element whose
   <code data-x="attr-input-type">type</code> attribute is in the <span
   data-x="attr-input-type-radio">Radio Button</span> state and whose <code
   data-x="attr-input-value">value</code> content attribute is either absent, or present and equal to the new value, if any. If no such element exists, then instead let <var>element</var> be null.</p>

   <p>Otherwise: let <var>element</var> be the first element in <span>tree order</span>
   represented by the <code>RadioNodeList</code> object that is an <code>input</code> element whose
   <code data-x="attr-input-type">type</code> attribute is in the <span
   data-x="attr-input-type-radio">Radio Button</span> state and whose <code
   data-x="attr-input-value">value</code> content attribute is present and equal to the new value, if
   any. If no such element exists, then instead let <var>element</var> be null.</p></li>

   <li><p>If <var>element</var> is not null, then set its <span
   data-x="concept-fe-checked">checkedness</span> to true.</p>
  </ol>

<!--
https://software.hixie.ch/utilities/js/live-dom-viewer/?%3C%21DOCTYPE%20html%3E...%0A%3Cform%20name%3D%22a%22%3E%3Cinput%20id%3D%22x%22%20name%3D%22y%22%3E%3Cinput%20name%3D%22x%22%20id%3D%22y%22%3E%3C/form%3E%0A%3Cscript%3E%0A%20%20var%20x%3B%0A%20%20w%28x%20%3D%20document.forms%5B%27a%27%5D%5B%27x%27%5D%29%3B%0A%20%20w%28x.length%29%3B%0A%20%20x%5B0%5D.parentNode.removeChild%28x%5B0%5D%29%3B%0A%20%20w%28x.length%29%3B%0A%20%20w%28x%20%3D%3D%20document.forms%5B%27a%27%5D%5B%27x%27%5D%29%3B%0A%3C/script%3E%0A
-->

  </div>


  <h5>The <code>HTMLOptionsCollection</code> interface</h5>

  <p>The <code>HTMLOptionsCollection</code> interface is used for <span
  data-x="concept-collection">collections</span> of <code>option</code> elements. It is always
  rooted on a <code>select</code> element and has attributes and methods that manipulate that
  element's descendants.</p>

  <pre><code class="idl">[Exposed=Window]
interface <dfn interface>HTMLOptionsCollection</dfn> : <span>HTMLCollection</span> {
  // inherits <span data-x="dom-HTMLCollection-item">item</span>(), <span data-x="dom-HTMLCollection-namedItem">namedItem</span>()
  [<span>CEReactions</span>] attribute unsigned long <span data-x="dom-HTMLOptionsCollection-length">length</span>; // shadows inherited <span data-x="dom-HTMLCollection-length">length</span>
  [<span>CEReactions</span>] <a href="#dom-htmloptionscollection-setter">setter</a> undefined (unsigned long index, <span>HTMLOptionElement</span>? option);
  [<span>CEReactions</span>] undefined <span data-x="dom-HTMLOptionsCollection-add">add</span>((<span>HTMLOptionElement</span> or <span>HTMLOptGroupElement</span>) element, optional (<span>HTMLElement</span> or long)? before = null);
  [<span>CEReactions</span>] undefined <span data-x="dom-HTMLOptionsCollection-remove">remove</span>(long index);
  attribute long <span data-x="dom-HTMLOptionsCollection-selectedIndex">selectedIndex</span>;
};</code></pre>

  <dl class="domintro">
   <dt><code data-x=""><var>collection</var>.<span subdfn data-x="dom-HTMLOptionsCollection-length">length</span></code></dt>
   <dd><p>Returns the number of elements in <var>collection</var>.</p></dd>

   <dt><code data-x=""><var>collection</var>.<span data-x="dom-HTMLOptionsCollection-length">length</span> = <var>value</var></code></dt>
   <dd>
    <p>When set to a smaller number than the existing length, truncates the number of
    <code>option</code> elements in the container corresponding to <var>collection</var>.</p>

    <p>When set to a greater number than the existing length, if that number is less than or equal
    to 100000, adds new blank <code>option</code> elements to the container corresponding to
    <var>collection</var>.</p>
   </dd>

   <dt><code data-x=""><var>element</var> = <var>collection</var>.<span data-x="dom-HTMLCollection-item">item</span>(<var>index</var>)</code></dt>
   <dt><code data-x=""><var>element</var> = <var>collection</var>[<var>index</var>]</code></dt>
   <dd><p>Returns the item at index <var>index</var> in <var>collection</var>. The items are sorted
   in <span>tree order</span>.</p></dd>

   <dt><code data-x=""><var>collection</var>[<var>index</var>] = <var>element</var></code></dt>
   <dd>
    <p>When <var>index</var> is a greater number than the number of items in <var>collection</var>,
    adds new blank <code>option</code> elements in the corresponding container.</p>

    <p>When set to null, removes the item at index <var>index</var> from <var>collection</var>.</p>

    <p>When set to an <code>option</code> element, adds or replaces it at index <var>index</var> in
    <var>collection</var>.</p>
   </dd>

   <dt><code data-x=""><var>element</var> = <var>collection</var>.<span subdfn data-x="dom-HTMLCollection-namedItem">namedItem</span>(<var>name</var>)</code></dt>
   <dt><code data-x=""><var>element</var> = <var>collection</var>[<var>name</var>]</code></dt>
   <dd>
    <p>Returns the item with <span data-x="concept-id">ID</span> or <code
    data-x="attr-option-name">name</code> <var>name</var> from <var>collection</var>.</p>

    <p>If there are multiple matching items, then the first is returned.</p>
   </dd>

   <dt><code data-x=""><var>collection</var>.<span subdfn data-x="dom-HTMLOptionsCollection-add">add</span>(<var>element</var>[, <var>before</var>])</code></dt>
   <dd>
    <p>Inserts <var>element</var> before the node given by <var>before</var>.</p>

    <p>The <var>before</var> argument can be a number, in which case <var>element</var> is inserted
    before the item with that number, or an element from <var>collection</var>, in which case
    <var>element</var> is inserted before that element.</p>

    <p>If <var>before</var> is omitted, null, or a number out of range, then <var>element</var> will
    be added at the end of the list.</p>

    <p>Throws a <span>"<code>HierarchyRequestError</code>"</span> <code>DOMException</code> if
    <var>element</var> is an ancestor of the element into which it is to be inserted.</p>
   </dd>

   <dt><code data-x=""><var>collection</var>.<span subdfn data-x="dom-HTMLOptionsCollection-remove">remove</span>(<var>index</var>)</code></dt>
   <dd><p>Removes the item with index <var>index</var> from <var>collection</var>.</p></dd>

   <dt><code data-x=""><var>collection</var>.<span data-x="dom-HTMLOptionsCollection-selectedIndex">selectedIndex</span></code></dt>
   <dd><p>Returns the index of the first selected item, if any, or &#x2212;1 if there is no selected
   item.</p></dd>

   <dt><code data-x=""><var>collection</var>.<span subdfn data-x="dom-HTMLOptionsCollection-selectedIndex">selectedIndex</span> = <var>index</var></code></dt>
   <dd><p>Changes the selection to the <code>option</code> element at index <var>index</var> in
   <var>collection</var>.</p></dd>
  </dl>

  <div w-nodev>

  <p>The object's <span>supported property indices</span> are as defined for
  <code>HTMLCollection</code> objects.</p>

  <p>The <dfn attribute for="HTMLOptionsCollection"><code
  data-x="dom-HTMLOptionsCollection-length">length</code></dfn> getter steps are to return the
  number of nodes <span>represented by the collection</span>.</p>

  <p>The <code data-x="dom-HTMLOptionsCollection-length">length</code> setter steps are:</p>

  <ol>
   <li><p>Let <var>current</var> be the number of nodes <span>represented by the
   collection</span>.</p></li>

   <li>
    <p>If the given value is greater than <var>current</var>, then:</p>

    <ol>
     <li><p>If the given value is greater than 100,000, then return.</p></li>

     <li><p>Let <var>n</var> be <var>value</var> &minus; <var>current</var>.</p></li>

     <li><p>Append <var>n</var> new <code>option</code> elements with no attributes and no child
     nodes to the <code>select</code> element on which <span>this</span> is rooted. Mutation events
     must be fired as if a <code>DocumentFragment</code> containing the new <code>option</code>
     elements had been inserted.</p></li>
    </ol>
   </li>

   <li>
    <p>If the given value is less than <var>current</var>, then:</p>

    <ol>
     <li><p>Let <var>n</var> be <var>current</var> &minus; <var>value</var>.</p></li>

     <li><p>Remove the last <var>n</var> nodes in the collection from their parent nodes.</p></li>
    </ol>
   </li>
  </ol>

  <p class="note">Setting <code data-x="dom-HTMLOptionsCollection-length">length</code> never removes
  or adds any <code>optgroup</code> elements, and never adds new children to existing
  <code>optgroup</code> elements (though it can remove children from them).</p>

  <p>The <span>supported property names</span> consist of the non-empty values of all the <code
  data-x="attr-id">id</code> and <code data-x="attr-option-name">name</code> attributes of all the
  elements <span>represented by the collection</span>, in <span>tree order</span>, ignoring later
  duplicates, with the <code data-x="attr-id">id</code> of an element preceding its <code
  data-x="attr-option-name">name</code> if it contributes both, they differ from each other, and neither is
  the duplicate of an earlier entry.</p>

  <p id="dom-htmloptionscollection-setter">When the user agent is to <span>set the value of a new
  indexed property</span> or <span>set the value of an existing indexed property</span> for a given
  property index <var>index</var> to a new value <var>value</var>, it must run the following
  algorithm:</p>

  <ol>
   <li><p>If <var>value</var> is null, invoke the steps for the <code
   data-x="dom-HTMLOptionsCollection-remove">remove</code> method with <var>index</var> as
   the argument, and return.</p></li>

   <li><p>Let <var>length</var> be the number of nodes <span>represented by the
   collection</span>.</p></li>

   <li><p>Let <var>n</var> be <var>index</var> minus <var>length</var>.</p></li>

   <li><p>If <var>n</var> is greater than zero, then <span
   data-x="concept-node-append">append</span> a <code>DocumentFragment</code> consisting of <span
   data-x=""><var>n</var>-1</span> new <code>option</code> elements with no attributes and
   no child nodes to the <code>select</code> element on which the <code>HTMLOptionsCollection</code>
   is rooted.</p></li>

   <li><p>If <var>n</var> is greater than or equal to zero, <span
   data-x="concept-node-append">append</span> <var>value</var> to the <code>select</code>
   element. Otherwise, <span data-x="concept-node-replace">replace</span> the <var>index</var>th element in the collection by <var>value</var>.</p></li>
  </ol>

  <p>The <dfn method for="HTMLOptionsCollection"><code
  data-x="dom-HTMLOptionsCollection-add">add(<var>element</var>, <var>before</var>)</code></dfn>
  method must act according to the following algorithm:</p>

  <ol>
   <li><p>If <var>element</var> is an ancestor of the <code>select</code> element on which
   the <code>HTMLOptionsCollection</code> is rooted, then throw a
   <span>"<code>HierarchyRequestError</code>"</span> <code>DOMException</code>.</li>

   <li><p>If <var>before</var> is an element, but that element isn't a descendant of the
   <code>select</code> element on which the <code>HTMLOptionsCollection</code> is rooted, then throw
   a <span>"<code>NotFoundError</code>"</span> <code>DOMException</code>.</p></li>

   <li><p>If <var>element</var> and <var>before</var> are the same element, then
   return.</li>

   <li><p>If <var>before</var> is a node, then let <var>reference</var> be that
   node. Otherwise, if <var>before</var> is an integer, and there is a <var>before</var>th node in the collection, let <var>reference</var> be that node.
   Otherwise, let <var>reference</var> be null.</p></li>

   <li><p>If <var>reference</var> is not null, let <var>parent</var> be the parent
   node of <var>reference</var>. Otherwise, let <var>parent</var> be the
   <code>select</code> element on which the <code>HTMLOptionsCollection</code> is rooted.</p></li>

   <li><p><span>Pre-insert</span> <var>element</var> into <var>parent</var> node before
   <var>reference</var>.</p>
  </ol>

  <p>The <dfn method for="HTMLOptionsCollection"><code
  data-x="dom-HTMLOptionsCollection-remove">remove(<var>index</var>)</code></dfn> method must act
  according to the following algorithm:</p>

  <ol>
   <li><p>If the number of nodes <span>represented by the collection</span> is zero, return.</li>

   <li><p>If <var>index</var> is not a number greater than or equal to 0 and less than the
   number of nodes <span>represented by the collection</span>, return.</p></li>
   <!-- note that Web IDL converts 'a', NaN, -0.5, 0.5, most objects, and null to 0, and numbers in
   general truncate. so what we're checking against here in a way has very little to do with what's
   going on in the JS -->
   <!-- objects get converted by calling ToNumber which calls ToPrimitive which eventually calls valueOf:
         https://software.hixie.ch/utilities/js/live-dom-viewer/?saved=2828
         https://software.hixie.ch/utilities/js/live-dom-viewer/?saved=2833
    -->
   <!-- same for select.remove(), which calls this algorithm also:
         https://software.hixie.ch/utilities/js/live-dom-viewer/?saved=2826
         https://software.hixie.ch/utilities/js/live-dom-viewer/?saved=2825
         https://software.hixie.ch/utilities/js/live-dom-viewer/?saved=2827
     -->

   <li><p>Let <var>element</var> be the <var>index</var>th element in the
   collection.</p></li>

   <li><p>Remove <var>element</var> from its parent node.</p></li>
  </ol>

  <p>The <dfn attribute for="HTMLOptionsCollection"><code
  data-x="dom-HTMLOptionsCollection-selectedIndex">selectedIndex</code></dfn> IDL attribute must act
  like the identically named attribute on the <code>select</code> element on which the
  <code>HTMLOptionsCollection</code> is rooted</p>

  <!-- see also https://ln.hixie.ch/?start=1161042744&count=1 -->

  </div>


  <h4>The <code>DOMStringList</code> interface</h4>

  <p>The <code>DOMStringList</code> interface is a non-fashionable retro way of representing a list
  of strings.</p>

  <pre><code class="idl">[Exposed=(Window,Worker)]
interface <dfn interface>DOMStringList</dfn> {
  readonly attribute unsigned long <span data-x="dom-DOMStringList-length">length</span>;
  getter DOMString? <span data-x="dom-DOMStringList-item">item</span>(unsigned long index);
  boolean <span data-x="dom-DOMStringList-contains">contains</span>(DOMString string);
};</code></pre>

  <p w-nodev class="warning">New APIs must use <code data-x="">sequence&lt;DOMString></code> or
  equivalent rather than <code>DOMStringList</code>.</p>

  <dl class="domintro">
   <dt><code data-x=""><var>strings</var>.<span subdfn data-x="dom-DOMStringList-length">length</span></code></dt>
   <dd><p>Returns the number of strings in <var>strings</var>.</p></dd>

   <dt><code data-x=""><var>strings</var>[<var>index</var>]</code></dt>
   <dt><code data-x=""><var>strings</var>.<span subdfn data-x="dom-DOMStringList-item">item</span>(<var>index</var>)</code></dt>
   <dd><p>Returns the string with index <var>index</var> from <var>strings</var>.</p></dd>

   <dt><code data-x=""><var>strings</var>.<span subdfn data-x="dom-DOMStringList-contains">contains</span>(<var>string</var>)</code></dt>
   <dd><p>Returns true if <var>strings</var> contains <var>string</var>, and false
   otherwise.</p></dd>
  </dl>

  <div w-nodev>

  <p>Each <code>DOMStringList</code> object has an associated <span>list</span>.</p>

  <p>The <code>DOMStringList</code> interface <span>supports indexed properties</span>. The
  <span>supported property indices</span> are the <span>indices</span> of <span>this</span>'s
  associated list.</p>

  <p>The <dfn attribute for="DOMStringList"
  data-x="dom-DOMStringList-length"><code>length</code></dfn> getter steps are to return
  <span>this</span>'s associated list's <span data-x="list size">size</span>.</p>

  <p>The <dfn method for="DOMStringList"
  data-x="dom-DOMStringList-item"><code>item(<var>index</var>)</code></dfn> method steps are to
  return the <var>index</var>th item in <span>this</span>'s associated list, or null if
  <var>index</var> plus one is greater than <span>this</span>'s associated list's <span data-x="list
  size">size</span>.</p>

  <p>The <dfn method for="DOMStringList"
  data-x="dom-DOMStringList-contains"><code>contains(<var>string</var>)</code></dfn> method steps
  are to return true if <span>this</span>'s associated list <span data-x="list
  contains">contains</span> <var>string</var>, and false otherwise.</p>

  </div>


  <h3 split-filename="structured-data">Safe passing of structured data</h3>

  <p id="structuredclone"><span id="structured-clone"></span>To support passing JavaScript objects,
  including <span data-x="platform object">platform objects</span>, across <span>realm</span>
  boundaries, this specification defines <span w-nodev>the following </span>infrastructure for
  serializing and deserializing objects, including in some cases transferring the underlying data
  instead of copying it. Collectively this serialization/deserialization process is known as
  "structured cloning", although most APIs perform separate serialization and deserialization steps.
  (With the notable exception being the <code data-x="dom-structuredClone">structuredClone()</code>
  method.)</p>

  <div w-nodev>

  <p>This section uses the terminology and typographic conventions from the JavaScript
  specification. <ref spec=JAVASCRIPT></p>

  </div>

  <h4 export data-lt="serializable object"><dfn>Serializable objects</dfn></h4>

  <p><span>Serializable objects</span> support being serialized, and later deserialized, in a way
  that is independent of any given <span>realm</span>. This allows them to be stored on disk and
  later restored, or cloned across <span>agent</span> and even <span>agent cluster</span>
  boundaries.</p>

  <p>Not all objects are <span>serializable objects</span>, and not all aspects of objects that are
  <span>serializable objects</span> are necessarily preserved when they are serialized.</p>

  <div w-nodev>

  <p><span data-x="platform object">Platform objects</span> can be <span>serializable objects</span>
  if their <span>primary interface</span> is decorated with the <dfn extended-attribute
  data-lt="Serializable" data-x="Serializable"><code>[Serializable]</code></dfn> IDL <span>extended
  attribute</span>. Such interfaces must also define the following algorithms:</p>

  <dl>
   <dt><dfn export>serialization steps</dfn>, taking a <span>platform object</span>
   <var>value</var>, a <span>Record</span> <var>serialized</var>, and a boolean
   <var>forStorage</var></dt>
   <dd>
    <p>A set of steps that serializes the data in <var>value</var> into fields of
    <var>serialized</var>. The resulting data serialized into <var>serialized</var> must be
    independent of any <span>realm</span>.</p>

    <p>These steps may throw an exception if serialization is not possible.</p>

    <p>These steps may perform a <span>sub-serialization</span> to serialize nested data
    structures. They should not call <span>StructuredSerialize</span> directly, as doing so will
    omit the important <var>memory</var> argument.</p>

    <p>The introduction of these steps should omit mention of the <var>forStorage</var> argument if
    it is not relevant to the algorithm.</p>
   </dd>

   <dt><dfn export>deserialization steps</dfn>, taking a <span>Record</span> <var>serialized</var>,
   a <span>platform object</span> <var>value</var>, and a <span>realm</span>
   <var>targetRealm</var></dt>
   <dd>
    <p>A set of steps that deserializes the data in <var>serialized</var>, using it to set up
    <var>value</var> as appropriate. <var>value</var> will be a newly-created instance of the
    <span>platform object</span> type in question, with none of its internal data set up; setting
    that up is the job of these steps.</p>

    <p>These steps may throw an exception if deserialization is not possible.</p>

    <p>These steps may perform a <span>sub-deserialization</span> to deserialize nested data
    structures. They should not call <span>StructuredDeserialize</span> directly, as doing so will
    omit the important <var>targetRealm</var> and <var>memory</var> arguments.</p>
   </dd>
  </dl>

  <p>It is up to the definition of individual platform objects to determine what data is serialized
  and deserialized by these steps. Typically the steps are very symmetric.</p>

  <p>The <code data-x="Serializable">[Serializable]</code> extended attribute must take no
  arguments, and must only appear on an interface. It must not appear more than once on an
  interface.</p>

  <p>For a given <span>platform object</span>, only the object's <span>primary interface</span> is
  considered during the (de)serialization process. Thus, if inheritance is involved in defining the
  interface, each <code data-x="Serializable">[Serializable]</code>-annotated interface in the
  inheritance chain needs to define standalone <span>serialization steps</span> and
  <span>deserialization steps</span>, including taking into account any important data that might
  come from inherited interfaces.</p>

  <div class="example">
   <p>Let's say we were defining a platform object <code data-x="">Person</code>, which had
   associated with it two pieces of associated data:</p>

   <ul class="brief">
    <li>a name value, which is a string;</li>
    <li>and a best friend value, which is either another <code data-x="">Person</code> instance or
    null</li>
   </ul>

   <p>We could then define <code data-x="">Person</code> instances to be <span>serializable
   objects</span> by annotating the <code data-x="">Person</code> interface with the <code
   data-x="Serializable">[Serializable]</code> <span>extended attribute</span>, and defining the
   following accompanying algorithms:</p>

   <dl>
    <dt><span>serialization steps</span></dt>
    <dd>
     <ol>
      <li><p>Set <var>serialized</var>.[[Name]] to <var>value</var>'s associated name
      value.</p></li>

      <li><p>Let <var>serializedBestFriend</var> be the <span>sub-serialization</span> of
      <var>value</var>'s associated best friend value.</p></li>

      <li><p>Set <var>serialized</var>.[[BestFriend]] to <var>serializedBestFriend</var>.</p></li>
     </ol>
    </dd>

    <dt><span>deserialization steps</span></dt>
    <dd>
     <ol>
      <li><p>Set <var>value</var>'s associated name value to
      <var>serialized</var>.[[Name]].</p></li>

      <li><p>Let <var>deserializedBestFriend</var> be the <span>sub-deserialization</span> of
      <var>serialized</var>.[[BestFriend]].</p></li>

      <li><p>Set <var>value</var>'s associated best friend value to
      <var>deserializedBestFriend</var>.</p></li>
     </ol>
    </dd>
   </dl>
  </div>

  <p>Objects defined in the JavaScript specification are handled by the
  <span>StructuredSerialize</span> abstract operation directly.</p>

  <p class="note" id="cloneable-objects">Originally, this specification defined the concept of
  "cloneable objects", which could be cloned from one <span>realm</span> to another. However, to
  better specify the behavior of certain more complex situations, the model was updated to make the
  serialization and deserialization explicit.</p>

  </div>

  <h4 export data-lt="transferable object"><dfn>Transferable objects</dfn></h4>

  <p><span>Transferable objects</span> support being transferred across <span
  data-x="agent">agents</span>. Transferring is effectively recreating the object while sharing a
  reference to the underlying data and then detaching the object being transferred. This is useful
  to transfer ownership of expensive resources. Not all objects are <span>transferable
  objects</span> and not all aspects of objects that are <span>transferable objects</span> are
  necessarily preserved when transferred.</p>

  <p class="note">Transferring is an irreversible and non-idempotent operation. Once an object has
  been transferred, it cannot be transferred, or indeed used, again.</p>

  <div w-nodev>

  <p><span data-x="platform object">Platform objects</span> can be <span>transferable objects</span>
  if their <span>primary interface</span> is decorated with the <dfn extended-attribute
  data-lt="Transferable" data-x="Transferable"><code>[Transferable]</code></dfn> IDL <span>extended
  attribute</span>. Such interfaces must also define the following algorithms:</p>

  <dl>
   <dt><dfn export>transfer steps</dfn>, taking a <span>platform object</span>
   <var>value</var> and a <span>Record</span> <var>dataHolder</var></dt>
   <dd>
    <p>A set of steps that transfers the data in <var>value</var> into fields of
    <var>dataHolder</var>. The resulting data held in <var>dataHolder</var> must be
    independent of any <span>realm</span>.</p>

    <p>These steps may throw an exception if transferral is not possible.</p>
   </dd>

   <dt><dfn export>transfer-receiving steps</dfn>, taking a <span>Record</span>
   <var>dataHolder</var> and a <span>platform object</span> <var>value</var></dt>
   <dd>
    <p>A set of steps that receives the data in <var>dataHolder</var>, using it to set up
    <var>value</var> as appropriate. <var>value</var> will be a newly-created instance of the
    <span>platform object</span> type in question, with none of its internal data set up; setting
    that up is the job of these steps.</p>

    <p>These steps may throw an exception if it is not possible to receive the transfer.</p>
   </dd>
  </dl>

  <p>It is up to the definition of individual platform objects to determine what data is transferred
  by these steps. Typically the steps are very symmetric.</p>

  <p>The <code data-x="Transferable">[Transferable]</code> extended attribute must take no
  arguments, and must only appear on an interface. It must not appear more than once on an
  interface.</p>

  <p>For a given <span>platform object</span>, only the object's <span>primary interface</span> is
  considered during the transferring process. Thus, if inheritance is involved in defining the
  interface, each <code data-x="Transferable">[Transferable]</code>-annotated interface in the
  inheritance chain needs to define standalone <span>transfer steps</span> and
  <span>transfer-receiving steps</span>, including taking into account any important data that might
  come from inherited interfaces.</p>

  <p><span data-x="platform object">Platform objects</span> that are <span>transferable
  objects</span> have a <dfn for="platform object" attribute>[[Detached]]</dfn> internal slot. This
  is used to ensure that once a platform object has been transferred, it cannot be transferred
  again.</p>

  <p>Objects defined in the JavaScript specification are handled by the
  <span>StructuredSerializeWithTransfer</span> abstract operation directly.</p>

  <h4 id="structuredserializeinternal" noexport data-lt="StructuredSerializeInternal"
  abstract-op><dfn>StructuredSerializeInternal</dfn> ( <var>value</var>, <var>forStorage</var> [ ,
  <var>memory</var> ] )</h4>

  <p>The <span>StructuredSerializeInternal</span> abstract operation takes as input a JavaScript
  value <var>value</var> and serializes it to a <span>realm</span>-independent form, represented
  here as a <span>Record</span>. This serialized form has all the information necessary to later
  deserialize into a new JavaScript value in a different realm.</p>

  <p>This process can throw an exception, for example when trying to serialize un-serializable
  objects.</p>

  <ol>
   <li>
    <p>If <var>memory</var> was not supplied, let <var>memory</var> be an empty <span
    data-x="ordered map">map</span>.</p>

    <p class="note">The purpose of the <var>memory</var> map is to avoid serializing objects twice.
    This ends up preserving cycles and the identity of duplicate objects in graphs.</p>
   </li>

   <li><p>If <var>memory</var>[<var>value</var>] <span data-x="map exists">exists</span>, then
   return <var>memory</var>[<var>value</var>].</p></li>

   <li><p>Let <var>deep</var> be false.</p></li>

   <li><p>If <span data-x="js-Type">Type</span>(<var>value</var>) is Undefined, Null, Boolean,
   Number, BigInt, or String, then return { [[Type]]: "primitive",
   [[Value]]: <var>value</var> }.</p></li>

   <li><p>If <span data-x="js-Type">Type</span>(<var>value</var>) is Symbol, then throw a
   <span>"<code>DataCloneError</code>"</span> <code>DOMException</code>.</p></li>

   <li><p>Let <var>serialized</var> be an uninitialized value.</p></li>

   <li><p>If <var>value</var> has a [[BooleanData]] internal slot, then set <var>serialized</var> to
   { [[Type]]: "Boolean", [[BooleanData]]: <var>value</var>.[[BooleanData]] }.</p></li>

   <li><p>Otherwise, if <var>value</var> has a [[NumberData]] internal slot, then set
   <var>serialized</var> to { [[Type]]: "Number", [[NumberData]]: <var>value</var>.[[NumberData]]
   }.</p></li>

   <li><p>Otherwise, if <var>value</var> has a [[BigIntData]]
   internal slot, then set <var>serialized</var> to { [[Type]]: "BigInt", [[BigIntData]]:
   <var>value</var>.[[BigIntData]] }.</p></li>

   <li><p>Otherwise, if <var>value</var> has a [[StringData]] internal slot, then set
   <var>serialized</var> to { [[Type]]: "String", [[StringData]]: <var>value</var>.[[StringData]]
   }.</p></li>

   <li><p>Otherwise, if <var>value</var> has a [[DateValue]] internal slot, then set
   <var>serialized</var> to { [[Type]]: "Date", [[DateValue]]: <var>value</var>.[[DateValue]]
   }.</p></li>

   <li><p>Otherwise, if <var>value</var> has a [[RegExpMatcher]] internal slot, then set
   <var>serialized</var> to { [[Type]]: "RegExp", [[RegExpMatcher]]:
   <var>value</var>.[[RegExpMatcher]], [[OriginalSource]]: <var>value</var>.[[OriginalSource]],
   [[OriginalFlags]]: <var>value</var>.[[OriginalFlags]] }.</p></li>

   <li>
    <p>Otherwise, if <var>value</var> has an [[ArrayBufferData]] internal slot, then:</p>

    <ol>
     <li>
      <p>If <span>IsSharedArrayBuffer</span>(<var>value</var>) is true, then:

      <ol>
       <li>
        <p>If the <span>current settings object</span>'s <span
        data-x="concept-settings-object-cross-origin-isolated-capability">cross-origin isolated
        capability</span> is false, then throw a <span>"<code>DataCloneError</code>"</span>
        <code>DOMException</code>.</p>

        <p class="note">This check is only needed when serializing (and not when deserializing) as
        the <span data-x="concept-settings-object-cross-origin-isolated-capability">cross-origin
        isolated capability</span> cannot change over time and a <code>SharedArrayBuffer</code>
        cannot leave an <span>agent cluster</span>.</p>
       </li>

       <li><p>If <var>forStorage</var> is true, then throw a
       <span>"<code>DataCloneError</code>"</span> <code>DOMException</code>.</p></li>

       <li><p>If <var>value</var> has an [[ArrayBufferMaxByteLength]] internal slot, then set
       <var>serialized</var> to { [[Type]]: "GrowableSharedArrayBuffer", [[ArrayBufferData]]:
       <var>value</var>.[[ArrayBufferData]], [[ArrayBufferByteLengthData]]:
       <var>value</var>.[[ArrayBufferByteLengthData]], [[ArrayBufferMaxByteLength]]:
       <var>value</var>.[[ArrayBufferMaxByteLength]], [[AgentCluster]]: the <span>surrounding
       agent</span>'s <span>agent cluster</span> }.</p></li>

       <li><p>Otherwise, set <var>serialized</var> to { [[Type]]: "SharedArrayBuffer",
       [[ArrayBufferData]]: <var>value</var>.[[ArrayBufferData]], [[ArrayBufferByteLength]]:
       <var>value</var>.[[ArrayBufferByteLength]], [[AgentCluster]]: the <span>surrounding
       agent</span>'s <span>agent cluster</span> }.</p></li>
      </ol>
     </li>

     <li>
      <p>Otherwise:</p>

      <ol>
       <li><p>If <span>IsDetachedBuffer</span>(<var>value</var>) is true, then throw a
       <span>"<code>DataCloneError</code>"</span> <code>DOMException</code>.</p></li>

       <li><p>Let <var>size</var> be <var>value</var>.[[ArrayBufferByteLength]].</li>

       <li>
        <p>Let <var>dataCopy</var> be ? <span>CreateByteDataBlock</span>(<var>size</var>).</p>

        <p class="note">This can throw a <code data-x="js-RangeError">RangeError</code> exception
        upon allocation failure.</p>
       </li>

       <li><p>Perform <span>CopyDataBlockBytes</span>(<var>dataCopy</var>, 0,
       <var>value</var>.[[ArrayBufferData]], 0, <var>size</var>).</p></li>

       <li><p>If <var>value</var> has an [[ArrayBufferMaxByteLength]] internal slot, then set
       <var>serialized</var> to { [[Type]]: "ResizableArrayBuffer", [[ArrayBufferData]]:
       <var>dataCopy</var>, [[ArrayBufferByteLength]]: <var>size</var>,
       [[ArrayBufferMaxByteLength]]: <var>value</var>.[[ArrayBufferMaxByteLength]] }.</p></li>

       <li><p>Otherwise, set <var>serialized</var> to { [[Type]]: "ArrayBuffer",
       [[ArrayBufferData]]: <var>dataCopy</var>, [[ArrayBufferByteLength]]: <var>size</var>
       }.</p></li>

      </ol>
     </li>
    </ol>
   </li>

   <li>
    <p>Otherwise, if <var>value</var> has a [[ViewedArrayBuffer]] internal slot, then:</p>

    <ol>
     <li><p>If <span>IsArrayBufferViewOutOfBounds</span>(<var>value</var>) is true, then throw a
     <span>"<code>DataCloneError</code>"</span> <code>DOMException</code>.</p></li>

     <li><p>Let <var>buffer</var> be the value of <var>value</var>'s [[ViewedArrayBuffer]] internal
     slot.</p></li>

     <li><p>Let <var>bufferSerialized</var> be ?
     <span>StructuredSerializeInternal</span>(<var>buffer</var>, <var>forStorage</var>,
     <var>memory</var>).</p></li>

     <li><p><span>Assert</span>: <var>bufferSerialized</var>.[[Type]] is "ArrayBuffer",
     "ResizableArrayBuffer", "SharedArrayBuffer", or "GrowableSharedArrayBuffer".</p></li>

     <li><p>If <var>value</var> has a [[DataView]] internal slot, then set <var>serialized</var> to
     { [[Type]]: "ArrayBufferView", [[Constructor]]: "DataView", [[ArrayBufferSerialized]]:
     <var>bufferSerialized</var>, [[ByteLength]]: <var>value</var>.[[ByteLength]], [[ByteOffset]]:
     <var>value</var>.[[ByteOffset]] }.</p></li>

     <li>
      <p>Otherwise:</p>

      <ol>
       <li><p><span>Assert</span>: <var>value</var> has a [[TypedArrayName]] internal slot.</p></li>

       <li><p>Set <var>serialized</var> to { [[Type]]: "ArrayBufferView", [[Constructor]]:
       <var>value</var>.[[TypedArrayName]], [[ArrayBufferSerialized]]: <var>bufferSerialized</var>,
       [[ByteLength]]: <var>value</var>.[[ByteLength]], [[ByteOffset]]:
       <var>value</var>.[[ByteOffset]], [[ArrayLength]]: <var>value</var>.[[ArrayLength]] }.</p></li>
      </ol>
     </li>
    </ol>
   </li>

   <li>
    <p>Otherwise, if <var>value</var> has [[MapData]] internal slot, then:</p>

    <ol>
     <li><p>Set <var>serialized</var> to { [[Type]]: "Map", [[MapData]]: a new empty <span
     data-x="js-List">List</span> }.</p></li>

     <li><p>Set <var>deep</var> to true.</p></li>
    </ol>
   </li>

   <li>
    <p>Otherwise, if <var>value</var> has [[SetData]] internal slot, then:</p>

    <ol>
     <li><p>Set <var>serialized</var> to { [[Type]]: "Set", [[SetData]]: a new empty <span
     data-x="js-List">List</span> }.</p></li>

     <li><p>Set <var>deep</var> to true.</p></li>
    </ol>
   </li>

   <li>
    <p>Otherwise, if <var>value</var> has an [[ErrorData]] internal slot and <var>value</var> is not
    a <span>platform object</span>, then:</p>
    <!-- "is not a platform object" check is needed because DOMExceptions can have [[ErrorData]]
         too -->

    <ol>
     <li><p>Let <var>name</var> be ? <span data-x="js-Get">Get</span>(<var>value</var>,
     "name").</p></li>

     <li><p>If <var>name</var> is not one of "Error", "EvalError", "RangeError", "ReferenceError",
     "SyntaxError", "TypeError", or "URIError", then set <var>name</var> to "Error".</p></li>

     <li><p>Let <var>valueMessageDesc</var> be ? <var>value</var>.[[GetOwnProperty]]("<code
     data-x="">message</code>").</p></li>

     <li><p>Let <var>message</var> be undefined if
     <span>IsDataDescriptor</span>(<var>valueMessageDesc</var>) is false, and
     ? <span>ToString</span>(<var>valueMessageDesc</var>.[[Value]]) otherwise.</p></li>

     <li><p>Set <var>serialized</var> to { [[Type]]: "Error", [[Name]]: <var>name</var>,
     [[Message]]: <var>message</var> }.</p></li>

     <li>
      <p>User agents should attach a serialized representation of any interesting accompanying
      data which are not yet specified, notably the <code data-x="">stack</code> property, to
      <var>serialized</var>.</p>

      <p class="note">See the <cite>Error Stacks</cite> proposal for in-progress work on
      specifying this data. <ref spec=JSERRORSTACKS></p>
     </li>
    </ol>
   </li>

   <li>
    <p>Otherwise, if <var>value</var> is an Array exotic object, then:</p>
    <!-- IsArray supports proxies too, which we cannot -->

    <ol>
     <li><p>Let <var>valueLenDescriptor</var> be ?
     <span>OrdinaryGetOwnProperty</span>(<var>value</var>, "<code data-x="">length</code>").</p></li>

     <li><p>Let <var>valueLen</var> be <var>valueLenDescriptor</var>.[[Value]].</p></li>

     <li><p>Set <var>serialized</var> to { [[Type]]: "Array", [[Length]]: <var>valueLen</var>,
     [[Properties]]: a new empty <span data-x="js-List">List</span> }.</p></li>

     <li><p>Set <var>deep</var> to true.</p></li>
    </ol>
   </li>

   <li>
    <p>Otherwise, if <var>value</var> is a <span>platform object</span> that is a <span
    data-x="serializable objects">serializable object</span>:</p>

    <ol>
     <li><p>If <var>value</var> has a <span>[[Detached]]</span> internal slot whose value is true,
     then throw a <span>"<code>DataCloneError</code>"</span> <code>DOMException</code>.</p></li>

     <li><p>Let <var>typeString</var> be the identifier of the <span>primary interface</span> of
     <var>value</var>.</p></li>

     <li><p>Set <var>serialized</var> to { [[Type]]: <var>typeString</var> }.</p></li>

     <li><p>Set <var>deep</var> to true.</p></li>
    </ol>
   </li>

   <li><p>Otherwise, if <var>value</var> is a <span>platform object</span>, then throw a
   <span>"<code>DataCloneError</code>"</span> <code>DOMException</code>.</p></li>

   <li><p>Otherwise, if <span>IsCallable</span>(<var>value</var>) is true, then throw a
   <span>"<code>DataCloneError</code>"</span> <code>DOMException</code>.</p></li>

   <li>
    <p>Otherwise, if <var>value</var> has any internal slot other than [[Prototype]] or
    [[Extensible]], then throw a <span>"<code>DataCloneError</code>"</span>
    <code>DOMException</code>.</p>

    <p class="example">For instance, a [[PromiseState]] or [[WeakMapData]] internal slot.</p>
   </li>

   <li>
    <p>Otherwise, if <var>value</var> is an exotic object and <var>value</var> is not the
    <span>%Object.prototype%</span> intrinsic object associated with any <span>realm</span>, then
    throw a <span>"<code>DataCloneError</code>"</span> <code>DOMException</code>.</p>

    <p class="example">For instance, a proxy object.</p>
   </li>

   <li>
    <p>Otherwise:</p>

    <ol>
     <li><p>Set <var>serialized</var> to { [[Type]]: "Object", [[Properties]]: a new empty <span
     data-x="js-List">List</span> }.</p></li>

     <li><p>Set <var>deep</var> to true.</p></li>
    </ol>

    <p class="note"><span>%Object.prototype%</span> will end up being handled via this step and
    subsequent steps. The end result is that its exoticness is ignored, and after deserialization
    the result will be an empty object (not an <span>immutable prototype exotic object</span>).
   </li>

   <li><p><span data-x="map set">Set</span> <var>memory</var>[<var>value</var>] to
   <var>serialized</var>.</p></li>

   <li>
    <p>If <var>deep</var> is true, then:</p>

    <ol>
     <li>
      <p>If <var>value</var> has a [[MapData]] internal slot, then:

      <ol>
       <li><p>Let <var>copiedList</var> be a new empty <span data-x="js-List">List</span>.

       <li>
        <p><span data-x="list iterate">For each</span> <span>Record</span> { [[Key]], [[Value]] }
        <var>entry</var> of <var>value</var>.[[MapData]]:</p>

        <ol>
         <li><p>Let <var>copiedEntry</var> be a new <span>Record</span> { [[Key]]:
         <var>entry</var>.[[Key]], [[Value]]: <var>entry</var>.[[Value]] }.</p></li>

         <li><p>If <var>copiedEntry</var>.[[Key]] is not the special value <i>empty</i>, <span
         data-x="list append">append</span> <var>copiedEntry</var> to <var>copiedList</var>.</p></li>
        </ol>
       </li>

       <li>
        <p><span data-x="list iterate">For each</span> <span>Record</span> { [[Key]], [[Value]] }
        <var>entry</var> of <var>copiedList</var>:</p>

        <ol>
         <li><p>Let <var>serializedKey</var> be ?
         <span>StructuredSerializeInternal</span>(<var>entry</var>.[[Key]], <var>forStorage</var>,
         <var>memory</var>).</p></li>

         <li><p>Let <var>serializedValue</var> be ?
         <span>StructuredSerializeInternal</span>(<var>entry</var>.[[Value]], <var>forStorage</var>,
         <var>memory</var>).</p></li>

         <li><p><span data-x="list append">Append</span> { [[Key]]: <var>serializedKey</var>,
         [[Value]]: <var>serializedValue</var> } to <var>serialized</var>.[[MapData]].</p></li>
        </ol>
       </li>
      </ol>
     </li>

     <li>
      <p>Otherwise, if <var>value</var> has a [[SetData]] internal slot, then:</p>

      <ol>
       <li><p>Let <var>copiedList</var> be a new empty <span data-x="js-List">List</span>.

       <li>
        <p><span data-x="list iterate">For each</span> <var>entry</var> of <var>value</var>.[[SetData]]:</p>

        <ol>
         <li><p>If <var>entry</var> is not the special value <i>empty</i>, <span data-x="list
         append">append</span> <var>entry</var> to <var>copiedList</var>.</p></li>
        </ol>
       </li>

       <li>
        <p><span data-x="list iterate">For each</span> <var>entry</var> of <var>copiedList</var>:</p>

        <ol>
         <li><p>Let <var>serializedEntry</var> be ?
         <span>StructuredSerializeInternal</span>(<var>entry</var>, <var>forStorage</var>,
         <var>memory</var>).</p></li>

         <li><p><span data-x="list append">Append</span> <var>serializedEntry</var> to
         <var>serialized</var>.[[SetData]].</p></li>
        </ol>
       </li>
      </ol>
     </li>

     <li>
      <p>Otherwise, if <var>value</var> is a <span>platform object</span> that is a <span
      data-x="serializable objects">serializable object</span>, then perform the <span>serialization
      steps</span> for <var>value</var>'s <span>primary interface</span>, given <var>value</var>,
      <var>serialized</var>, and <var>forStorage</var>.</p>

      <p>The <span>serialization steps</span> may need to perform a <dfn
      export>sub-serialization</dfn>. This is an operation which takes as input a value
      <var>subValue</var>, and returns <span>StructuredSerializeInternal</span>(<var>subValue</var>,
      <var>forStorage</var>, <var>memory</var>). (In other words, a <span>sub-serialization</span>
      is a specialization of <span>StructuredSerializeInternal</span> to be consistent within this
      invocation.)</p>
     </li>

     <li>
      <p>Otherwise, for each <var>key</var> in !
      <span>EnumerableOwnProperties</span>(<var>value</var>, key):</p>

      <ol>
       <li>
        <p>If ! <span>HasOwnProperty</span>(<var>value</var>, <var>key</var>) is true, then:</p>

        <ol>
         <li><p>Let <var>inputValue</var> be ? <var>value</var>.[[Get]](<var>key</var>,
         <var>value</var>).</p></li>

         <li><p>Let <var>outputValue</var> be ?
         <span>StructuredSerializeInternal</span>(<var>inputValue</var>, <var>forStorage</var>,
         <var>memory</var>).</p></li>

         <li><p><span data-x="list append">Append</span> { [[Key]]: <var>key</var>, [[Value]]:
         <var>outputValue</var> } to <var>serialized</var>.[[Properties]].</p></li>
        </ol>
       </li>
      </ol>
     </li>
    </ol>
   </li>

   <li><p>Return <var>serialized</var>.</p></li>
  </ol>

  <div class="example">
   <p>It's important to realize that the <span data-x="Record">Records</span>
   produced by <span>StructuredSerializeInternal</span> might contain "pointers" to other records
   that create circular references. For example, when we pass the following JavaScript object into
   <span>StructuredSerializeInternal</span>:</p>

  <pre><code class="js">const o = {};
o.myself = o;</code></pre>

  <p>it produces the following result:</p>

  <pre><samp>{
  [[Type]]: "Object",
  [[Properties]]: «
    {
      [[Key]]: "myself",
      [[Value]]: <i>&lt;a pointer to this whole structure></i>
    }
  »
}</samp></pre>
  </div>


  <h4 id="structuredserialize" data-lt="StructuredSerialize"
  abstract-op><dfn>StructuredSerialize</dfn> ( <var>value</var> )</h4>

  <ol>
   <li><p>Return ? <span>StructuredSerializeInternal</span>(<var>value</var>, false).</p></li>
  </ol>


  <h4 id="structuredserializeforstorage" data-lt="StructuredSerializeForStorage"
  abstract-op><dfn>StructuredSerializeForStorage</dfn> ( <var>value</var> )</h4>

  <ol>
   <li><p>Return ? <span>StructuredSerializeInternal</span>(<var>value</var>, true).</p></li>
  </ol>


  <h4 id="structureddeserialize" data-lt="StructuredDeserialize"
  abstract-op><dfn>StructuredDeserialize</dfn> ( <var>serialized</var>, <var>targetRealm</var> [ ,
  <var>memory</var> ] )</h4>

  <p>The <span>StructuredDeserialize</span> abstract operation takes as input a <span>Record</span>
  <var>serialized</var>, which was previously produced by <span>StructuredSerialize</span> or
  <span>StructuredSerializeForStorage</span>, and deserializes it into a new JavaScript value,
  created in <var>targetRealm</var>.</p>

  <p>This process can throw an exception, for example when trying to allocate memory for the new
  objects (especially <code data-x="">ArrayBuffer</code> objects).</p>

  <ol>
   <li>
    <p>If <var>memory</var> was not supplied, let <var>memory</var> be an empty <span
    data-x="ordered map">map</span>.</p>

    <p class="note">The purpose of the <var>memory</var> map is to avoid deserializing objects
    twice. This ends up preserving cycles and the identity of duplicate objects in graphs.</p>
   </li>

   <li><p>If <var>memory</var>[<var>serialized</var>] <span data-x="map exists">exists</span>, then
   return <var>memory</var>[<var>serialized</var>].</p></li>

   <li><p>Let <var>deep</var> be false.</p></li>

   <li><p>Let <var>value</var> be an uninitialized value.</p></li>

   <li><p>If <var>serialized</var>.[[Type]] is "primitive", then set <var>value</var> to
   <var>serialized</var>.[[Value]].</p>

   <li><p>Otherwise, if <var>serialized</var>.[[Type]] is "Boolean", then set <var>value</var> to a
   new Boolean object in <var>targetRealm</var> whose [[BooleanData]] internal slot value is
   <var>serialized</var>.[[BooleanData]].</p></li>

   <li><p>Otherwise, if <var>serialized</var>.[[Type]] is "Number", then set <var>value</var> to a
   new Number object in <var>targetRealm</var> whose [[NumberData]] internal slot value is
   <var>serialized</var>.[[NumberData]].</p></li>

   <li><p>Otherwise, if <var>serialized</var>.[[Type]] is "BigInt", then set <var>value</var> to a
   new BigInt object in <var>targetRealm</var> whose [[BigIntData]] internal slot value is
   <var>serialized</var>.[[BigIntData]].</p></li>

   <li><p>Otherwise, if <var>serialized</var>.[[Type]] is "String", then set <var>value</var> to a
   new String object in <var>targetRealm</var> whose [[StringData]] internal slot value is
   <var>serialized</var>.[[StringData]].</p></li>

   <li><p>Otherwise, if <var>serialized</var>.[[Type]] is "Date", then set <var>value</var> to a new
   Date object in <var>targetRealm</var> whose [[DateValue]] internal slot value is
   <var>serialized</var>.[[DateValue]].</p></li>

   <li><p>Otherwise, if <var>serialized</var>.[[Type]] is "RegExp", then set <var>value</var> to a
   new RegExp object in <var>targetRealm</var> whose [[RegExpMatcher]] internal slot value is
   <var>serialized</var>.[[RegExpMatcher]], whose [[OriginalSource]] internal slot value is
   <var>serialized</var>.[[OriginalSource]], and whose [[OriginalFlags]] internal slot value is
   <var>serialized</var>.[[OriginalFlags]].</p></li>

   <li>
    <p>Otherwise, if <var>serialized</var>.[[Type]] is "SharedArrayBuffer", then:</p>

    <ol>
     <li><p>If <var>targetRealm</var>'s corresponding <span>agent cluster</span> is not
     <var>serialized</var>.[[AgentCluster]], then then throw a
     <span>"<code>DataCloneError</code>"</span> <code>DOMException</code>.</p></li>

     <li><p>Otherwise, set <var>value</var> to a new SharedArrayBuffer object in
     <var>targetRealm</var> whose [[ArrayBufferData]] internal slot value is
     <var>serialized</var>.[[ArrayBufferData]] and whose [[ArrayBufferByteLength]] internal slot
     value is <var>serialized</var>.[[ArrayBufferByteLength]].</p></li>
    </ol>
   </li>

   <li>
    <p>Otherwise, if <var>serialized</var>.[[Type]] is "GrowableSharedArrayBuffer", then:</p>

    <ol>
     <li><p>If <var>targetRealm</var>'s corresponding <span>agent cluster</span> is not
     <var>serialized</var>.[[AgentCluster]], then then throw a
     <span>"<code>DataCloneError</code>"</span> <code>DOMException</code>.</p></li>

     <li><p>Otherwise, set <var>value</var> to a new SharedArrayBuffer object in
     <var>targetRealm</var> whose [[ArrayBufferData]] internal slot value is
     <var>serialized</var>.[[ArrayBufferData]], whose [[ArrayBufferByteLengthData]] internal slot
     value is <var>serialized</var>.[[ArrayBufferByteLengthData]], and whose
     [[ArrayBufferMaxByteLength]] internal slot value is
     <var>serialized</var>.[[ArrayBufferMaxByteLength]].</p></li>
    </ol>
   </li>

   <li>
    <p>Otherwise, if <var>serialized</var>.[[Type]] is "ArrayBuffer", then set <var>value</var> to a
    new ArrayBuffer object in <var>targetRealm</var> whose [[ArrayBufferData]] internal slot value
    is <var>serialized</var>.[[ArrayBufferData]], and whose [[ArrayBufferByteLength]] internal slot
    value is <var>serialized</var>.[[ArrayBufferByteLength]].</p>

    <p>If this throws an exception, catch it, and then throw a
    <span>"<code>DataCloneError</code>"</span> <code>DOMException</code>.</p>

    <p class="note">This step might throw an exception if there is not enough memory available to
    create such an ArrayBuffer object.</p>
   </li>

   <li>
    <p>Otherwise, if <var>serialized</var>.[[Type]] is "ResizableArrayBuffer", then set
    <var>value</var> to a new ArrayBuffer object in <var>targetRealm</var> whose [[ArrayBufferData]]
    internal slot value is <var>serialized</var>.[[ArrayBufferData]], whose
    [[ArrayBufferByteLength]] internal slot value is
    <var>serialized</var>.[[ArrayBufferByteLength]], and whose [[ArrayBufferMaxByteLength]] internal
    slot value is a <var>serialized</var>.[[ArrayBufferMaxByteLength]].</p>

    <p>If this throws an exception, catch it, and then throw a
    <span>"<code>DataCloneError</code>"</span> <code>DOMException</code>.</p>

    <p class="note">This step might throw an exception if there is not enough memory available to
    create such an ArrayBuffer object.</p>
   </li>

   <li>
    <p>Otherwise, if <var>serialized</var>.[[Type]] is "ArrayBufferView", then:</p>

    <ol>
     <li><p>Let <var>deserializedArrayBuffer</var> be ?
     <span>StructuredDeserialize</span>(<var>serialized</var>.[[ArrayBufferSerialized]],
     <var>targetRealm</var>, <var>memory</var>).</p></li>

     <li><p>If <var>serialized</var>.[[Constructor]] is "DataView", then set <var>value</var> to a
     new DataView object in <var>targetRealm</var> whose [[ViewedArrayBuffer]] internal slot value
     is <var>deserializedArrayBuffer</var>, whose [[ByteLength]] internal slot value is
     <var>serialized</var>.[[ByteLength]], and whose [[ByteOffset]] internal slot value is
     <var>serialized</var>.[[ByteOffset]].</p></li>

     <li><p>Otherwise, set <var>value</var> to a new typed array object in <var>targetRealm</var>,
     using the constructor given by <var>serialized</var>.[[Constructor]], whose
     [[ViewedArrayBuffer]] internal slot value is <var>deserializedArrayBuffer</var>, whose
     [[TypedArrayName]] internal slot value is <var>serialized</var>.[[Constructor]], whose
     [[ByteLength]] internal slot value is <var>serialized</var>.[[ByteLength]], whose
     [[ByteOffset]] internal slot value is <var>serialized</var>.[[ByteOffset]], and whose
     [[ArrayLength]] internal slot value is <var>serialized</var>.[[ArrayLength]].</p></li>
    </ol>
   </li>

   <li>
    <p>Otherwise, if <var>serialized</var>.[[Type]] is "Map", then:</p>

    <ol>
     <li><p>Set <var>value</var> to a new Map object in <var>targetRealm</var> whose [[MapData]]
     internal slot value is a new empty <span data-x="js-List">List</span>.</p></li>

     <li><p>Set <var>deep</var> to true.</p></li>
    </ol>
   </li>

   <li>
    <p>Otherwise, if <var>serialized</var>.[[Type]] is "Set", then:</p>

    <ol>
     <li><p>Set <var>value</var> to a new Set object in <var>targetRealm</var> whose [[SetData]]
     internal slot value is a new empty <span data-x="js-List">List</span>.</p></li>

     <li><p>Set <var>deep</var> to true.</p></li>
    </ol>
   </li>

   <li>
    <p>Otherwise, if <var>serialized</var>.[[Type]] is "Array", then:</p>

    <ol>
     <li><p>Let <var>outputProto</var> be
     <var>targetRealm</var>.[[Intrinsics]].[[<span>%Array.prototype%</span>]].</p></li>

     <li><p>Set <var>value</var> to ! <span>ArrayCreate</span>(<var>serialized</var>.[[Length]],
     <var>outputProto</var>).</p></li>

     <li><p>Set <var>deep</var> to true.</p></li>
    </ol>
   </li>

   <li>
    <p>Otherwise, if <var>serialized</var>.[[Type]] is "Object", then:</p>

    <ol>
     <li><p>Set <var>value</var> to a new Object in <var>targetRealm</var>.</p></li>

     <li><p>Set <var>deep</var> to true.</p></li>
    </ol>
   </li>

   <li>
    <p>Otherwise, if <var>serialized</var>.[[Type]] is "Error", then:</p>

    <ol>
     <li><p>Let <var>prototype</var> be <span>%Error.prototype%</span>.</p></li>

     <li><p>If <var>serialized</var>.[[Name]] is "EvalError", then set <var>prototype</var> to
     <span>%EvalError.prototype%</span>.</p></li>

     <li><p>If <var>serialized</var>.[[Name]] is "RangeError", then set <var>prototype</var>
     to <span>%RangeError.prototype%</span>.</p></li>

     <li><p>If <var>serialized</var>.[[Name]] is "ReferenceError", then set
     <var>prototype</var> to <span>%ReferenceError.prototype%</span>.</p></li>

     <li><p>If <var>serialized</var>.[[Name]] is "SyntaxError", then set <var>prototype</var>
     to <span>%SyntaxError.prototype%</span>.</p></li>

     <li><p>If <var>serialized</var>.[[Name]] is "TypeError", then set <var>prototype</var> to
     <span>%TypeError.prototype%</span>.</p></li>

     <li><p>If <var>serialized</var>.[[Name]] is "URIError", then set <var>prototype</var> to
     <span>%URIError.prototype%</span>.</p></li>

     <li><p>Let <var>message</var> be <var>serialized</var>.[[Message]].</p></li>

     <li><p>Set <var>value</var> to <span>OrdinaryObjectCreate</span>(<var>prototype</var>, «
     [[ErrorData]] »).</p></li>

     <li><p>Let <var>messageDesc</var> be <span>PropertyDescriptor</span>{ [[Value]]:
     <var>message</var>, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true
     }.</p></li>

     <li><p>If <var>message</var> is not undefined, then perform !
     <span>OrdinaryDefineOwnProperty</span>(<var>value</var>, "<code data-x="">message</code>",
     <var>messageDesc</var>).</p></li>

     <li><p>Any interesting accompanying data attached to <var>serialized</var> should be
     deserialized and attached to <var>value</var>.</p></li>
    </ol>
   </li>

   <li>
    <p>Otherwise:</p>

    <ol>
     <li><p>Let <var>interfaceName</var> be <var>serialized</var>.[[Type]].</p></li>

     <li><p>If the interface identified by <var>interfaceName</var> is not
     <span data-x="idl-exposed">exposed</span> in <var>targetRealm</var>, then throw a
     <span>"<code>DataCloneError</code>"</span> <code>DOMException</code>.</p></li>

     <li><p>Set <var>value</var> to a new instance of the interface identified by
     <var>interfaceName</var>, created in <var>targetRealm</var>.</p>

     <li><p>Set <var>deep</var> to true.</p></li>
    </ol>
   </li>

   <li><p><span data-x="map set">Set</span> <var>memory</var>[<var>serialized</var>] to
   <var>value</var>.</p></li>

   <li>
    <p>If <var>deep</var> is true, then:</p>

    <ol>
     <li>
      <p>If <var>serialized</var>.[[Type]] is "Map", then:</p>

      <ol>
       <li>
        <p><span data-x="list iterate">For each</span> <span>Record</span> { [[Key]], [[Value]] }
        <var>entry</var> of <var>serialized</var>.[[MapData]]:</p>

        <ol>
         <li><p>Let <var>deserializedKey</var> be ?
         <span>StructuredDeserialize</span>(<var>entry</var>.[[Key]], <var>targetRealm</var>,
         <var>memory</var>).</p></li>

         <li><p>Let <var>deserializedValue</var> be ?
         <span>StructuredDeserialize</span>(<var>entry</var>.[[Value]], <var>targetRealm</var>,
         <var>memory</var>).</p></li>

         <li><p><span data-x="list append">Append</span> { [[Key]]: <var>deserializedKey</var>,
         [[Value]]: <var>deserializedValue</var> } to <var>value</var>.[[MapData]].</p></li>
        </ol>
       </li>
      </ol>
     </li>

     <li>
      <p>Otherwise, if <var>serialized</var>.[[Type]] is "Set", then:</p>

      <ol>
       <li>
        <p><span data-x="list iterate">For each</span> <var>entry</var> of
        <var>serialized</var>.[[SetData]]:</p>

        <ol>
         <li><p>Let <var>deserializedEntry</var> be ?
         <span>StructuredDeserialize</span>(<var>entry</var>, <var>targetRealm</var>,
         <var>memory</var>).</p></li>

         <li><p><span data-x="list append">Append</span> <var>deserializedEntry</var> to
         <var>value</var>.[[SetData]].</p></li>
        </ol>
       </li>
      </ol>
     </li>

     <li>
      <p>Otherwise, if <var>serialized</var>.[[Type]] is "Array" or "Object", then:</p>

      <ol>
       <li>
        <p><span data-x="list iterate">For each</span> <span>Record</span> { [[Key]], [[Value]] }
        <var>entry</var> of <var>serialized</var>.[[Properties]]:</p>

        <ol>
         <li><p>Let <var>deserializedValue</var> be ?
         <span>StructuredDeserialize</span>(<var>entry</var>.[[Value]], <var>targetRealm</var>,
         <var>memory</var>).</p></li>

         <li><p>Let <var>result</var> be ! <span>CreateDataProperty</span>(<var>value</var>,
         <var>entry</var>.[[Key]], <var>deserializedValue</var>).</p></li>

         <li><p><span>Assert</span>: <var>result</var> is true.</p></li>
        </ol>
       </li>
      </ol>
     </li>

     <li>
      <p>Otherwise:</p>

      <ol>
       <li>
        <p>Perform the appropriate <span>deserialization steps</span> for the interface identified
        by <var>serialized</var>.[[Type]], given <var>serialized</var>, <var>value</var>, and
        <var>targetRealm</var>.</p>

        <p>The <span>deserialization steps</span> may need to perform a <dfn
        export>sub-deserialization</dfn>. This is an operation which takes as input a
        previously-serialized <span>Record</span> <var>subSerialized</var>, and returns
        <span>StructuredDeserialize</span>(<var>subSerialized</var>, <var>targetRealm</var>,
        <var>memory</var>). (In other words, a <span>sub-deserialization</span> is a specialization
        of <span>StructuredDeserialize</span> to be consistent within this invocation.)</p>
       </li>
      </ol>
    </ol>
   </li>

   <li><p>Return <var>value</var>.</p></li>
  </ol>

  <h4 id="structuredserializewithtransfer" data-lt="StructuredSerializeWithTransfer"
  abstract-op><dfn>StructuredSerializeWithTransfer</dfn> ( <var>value</var>, <var>transferList</var>
  )</h4>

  <ol>
   <li>
    <p>Let <var>memory</var> be an empty <span data-x="ordered map">map</span>.</p>

    <p class="note">In addition to how it is used normally by
    <span>StructuredSerializeInternal</span>, in this algorithm <var>memory</var> is also used to
    ensure that <span>StructuredSerializeInternal</span> ignores items in <var>transferList</var>,
    and let us do our own handling instead.</p>
   </li>

   <li>
    <p><span data-x="list iterate">For each</span> <var>transferable</var> of
    <var>transferList</var>:</p>

    <ol>
     <li><p>If <var>transferable</var> has neither an [[ArrayBufferData]] internal slot nor a
     <span>[[Detached]]</span> internal slot, then throw a
     <span>"<code>DataCloneError</code>"</span> <code>DOMException</code>.</p></li>

     <li><p>If <var>transferable</var> has an [[ArrayBufferData]] internal slot and
     <span>IsSharedArrayBuffer</span>(<var>transferable</var>) is true, then throw a
     <span>"<code>DataCloneError</code>"</span> <code>DOMException</code>.</p></li>

     <li><p>If <var>memory</var>[<var>transferable</var>] <span data-x="map exists">exists</span>,
     then throw a <span>"<code>DataCloneError</code>"</span> <code>DOMException</code>.</p></li>

     <li>
      <p><span data-x="map set">Set</span> <var>memory</var>[<var>transferable</var>] to {
      [[Type]]: an uninitialized value }.</p>

      <p class="note"><var>transferable</var> is not transferred yet as transferring has side
      effects and <span>StructuredSerializeInternal</span> needs to be able to throw first.</p>
     </li>
    </ol>
   </li>

   <li><p>Let <var>serialized</var> be ? <span>StructuredSerializeInternal</span>(<var>value</var>,
   false, <var>memory</var>).</p></li>

   <li><p>Let <var>transferDataHolders</var> be a new empty <span
   data-x="js-List">List</span>.</p></li>

   <li>
    <p><span data-x="list iterate">For each</span> <var>transferable</var> of
    <var>transferList</var>:</p>

    <ol>
     <li><p>If <var>transferable</var> has an [[ArrayBufferData]] internal slot and
     <span>IsDetachedBuffer</span>(<var>transferable</var>) is true, then throw a
     <span>"<code>DataCloneError</code>"</span> <code>DOMException</code>.</p></li>

     <li><p>If <var>transferable</var> has a <span>[[Detached]]</span> internal slot and
     <var>transferable</var>.<span>[[Detached]]</span> is true, then throw a
     <span>"<code>DataCloneError</code>"</span> <code>DOMException</code>.</p></li>

     <li><p>Let <var>dataHolder</var> be <var>memory</var>[<var>transferable</var>].</p></li>

     <li>
      <p>If <var>transferable</var> has an [[ArrayBufferData]] internal slot, then:</p>

      <ol>
       <li>
        <p>If <var>transferable</var> has an [[ArrayBufferMaxByteLength]] internal slot, then:</p>

        <ol>
         <li><p>Set <var>dataHolder</var>.[[Type]] to "ResizableArrayBuffer".</p></li>

         <li><p>Set <var>dataHolder</var>.[[ArrayBufferData]] to
         <var>transferable</var>.[[ArrayBufferData]].</p></li>

         <li><p>Set <var>dataHolder</var>.[[ArrayBufferByteLength]] to
         <var>transferable</var>.[[ArrayBufferByteLength]].</p></li>

         <li><p>Set <var>dataHolder</var>.[[ArrayBufferMaxByteLength]] to
         <var>transferable</var>.[[ArrayBufferMaxByteLength]].</p></li>
        </ol>
       </li>

       <li>
        <p>Otherwise:</p>

        <ol>
         <li><p>Set <var>dataHolder</var>.[[Type]] to "ArrayBuffer".</p></li>

         <li><p>Set <var>dataHolder</var>.[[ArrayBufferData]] to
         <var>transferable</var>.[[ArrayBufferData]].</p></li>

         <li><p>Set <var>dataHolder</var>.[[ArrayBufferByteLength]] to
         <var>transferable</var>.[[ArrayBufferByteLength]].</p></li>
        </ol>
       </li>

       <li>
        <p>Perform ? <span>DetachArrayBuffer</span>(<var>transferable</var>).</p>

        <p class="note">Specifications can use the [[ArrayBufferDetachKey]] internal slot to prevent
        <code data-x="idl-ArrayBuffer">ArrayBuffer</code>s from being detached. This is used in
        <cite>WebAssembly JavaScript Interface</cite>, for example. <ref spec=WASMJS></p>
       </li>
      </ol>
     </li>

     <li>
      <p>Otherwise:</p>

      <ol>
       <li><p><span>Assert</span>: <var>transferable</var> is a <span>platform object</span> that is
       a <span data-x="transferable objects">transferable object</span>.</p></li>

       <li><p>Let <var>interfaceName</var> be the identifier of the <span>primary interface</span>
       of <var>transferable</var>.</p></li>

       <li><p>Set <var>dataHolder</var>.[[Type]] to <var>interfaceName</var>.</p></li>

       <li><p>Perform the appropriate <span>transfer steps</span> for the interface identified by
       <var>interfaceName</var>, given <var>transferable</var> and <var>dataHolder</var>.</p></li>

       <li><p>Set <var>transferable</var>.<span>[[Detached]]</span> to true.</p></li>
      </ol>
     </li>

     <li><p><span data-x="list append">Append</span> <var>dataHolder</var> to
     <var>transferDataHolders</var>.</p></li>
    </ol>
   </li>

   <li><p>Return { [[Serialized]]: <var>serialized</var>, [[TransferDataHolders]]:
   <var>transferDataHolders</var> }.</p></li>
  </ol>

  <h4 id="structureddeserializewithtransfer" data-lt="StructuredDeserializeWithTransfer"
  abstract-op><dfn>StructuredDeserializeWithTransfer</dfn> ( <var>serializeWithTransferResult</var>,
  <var>targetRealm</var> )</h4>

  <ol>
   <li>
    <p>Let <var>memory</var> be an empty <span data-x="ordered map">map</span>.</p>

    <p class="note">Analogous to <span>StructuredSerializeWithTransfer</span>, in addition to how it
    is used normally by <span>StructuredDeserialize</span>, in this algorithm <var>memory</var> is
    also used to ensure that <span>StructuredDeserialize</span> ignores items in
    <var>serializeWithTransferResult</var>.[[TransferDataHolders]], and let us do our own handling
    instead.</p>
   </li>

   <li><p>Let <var>transferredValues</var> be a new empty <span
   data-x="js-List">List</span>.</p></li>

   <li>
    <p><span data-x="list iterate">For each</span> <var>transferDataHolder</var> of
    <var>serializeWithTransferResult</var>.[[TransferDataHolders]]:</p>

    <ol>
     <li><p>Let <var>value</var> be an uninitialized value.</p></li>

     <li>
      <p>If <var>transferDataHolder</var>.[[Type]] is "ArrayBuffer", then set <var>value</var> to a
      new ArrayBuffer object in <var>targetRealm</var> whose [[ArrayBufferData]] internal slot value
      is <var>transferDataHolder</var>.[[ArrayBufferData]], and whose [[ArrayBufferByteLength]]
      internal slot value is <var>transferDataHolder</var>.[[ArrayBufferByteLength]].</p>

      <p class="note">In cases where the original memory occupied by [[ArrayBufferData]] is
      accessible during the deserialization, this step is unlikely to throw an exception, as no new
      memory needs to be allocated: the memory occupied by [[ArrayBufferData]] is instead just
      getting transferred into the new ArrayBuffer. This could be true, for example, when both the
      source and target realms are in the same process.</p>
     </li>

     <li>
      <p>Otherwise, if <var>transferDataHolder</var>.[[Type]] is "ResizableArrayBuffer", then set
      <var>value</var> to a new ArrayBuffer object in <var>targetRealm</var> whose
      [[ArrayBufferData]] internal slot value is <var>transferDataHolder</var>.[[ArrayBufferData]],
      whose [[ArrayBufferByteLength]] internal slot value is
      <var>transferDataHolder</var>.[[ArrayBufferByteLength]], and whose
      [[ArrayBufferMaxByteLength]] internal slot value is
      <var>transferDataHolder</var>.[[ArrayBufferMaxByteLength]].</p>

      <p class="note">For the same reason as the previous step, this step is also unlikely to throw
      an exception.</p>
     </li>

     <li>
      <p>Otherwise:</p>

      <ol>
       <li><p>Let <var>interfaceName</var> be <var>transferDataHolder</var>.[[Type]].</p></li>

       <li><p>If the interface identified by <var>interfaceName</var> is not exposed in
       <var>targetRealm</var>, then throw a <span>"<code>DataCloneError</code>"</span>
       <code>DOMException</code>.</p></li>

       <li><p>Set <var>value</var> to a new instance of the interface identified by
       <var>interfaceName</var>, created in <var>targetRealm</var>.</p></li>

       <li><p>Perform the appropriate <span>transfer-receiving steps</span> for the interface
       identified by <var>interfaceName</var> given <var>transferDataHolder</var> and
       <var>value</var>.</p></li>
      </ol>
     </li>

     <li><p><span data-x="map set">Set</span> <var>memory</var>[<var>transferDataHolder</var>] to
     <var>value</var>.</p></li>

     <li><p><span data-x="list append">Append</span> <var>value</var> to
     <var>transferredValues</var>.</p></li>
    </ol>
   </li>

   <li><p>Let <var>deserialized</var> be ?
   <span>StructuredDeserialize</span>(<var>serializeWithTransferResult</var>.[[Serialized]],
   <var>targetRealm</var>, <var>memory</var>).</p></li>

   <li><p>Return { [[Deserialized]]: <var>deserialized</var>, [[TransferredValues]]:
   <var>transferredValues</var> }.</p></li>
  </ol>


  <h4 id="performing-structured-clones-from-other-specifications">Performing serialization and
  transferring from other specifications</h4>

  <p>Other specifications may use the abstract operations defined here. The following provides
  some guidance on when each abstract operation is typically useful, with examples.</p>

  <dl>
   <dt><span>StructuredSerializeWithTransfer</span></dt>
   <dt><span>StructuredDeserializeWithTransfer</span></dt>
   <dd>
    <p>Cloning a value to another <span>realm</span>, with a transfer list, but where the target
    realm is not known ahead of time. In this case the serialization step can be performed
    immediately, with the deserialization step delayed until the target realm becomes known.</p>

    <p class="example"><code data-x="dom-MessagePort-postMessage">messagePort.postMessage()</code>
    uses this pair of abstract operations, as the destination realm is not known until the
    <code>MessagePort</code> <span>has been shipped</span>.</p>
   </dd>

   <dt><span>StructuredSerialize</span></dt>
   <dt><span>StructuredSerializeForStorage</span></dt>
   <dt><span>StructuredDeserialize</span></dt>
   <dd>
    <p>Creating a <span>realm</span>-independent snapshot of a given value which can be saved for an
    indefinite amount of time, and then reified back into a JavaScript value later, possibly
    multiple times.</p>

    <p><span>StructuredSerializeForStorage</span> can be used for situations where the serialization
    is anticipated to be stored in a persistent manner, instead of passed between realms. It throws
    when attempting to serialize <code>SharedArrayBuffer</code> objects, since storing shared memory
    does not make sense. Similarly, it can throw or possibly have different behavior when given a
    <span>platform object</span> with custom <span>serialization steps</span> when the
    <var>forStorage</var> argument is true.</p>

    <p class="example"><code data-x="dom-history-pushState">history.pushState()</code> and <code
    data-x="dom-history-replaceState">history.replaceState()</code> use
    <span>StructuredSerializeForStorage</span> on author-supplied state objects, storing them as
    <span>serialized state</span> in the appropriate <span>session history entry</span>. Then,
    <span>StructuredDeserialize</span> is used so that the <code
    data-x="dom-history-state">history.state</code> property can return a clone of the
    originally-supplied state object.</p>

    <p class="example"><code
    data-x="dom-BroadcastChannel-postMessage">broadcastChannel.postMessage()</code> uses
    <span>StructuredSerialize</span> on its input, then uses <span>StructuredDeserialize</span>
    multiple times on the result to produce a fresh clone for each destination being broadcast
    to. Note that transferring does not make sense in multi-destination situations.</p>

    <p class="example">Any API for persisting JavaScript values to the filesystem would also use
    <span>StructuredSerializeForStorage</span> on its input and <span>StructuredDeserialize</span>
    on its output.</p>
   </dd>
  </dl>

  <p>In general, call sites may pass in Web IDL values instead of JavaScript values; this is to be
  understood to perform an implicit <span data-x="concept-idl-convert">conversion</span> to the
  JavaScript value before invoking these algorithms.</p>

  <hr>

  <p>Call sites that are not invoked as a result of author code synchronously calling into a user
  agent method must take care to properly <span>prepare to run script</span> and <span>prepare to
  run a callback</span> before invoking <span>StructuredSerialize</span>,
  <span>StructuredSerializeForStorage</span>, or <span>StructuredSerializeWithTransfer</span>
  abstract operations, if they are being performed on arbitrary objects. This is necessary because
  the serialization process can invoke author-defined accessors as part of its final
  deep-serialization steps, and these accessors could call into operations that rely on the <span
  data-x="concept-entry-everything">entry</span> and <span
  data-x="concept-incumbent-everything">incumbent</span> concepts being properly set up.</p>

  <p class="example"><code data-x="dom-window-postMessage">window.postMessage()</code> performs
  <span>StructuredSerializeWithTransfer</span> on its arguments, but is careful to do so
  immediately, inside the synchronous portion of its algorithm. Thus it is able to use the
  algorithms without needing to <span>prepare to run script</span> and <span>prepare to run a
  callback</span>.</p>

  <p class="example">In contrast, a hypothetical API that used <span>StructuredSerialize</span> to
  serialize some author-supplied object periodically, directly from a <span
  data-x="concept-task">task</span> on the <span>event loop</span>, would need to ensure it performs
  the appropriate preparations beforehand. As of this time, we know of no such APIs on the platform;
  usually it is simpler to perform the serialization ahead of time, as a synchronous consequence of
  author code.</p>

  </div>

  <h4 id="structured-cloning">Structured cloning API</h4>

  <dl class="domintro">
   <dt><code data-x=""><var>result</var> = self.<span subdfn data-x="dom-structuredClone">structuredClone</span>(<var>value</var>[, { <span data-x="dom-StructuredSerializeOptions-transfer">transfer</span> }])</code></dt>
   <dd>
    <p>Takes the input value and returns a deep copy by performing the structured clone algorithm.
    <span>Transferable objects</span> listed in the <code
    data-x="dom-StructuredSerializeOptions-transfer">transfer</code> array are transferred, not
    just cloned, meaning that they are no longer usable in the input value.</p>

    <p>Throws a <span>"<code>DataCloneError</code>"</span> <code>DOMException</code> if any part of
    the input value is not <span data-x="serializable objects">serializable</span>.</p>
   </dd>
  </dl>

  <div w-nodev>

  <p>The <dfn method for="WindowOrWorkerGlobalScope"
  data-x="dom-structuredClone"><code>structuredClone(<var>value</var>,
  <var>options</var>)</code></dfn> method steps are:</p>

  <ol>
   <li><p>Let <var>serialized</var> be ?
   <span>StructuredSerializeWithTransfer</span>(<var>value</var>, <var>options</var>["<code
   data-x="dom-StructuredSerializeOptions-transfer">transfer</code>"]).</p></li>

   <li><p>Let <var>deserializeRecord</var> be ?
   <span>StructuredDeserializeWithTransfer</span>(<var>serialized</var>, <span>this</span>'s
   <span data-x="concept-relevant-realm">relevant realm</span>).</p></li>

   <li><p>Return <var>deserializeRecord</var>.[[Deserialized]].</p></li>
  </ol>

  </div>


  <h2 split-filename="dom" id="dom">Semantics, structure, and APIs of HTML documents</h2>

  <h3>Documents</h3>

  <p>Every XML and HTML document in an HTML UA is represented by a <code>Document</code> object. <ref spec=DOM></p>

  <p>The <code>Document</code> object's <dfn id="the-document's-address"
  data-x="concept-document-url" data-x-href="https://dom.spec.whatwg.org/#concept-document-url"
  data-x-for="Document">URL</dfn> is defined in <cite>DOM</cite>. It is initially set when
  the <code>Document</code> object is created, but can change during the lifetime of the
  <code>Document</code> object; for example, it changes when the user <span
  data-x="navigate">navigates</span> to a <span data-x="navigate-fragid">fragment</span> on the page
  and when the <code data-x="dom-history-pushState">pushState()</code> method is called with a new
  <span>URL</span>. <ref spec=DOM></p>
  <!--
    https://www.hixie.ch/tests/adhoc/dom/level0/history/pushState/002/
    https://www.hixie.ch/tests/adhoc/html/navigation/fragids/016.html
  -->

  <p class="warning">Interactive user agents typically expose the <code>Document</code> object's
  <span data-x="concept-document-url">URL</span> in their user interface. This is the primary
  mechanism by which a user can tell if a site is attempting to impersonate another.</p>

  <p>The <code>Document</code> object's <dfn data-x="concept-document-origin"
  data-x-href="https://dom.spec.whatwg.org/#concept-document-origin"
  data-x-for="Document">origin</dfn> is defined in <cite>DOM</cite>. It is initially set when the
  <code>Document</code> object is created, and can change during the lifetime of the
  <code>Document</code> only upon setting <code
  data-x="dom-document-domain">document.domain</code>. A <code>Document</code>'s <span
  data-x="concept-document-origin">origin</span> can differ from the <span
  data-x="concept-url-origin">origin</span> of its <span data-x="concept-document-url">URL</span>;
  for example when a <span>child navigable</span> is <span data-lt="create a new child
  navigable">created</span>, its <span data-x="nav-document">active document</span>'s <span
  data-x="concept-document-origin">origin</span> is inherited from its <span
  data-x="nav-parent">parent</span>'s <span data-x="nav-document">active document</span>'s <span
  data-x="concept-document-origin">origin</span>, even though its <span
  data-x="nav-document">active document</span>'s <span data-x="concept-document-url">URL</span> is
  <code>about:blank</code>. <ref spec=DOM></p>

  <p>When a <code>Document</code> is created by a <span data-x="concept-script">script</span> using
  the <code data-x="dom-DOMImplementation-createDocument">createDocument()</code> or <code
  data-x="dom-DOMImplementation-createHTMLDocument">createHTMLDocument()</code> methods, the
  <code>Document</code> is <span>ready for post-load tasks</span> immediately.</p>

  <p><dfn export>The document's referrer</dfn> is a string (representing a <span>URL</span>) that
  can be set when the <code>Document</code> is created. If it is not explicitly set, then its value
  is the empty string.</p>


  <h4>The <code>Document</code> object</h4>

  <p><cite>DOM</cite> defines a <code data-x="DOM Document">Document</code> interface, which
  this specification extends significantly.</p>

  <pre><code class="idl">enum <dfn enum>DocumentReadyState</dfn> { "loading", "interactive", "complete" };
enum <dfn enum>DocumentVisibilityState</dfn> { "visible", "hidden" };
typedef (<span>HTMLScriptElement</span> or <span>SVGScriptElement</span>) <dfn typedef>HTMLOrSVGScriptElement</dfn>;

[<span>LegacyOverrideBuiltIns</span>]
partial interface <dfn id="document" data-lt="">Document</dfn> {
  // <span>resource metadata management</span>
  [PutForwards=<span data-x="dom-location-href">href</span>, <span>LegacyUnforgeable</span>] readonly attribute <span>Location</span>? <span data-x="dom-document-location">location</span>;
  attribute USVString <span data-x="dom-document-domain">domain</span>;
  readonly attribute USVString <span data-x="dom-document-referrer">referrer</span>;
  attribute USVString <span data-x="dom-document-cookie">cookie</span>;
  readonly attribute DOMString <span data-x="dom-document-lastModified">lastModified</span>;
  readonly attribute <span>DocumentReadyState</span> <span data-x="dom-document-readyState">readyState</span>;

  // <span>DOM tree accessors</span>
  <a href="#dom-document-nameditem">getter</a> object (DOMString name);
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-document-title">title</span>;
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-document-dir">dir</span>;
  [<span>CEReactions</span>] attribute <span>HTMLElement</span>? <span data-x="dom-document-body">body</span>;
  readonly attribute <span>HTMLHeadElement</span>? <span data-x="dom-document-head">head</span>;
  [SameObject] readonly attribute <span>HTMLCollection</span> <span data-x="dom-document-images">images</span>;
  [SameObject] readonly attribute <span>HTMLCollection</span> <span data-x="dom-document-embeds">embeds</span>;
  [SameObject] readonly attribute <span>HTMLCollection</span> <span data-x="dom-document-plugins">plugins</span>;
  [SameObject] readonly attribute <span>HTMLCollection</span> <span data-x="dom-document-links">links</span>;
  [SameObject] readonly attribute <span>HTMLCollection</span> <span data-x="dom-document-forms">forms</span>;
  [SameObject] readonly attribute <span>HTMLCollection</span> <span data-x="dom-document-scripts">scripts</span>;
  NodeList <span data-x="dom-document-getElementsByName">getElementsByName</span>(DOMString elementName);
  readonly attribute <span>HTMLOrSVGScriptElement</span>? <span data-x="dom-document-currentScript">currentScript</span>; // classic scripts in a document tree only

  // <span>dynamic markup insertion</span>
  [<span>CEReactions</span>] <span>Document</span> <span data-x="dom-document-open">open</span>(optional DOMString unused1, optional DOMString unused2); // both arguments are <a href="#dom-document-open-unused-arguments">ignored</a>
  <span>WindowProxy</span>? <span data-x="dom-document-open-window">open</span>(USVString url, DOMString name, DOMString features);
  [<span>CEReactions</span>] undefined <span data-x="dom-document-close">close</span>();
  [<span>CEReactions</span>] undefined <span data-x="dom-document-write">write</span>(DOMString... text);
  [<span>CEReactions</span>] undefined <span data-x="dom-document-writeln">writeln</span>(DOMString... text);

  // <span>user interaction</span>
  readonly attribute <span>WindowProxy</span>? <span data-x="dom-document-defaultView">defaultView</span>;
  boolean <span data-x="dom-document-hasFocus">hasFocus</span>();
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-document-designMode">designMode</span>;
  [<span>CEReactions</span>] boolean <span data-x="dom-document-execCommand">execCommand</span>(DOMString commandId, optional boolean showUI = false, optional DOMString value = "");
  boolean <span data-x="dom-document-queryCommandEnabled">queryCommandEnabled</span>(DOMString commandId);
  boolean <span data-x="dom-document-queryCommandIndeterm">queryCommandIndeterm</span>(DOMString commandId);
  boolean <span data-x="dom-document-queryCommandState">queryCommandState</span>(DOMString commandId);
  boolean <span data-x="dom-document-queryCommandSupported">queryCommandSupported</span>(DOMString commandId);
  DOMString <span data-x="dom-document-queryCommandValue">queryCommandValue</span>(DOMString commandId);
  readonly attribute boolean <span data-x="dom-document-hidden">hidden</span>;
  readonly attribute <span>DocumentVisibilityState</span> <span data-x="dom-document-visibilityState">visibilityState</span>;

  // special <span>event handler IDL attributes</span> that only apply to Document objects
  [<span>LegacyLenientThis</span>] attribute <span>EventHandler</span> <span data-x="handler-onreadystatechange">onreadystatechange</span>;
  attribute <span>EventHandler</span> <span data-x="handler-onvisibilitychange">onvisibilitychange</span>;

  // <a href="#Document-partial">also has obsolete members</a>
};
<span>Document</span> includes <span>GlobalEventHandlers</span>;</code></pre>

  <p>Each <code>Document</code> has a <dfn data-x="concept-document-policy-container" export
  for="Document">policy container</dfn> (a <span>policy container</span>), initially a new policy
  container, which contains policies which apply to the <code>Document</code>.</p>

  <p id="concept-document-feature-policy">Each <code>Document</code> has a <dfn
  data-x="concept-document-permissions-policy" export for="Document">permissions policy</dfn>, which
  is a <span data-x="concept-permissions-policy">permissions policy</span>, which is initially
  empty.</p>

  <p>Each <code>Document</code> has a <dfn data-x="concept-document-module-map">module map</dfn>,
  which is a <span>module map</span>, initially empty.</p>

  <p>Each <code>Document</code> has a <dfn data-x="concept-document-coop">cross-origin opener
  policy</dfn>, which is a <span>cross-origin opener policy</span>, initially a new cross-origin
  opener policy.</p>

  <p>Each <code>Document</code> has an <dfn>is initial <code>about:blank</code></dfn>, which is a
  boolean, initially false.</p>

  <p>Each <code>Document</code> has a <dfn data-x="concept-document-navigation-id">navigation
  id</dfn>, which is a <span>navigation ID</span> or null, initially null.</p>

  <p>Each <code>Document</code> has a <dfn
  data-x="concept-document-bfcache-blocking-reasons">bfcache blocking reasons</dfn>, which is a
  <span>set</span> of strings, initially an empty list. Each string is one of the following:</p>
  <dl>
    <dt>"<dfn data-x="blocking-error-document"><code>error-document</code></dfn>"</dt>
    <dd>The document had an error.</dd>
    <dt>"<dfn data-x="blocking-fetch-canceled"><code>fetch-canceled</code></dfn>"</dt>
    <dd>Fetch was canceled.</dd>
    <dt>"<dfn data-x="blocking-parser-aborted"><code>parser-aborted</code></dfn>"</dt>
    <dd>Parser was aborted.</dd>
    <dt>"<dfn data-x="blocking-websocket"><code>websocket</code></dfn>"</dt>
    <dd>There was an open websocket connection.</dd>
  </dl>
  <p class="note"><span data-x="concept-document-bfcache-blocking-reasons">bfcache blocking
  reasons</span> represent the reasons that prevented the page from being restored from <a href=
  "#note-bfcache">bfcache</a>.</p>

  <h4>The <code>DocumentOrShadowRoot</code> interface</h4>

  <p><cite>DOM</cite> defines the <code data-x="DOM
  DocumentOrShadowRoot">DocumentOrShadowRoot</code> mixin, which this specification
  extends.</p>

  <pre><code class="idl">partial interface mixin <dfn data-lt="">DocumentOrShadowRoot</dfn> {
  readonly attribute <span>Element</span>? <span data-x="dom-documentorshadowroot-activeElement">activeElement</span>;
};</code></pre>

  <h4><dfn>Resource metadata management</dfn></h4>

  <dl class="domintro">
   <dt><code data-x=""><var>document</var>.<span subdfn data-x="dom-document-referrer">referrer</span></code></dt>
   <dd>
    <p>Returns the <span data-x="concept-document-url">URL</span> of the <code>Document</code> from
    which the user navigated to this one, unless it was blocked or there was no such document, in
    which case it returns the empty string.</p>

    <p>The <code data-x="rel-noreferrer">noreferrer</code> link type can be used to block the
    referrer.</p>
   </dd>
  </dl>

  <div w-nodev>

  <p>The <dfn attribute for="Document"><code data-x="dom-document-referrer">referrer</code></dfn>
  attribute must return <span>the document's referrer</span>.</p>

  </div>

  <hr>

  <dl class="domintro">
   <dt><code data-x=""><var>document</var>.<span subdfn data-x="dom-document-cookie">cookie</span> [ = <var>value</var> ]</code></dt>
   <dd>
    <p>Returns the HTTP cookies that apply to the <code>Document</code>. If there are no cookies or
    cookies can't be applied to this resource, the empty string will be returned.</p>

    <p>Can be set, to add a new cookie to the element's set of HTTP cookies.</p>

    <p>If the contents are <span data-x="sandboxed origin browsing context flag">sandboxed into a
    unique origin</span> (e.g. in an <code>iframe</code> with the <code
    data-x="attr-iframe-sandbox">sandbox</code> attribute), a
    <span>"<code>SecurityError</code>"</span> <code>DOMException</code> will be thrown on getting
    and setting.</p>
   </dd>
  </dl>

  <div w-nodev>

  <p>The <dfn attribute for="Document"><code data-x="dom-document-cookie">cookie</code></dfn>
  attribute represents the cookies of the resource identified by the document's <span
  data-x="concept-document-url">URL</span>.</p>

  <p>A <code>Document</code> object that falls into one of the following conditions is a
  <dfn>cookie-averse <code>Document</code> object</dfn>:</p>

  <ul>

   <li>A <code>Document</code> object whose <span data-x="concept-document-bc">browsing
   context</span> is null.</li>

   <li>A <code>Document</code> whose <span data-x="concept-document-url">URL</span>'s <span
   data-x="concept-url-scheme">scheme</span> is not an <span>HTTP(S) scheme</span>.</li>

  </ul>

  <!--Other specifications can also define <code>Document</code> objects as being <span
  data-x="cookie-averse Document object">cookie-averse <code>Document</code> objects</span>.-->

  <p id="sandboxCookies">
  <!--INSERT TRACKING-->
  On getting, if the document is a <span>cookie-averse <code>Document</code> object</span>, then the
  user agent must return the empty string. Otherwise, if the <code>Document</code>'s <span
  data-x="concept-document-origin">origin</span> is an <span data-x="concept-origin-opaque">opaque
  origin</span>, the user agent must throw a <span>"<code>SecurityError</code>"</span>
  <code>DOMException</code>. Otherwise, the user agent must return the <span>cookie-string</span>
  for the document's <span data-x="concept-document-url">URL</span> for a "non-HTTP" API, decoded
  using <span>UTF-8 decode without BOM</span>. <ref spec=COOKIES></p>

  <p>On setting, if the document is a <span>cookie-averse <code>Document</code> object</span>, then
  the user agent must do nothing. Otherwise, if the <code>Document</code>'s <span
  data-x="concept-document-origin">origin</span> is an <span data-x="concept-origin-opaque">opaque
  origin</span>, the user agent must throw a <span>"<code>SecurityError</code>"</span>
  <code>DOMException</code>. Otherwise, the user agent must act as it would when <span
  data-x="receives a set-cookie-string">receiving a set-cookie-string</span> for the document's
  <span data-x="concept-document-url">URL</span> via a "non-HTTP" API, consisting of the new value
  <span data-x="utf-8 encode">encoded as UTF-8</span>.  <ref spec=COOKIES> <ref spec=ENCODING></p>

  <p class="note">Since the <code data-x="dom-document-cookie">cookie</code> attribute is accessible
  across frames, the path restrictions on cookies are only a tool to help manage which cookies are
  sent to which parts of the site, and are not in any way a security feature.</p>

  <p class="warning">The <code data-x="dom-document-cookie">cookie</code> attribute's getter and
  setter synchronously access shared state. Since there is no locking mechanism, other browsing
  contexts in a multiprocess user agent can modify cookies while scripts are running. A site could,
  for instance, try to read a cookie, increment its value, then write it back out, using the new
  value of the cookie as a unique identifier for the session; if the site does this twice in two
  different browser windows at the same time, it might end up using the same "unique" identifier for
  both sessions, with potentially disastrous effects.</p>

  <hr>

  </div>

  <dl class="domintro">
   <dt><code data-x=""><var>document</var>.<span subdfn data-x="dom-document-lastmodified">lastModified</span></code></dt>
   <dd>
    <p>Returns the date of the last modification to the document, as reported by the server, in the
    form "<code data-x="">MM/DD/YYYY&nbsp;hh:mm:ss</code>", in the user's local time zone.</p>

    <p>If the last modification date is not known, the current time is returned instead.</p>
   </dd>
  </dl>

  <div w-nodev>

  <p>The <dfn attribute for="Document"><code
  data-x="dom-document-lastModified">lastModified</code></dfn> attribute, on getting, must return
  the date and time of the <code>Document</code>'s source file's last modification, in the user's
  local time zone, in the following format:</p>

  <ol>
   <li> The month component of the date. </li>

   <li> A U+002F SOLIDUS character (/). </li>

   <li> The day component of the date. </li>

   <li> A U+002F SOLIDUS character (/). </li>

   <li> The year component of the date. </li>

   <li> A U+0020 SPACE character. </li>

   <li> The hours component of the time. </li>

   <li> A U+003A COLON character (:). </li>

   <li> The minutes component of the time. </li>

   <li> A U+003A COLON character (:). </li>

   <li> The seconds component of the time. </li>
  </ol>

  <p>All the numeric components above, other than the year, must be given as two <span>ASCII
  digits</span> representing the number in base ten, zero-padded if necessary. The year must be
  given as the shortest possible string of four or more <span>ASCII digits</span> representing the
  number in base ten, zero-padded if necessary.</p>

  <p>The <code>Document</code>'s source file's last modification date and time must be derived from
  relevant features of the networking protocols used, e.g. from the value of the HTTP `<code
  data-x="http-last-modified">Last-Modified</code>` header of the document, or from metadata in the
  file system for local files. If the last modification date and time are not known, the attribute
  must return the current date and time in the above format.</p>

  </div>


  <h4>Reporting document loading status</h4>

  <dl class="domintro">
   <dt><code data-x=""><var>document</var>.<span subdfn data-x="dom-document-readyState">readyState</span></code></dt>
   <dd>
    <p>Returns "<code data-x="">loading</code>" while the <code>Document</code> is loading, "<code
    data-x="">interactive</code>" once it is finished parsing but still loading subresources, and
    "<code data-x="">complete</code>" once it has loaded.</p>

    <p>The <code data-x="event-readystatechange">readystatechange</code> event fires on the
    <code>Document</code> object when this value changes.</p>

    <p><span w-dev subdfn data-x="stop parsing"></span>The <code
    data-x="event-DOMContentLoaded">DOMContentLoaded</code> event fires after the transition to
    "<code data-x="">interactive</code>" but before the transition to "<code
    data-x="">complete</code>", at the point where all subresources apart from <code
    data-x="attr-script-async">async</code> <code>script</code> elements have loaded.</p>
   </dd>
  </dl>

  <div w-nodev>

  <p>Each <code>Document</code> has a <dfn>current document readiness</dfn>, a string, initially
  "<code data-x="">complete</code>".</p>

  <p class="note">For <code>Document</code> objects created via the <span
  data-x="create-the-document-object">create and initialize a <code>Document</code> object</span>
  algorithm, this will be immediately reset to "<code data-x="">loading</code>" before any script
  can observe the value of <code data-x="dom-document-readyState">document.readyState</code>. This
  default applies to other cases such as <span data-x="is initial about:blank">initial
  <code>about:blank</code></span> <code>Document</code>s or <code>Document</code>s without a
  <span data-x="concept-document-bc">browsing context</span>.</p>

  <p>The <dfn attribute for="Document"><code
  data-x="dom-document-readyState">readyState</code></dfn> getter steps are to return
  <span>this</span>'s <span>current document readiness</span>.</p>

  <p>To <dfn>update the current document readiness</dfn> for <code>Document</code>
  <var>document</var> to <var>readinessValue</var>:</p>

  <ol>
   <li><p>If <var>document</var>'s <span>current document readiness</span> equals
   <var>readinessValue</var>, then return.</p></li>

   <li><p>Set <var>document</var>'s <span>current document readiness</span> to
   <var>readinessValue</var>.</p></li>

   <li>
    <p>If <var>document</var> is associated with an <span>HTML parser</span>, then:</p>

    <ol>
     <li><p>Let <var>now</var> be the <span>current high resolution time</span> given
     <var>document</var>'s <span>relevant global object</span>.</p></li>

     <li><p>If <var>readinessValue</var> is "<code data-x="">complete</code>", and
     <var>document</var>'s <span>load timing info</span>'s <span>DOM complete time</span> is 0, then
     set <var>document</var>'s <span>load timing info</span>'s <span>DOM complete time</span> to
     <var>now</var>.</p></li>

     <li><p>Otherwise, if <var>readinessValue</var> is "<code data-x="">interactive</code>", and
     <var>document</var>'s <span>load timing info</span>'s <span>DOM interactive time</span> is 0,
     then set <var>document</var>'s <span>load timing info</span>'s <span>DOM interactive
     time</span> to <var>now</var>.</p></li>
    </ol>
   </li>

   <li><p><span data-x="concept-event-fire">Fire an event</span> named <code
   data-x="event-readystatechange">readystatechange</code> at <var>document</var>.</p></li>
  </ol>

  <hr>

  <p>A <code>Document</code> is said to have an <dfn>active parser</dfn> if it is associated with an
  <span>HTML parser</span> or an <span>XML parser</span> that has not yet been <span data-x="stop
  parsing">stopped</span> or <span data-x="abort a parser">aborted</span>.</p>

  <hr>

  <p>A <code>Document</code> has a <span>document load timing info</span> <dfn export
  for="Document">load timing info</dfn>.</p>

  <p>A <code>Document</code> has a <span>document unload timing info</span> <dfn export
  for="Document">previous document unload timing</dfn>.</p>

  <p>A <code>Document</code> has a boolean <dfn>was created via cross-origin redirects</dfn>,
  initially false.</p>

  <p>The <dfn export>document load timing info</dfn> <span>struct</span> has the following <span
  data-x="struct item">items</span>:</p>

  <dl>
   <dt><dfn export for="document load timing info">navigation start time</dfn> (default 0)</dt>
   <dd>A number</dd>

   <dt><dfn export for="document load timing info">DOM interactive time</dfn> (default 0)</dt>
   <dt><dfn export for="document load timing info">DOM content loaded event start time</dfn>
   (default 0)</dt>
   <dt><dfn export for="document load timing info">DOM content loaded event end time</dfn> (default
   0)</dt>
   <dt><dfn export for="document load timing info">DOM complete time</dfn> (default 0)</dt>
   <dt><dfn export for="document load timing info">load event start time</dfn> (default 0)</dt>
   <dt><dfn export for="document load timing info">load event end time</dfn> (default 0)</dt>
   <dd><code>DOMHighResTimeStamp</code> values</dd>
  </dl>

  <p>The <dfn export>document unload timing info</dfn> <span>struct</span> has the following <span
  data-x="struct item">items</span>:</p>

  <dl>
   <dt><dfn export for="document unload timing info">unload event start time</dfn> (default 0)</dt>
   <dt><dfn export for="document unload timing info">unload event end time</dfn> (default 0)</dt>
   <dd><code>DOMHighResTimeStamp</code> values</dd>
  </dl>

  </div>

  <h4><dfn>Render-blocking mechanism</dfn></h4>

  <p>Each <code>Document</code> has a <dfn>render-blocking element set</dfn>, a <span>set</span> of
  elements, initially the empty set.</p>

  <p>A <code>Document</code> <var>document</var> <dfn>allows adding render-blocking elements</dfn>
  if <var>document</var>'s <span data-x="concept-document-content-type">content type</span> is
  "<code>text/html</code>" and <span>the body element</span> of <var>document</var> is null.</p>

  <p>A <code>Document</code> <var>document</var> is <dfn>render-blocked</dfn> if both of the
  following are true:</p>

  <ul>
   <li><p><var>document</var>'s <span>render-blocking element set</span> is non-empty, or
   <var>document</var> <span>allows adding render-blocking elements</span>.</p>

   <li><p>The <span>current high resolution time</span> given <var>document</var>'s <span>relevant
   global object</span> has not exceeded an <span>implementation-defined</span> timeout value.</p>
  </ul>

  <p>An element <var>el</var> is <dfn>render-blocking</dfn> if <var>el</var>'s
  <span>node document</span> <var>document</var> is <span>render-blocked</span>, and <var>el</var>
  is in <var>document</var>'s <span>render-blocking element set</span>.</p>

  <p>To <dfn>block rendering</dfn> on an element <var>el</var>:</p>

  <ol>
   <li><p>Let <var>document</var> be <var>el</var>'s <span>node document</span>.</p>

   <li><p>If <var>document</var> <span>allows adding render-blocking elements</span>, then
   <span data-x="set append">append</span> <var>el</var> to <var>document</var>'s
   <span>render-blocking element set</span>.</p>
  </ol>

  <p>To <dfn>unblock rendering</dfn> on an element <var>el</var>:</p>

  <ol>
   <li><p>Let <var>document</var> be <var>el</var>'s <span>node document</span>.</p>

   <li><p><span data-x="list remove">Remove</span> <var>el</var> from <var>document</var>'s
   <span>render-blocking element set</span>.</p>
  </ol>

  <p>Whenever a <span>render-blocking</span> element <var>el</var>
  <span>becomes browsing-context disconnected</span>, or <var>el</var>'s
  <span>blocking attribute</span>'s value is changed so that <var>el</var> is no longer
  <span>potentially render-blocking</span>, then <span>unblock rendering</span> on
  <var>el</var>.</p>

  <h4><dfn>DOM tree accessors</dfn></h4>

  <p><dfn>The <code>html</code> element</dfn> of a document is its <span>document element</span>,
  if it's an <code>html</code> element, and null otherwise.</p>

  <hr>

  <dl class="domintro">
   <dt><code data-x=""><var>document</var>.<span subdfn data-x="dom-document-head">head</span></code></dt>
   <dd><p>Returns <span>the <code>head</code> element</span>.</p></dd>
  </dl>

  <p><dfn>The <code>head</code> element</dfn> of a document is the first <code>head</code> element
  that is a child of <span>the <code>html</code> element</span>, if there is one, or null
  otherwise.</p>

  <div w-nodev>

  <p>The <dfn attribute for="Document"><code data-x="dom-document-head">head</code></dfn> attribute,
  on getting, must return <span>the <code>head</code> element</span> of the document (a
  <code>head</code> element or null).</p>

  </div>

  <hr>

  <dl class="domintro">
   <dt><code data-x=""><var>document</var>.<span subdfn data-x="dom-document-title">title</span> [ = <var>value</var> ]</code></dt>
   <dd>
    <p>Returns the document's title, as given by <span>the <code>title</code> element</span> for
    HTML and as given by the <span>SVG <code>title</code></span> element for SVG.</p>

    <p>Can be set, to update the document's title. If there is no appropriate element to update, the
    new value is ignored.</p>
   </dd>
  </dl>

  <p><dfn>The <code>title</code> element</dfn> of a document is the first <code>title</code> element
  in the document (in <span>tree order</span>), if there is one, or null otherwise.</p>

  <div w-nodev>

  <p>The <dfn attribute for="Document" id="document.title"
  data-x="dom-document-title"><code>title</code></dfn> attribute must, on getting, run the following
  algorithm:</p>

  <ol>
   <li><p>If the <span>document element</span> is an <span>SVG <code>svg</code></span> element, then
   let <var>value</var> be the <span>child text content</span> of the first <span>SVG
   <code>title</code></span> element that is a child of the <span>document element</span>.</p></li>

   <li><p>Otherwise, let <var>value</var> be the <span>child text content</span> of <span>the
   <code>title</code> element</span>, or the empty string if <span>the <code>title</code>
   element</span> is null.</p></li>

   <li><p><span>Strip and collapse ASCII whitespace</span> in <var>value</var>.</p></li>

   <li><p>Return <var>value</var>.</p></li>
  </ol>

  <p>On setting, the steps corresponding to the first matching condition in the following list must
  be run:</p>

  <dl class="switch">
   <dt>If the <span>document element</span> is an <span>SVG <code>svg</code></span> element</dt>
   <dd>
    <ol>
     <li><p>If there is an <span>SVG <code>title</code></span> element that is a child of the
     <span>document element</span>, let <var>element</var> be the first such element.</p></li>

     <li>
      <p>Otherwise:</p>

      <ol>
       <li><p>Let <var>element</var> be the result of <span data-x="create an element">creating an
       element</span> given the <span>document element</span>'s <span>node document</span>, <code
       data-x="SVG title">title</code>, and the <span>SVG namespace</span>.</p>

       <li><p>Insert <var>element</var> as the <span>first child</span> of the <span>document
       element</span>.</p></li>
      </ol>
     </li>

     <li><p><span>String replace all</span> with the given value within <var>element</var>.</p></li>
    </ol>
   </dd>

   <dt>If the <span>document element</span> is in the <span>HTML namespace</span></dt>
   <dd>
    <ol>
     <li><p>If <span>the <code>title</code> element</span> is null and <span>the <code>head</code>
     element</span> is null, then return.</p></li>

     <li><p>If <span>the <code>title</code> element</span> is non-null, let <var>element</var> be
     <span>the <code>title</code> element</span>.</p></li>

     <li>
      <p>Otherwise:</p>

      <ol>
       <li><p>Let <var>element</var> be the result of <span data-x="create an element">creating an
       element</span> given the <span>document element</span>'s <span>node document</span>,
       <code>title</code>, and the <span>HTML namespace</span>.</p>

       <li><p><span data-x="concept-node-append">Append</span> <var>element</var> to <span>the
       <code>head</code> element</span>.</p></li>
      </ol>
     </li>

     <li><p><span>String replace all</span> with the given value within <var>element</var>.</p></li>
    </ol>
   </dd>

   <dt>Otherwise</dt>
   <dd>
    <p>Do nothing.</p>
   </dd>
  </dl>

  </div>

  <hr>

  <dl class="domintro">
   <dt><code data-x=""><var>document</var>.<span subdfn data-x="dom-document-body">body</span> [ = <var>value</var> ]</code></dt>
   <dd>
    <p>Returns <span>the body element</span>.</p>

    <p>Can be set, to replace <span>the body element</span>.</p>

    <p>If the new value is not a <code>body</code> or <code>frameset</code> element, this will throw
    a <span>"<code>HierarchyRequestError</code>"</span> <code>DOMException</code>.</p>
   </dd>
  </dl>

  <p><dfn export>The body element</dfn> of a document is the first of <span>the <code>html</code>
  element</span>'s children that is either a <code>body</code> element or a <code>frameset</code>
  element, or null if there is no such element.</p>

  <div w-nodev>

  <p>The <dfn attribute for="Document"><code data-x="dom-document-body">body</code></dfn> attribute,
  on getting, must return <span>the body element</span> of the document (either a <code>body</code>
  element, a <code>frameset</code> element, or null). On setting, the following algorithm must be
  run:</p>

  <ol>
   <!-- if changes are requested:
    http://searchfox.org/mozilla-central/source/dom/html/nsHTMLDocument.cpp
    search for ::GetBody ::SetBody
    https://trac.webkit.org/browser/trunk/Source/WebCore/html/HTMLDocument.cpp
    search for ::setBody
    https://trac.webkit.org/browser/trunk/Source/WebCore/dom/Document.cpp
    search for ::body
   -->

   <li>If the new value is not a <code>body</code> or <code>frameset</code> element, then throw a
   <span>"<code>HierarchyRequestError</code>"</span> <code>DOMException</code>.</li>

   <li>Otherwise, if the new value is the same as <span>the body element</span>, return.</li>

   <li>Otherwise, if <span>the body element</span> is not null, then <span
   data-x="concept-node-replace">replace</span> <span>the body element</span> with the new value
   within <span>the body element</span>'s parent and return.</li>

   <li>Otherwise, if there is no <span>document element</span>, throw a
   <span>"<code>HierarchyRequestError</code>"</span> <code>DOMException</code>.</li>

   <li>Otherwise, <span>the body element</span> is null, but there's a
   <span>document element</span>. <span data-x="concept-node-append">Append</span> the new value to
   the <span>document element</span>.</li>
  </ol>

  <p class="note">The value returned by the <code data-x="dom-document-body">body</code> getter is
  not always the one passed to the setter.</p>

  <div class="example">
   <p>In this example, the setter successfully inserts a <code>body</code> element (though this is
   non-conforming since SVG does not allow a <code>body</code> as child of <span>SVG
   <code>svg</code></span>). However the getter will return null because the document element is not
   <code>html</code>.</p>

   <pre><code class="html">&lt;svg xmlns="http://www.w3.org/2000/svg">
 &lt;script>
  document.body = document.createElementNS("http://www.w3.org/1999/xhtml", "body");
  console.assert(document.body === null);
 &lt;/script>
&lt;/svg></code></pre>
  </div>

  </div>

  <hr>

  <dl class="domintro">
   <dt><code data-x=""><var>document</var>.<span subdfn data-x="dom-document-images">images</span></code></dt>
   <dd>
    <p>Returns an <code>HTMLCollection</code> of the <code>img</code> elements in the
    <code>Document</code>.</p>
   </dd>

   <dt><code data-x=""><var>document</var>.<span subdfn data-x="dom-document-embeds">embeds</span></code></dt>
   <dt><code data-x=""><var>document</var>.<span subdfn data-x="dom-document-plugins">plugins</span></code></dt>
   <dd>
    <p>Returns an <code>HTMLCollection</code> of the <code>embed</code> elements in the
    <code>Document</code>.</p>
   </dd>

   <dt><code data-x=""><var>document</var>.<span subdfn data-x="dom-document-links">links</span></code></dt>
   <dd>
    <p>Returns an <code>HTMLCollection</code> of the <code>a</code> and <code>area</code> elements
    in the <code>Document</code> that have <code data-x="attr-hyperlink-href">href</code>
    attributes.</p>
   </dd>

   <dt><code data-x=""><var>document</var>.<span subdfn data-x="dom-document-forms">forms</span></code></dt>
   <dd>
    <p>Returns an <code>HTMLCollection</code> of the <code>form</code> elements in the
    <code>Document</code>.</p>
   </dd>

   <dt><code data-x=""><var>document</var>.<span subdfn data-x="dom-document-scripts">scripts</span></code></dt>
   <dd>
    <p>Returns an <code>HTMLCollection</code> of the <code>script</code> elements in the
    <code>Document</code>.</p>
   </dd>
  </dl>

  <div w-nodev>

  <!-- these all return the same object each time because of a rule in the collection section -->

  <p>The <dfn attribute for="Document"><code data-x="dom-document-images">images</code></dfn>
  attribute must return an <code>HTMLCollection</code> rooted at the <code>Document</code> node,
  whose filter matches only <code>img</code> elements.</p>

  <p>The <dfn attribute for="Document"><code data-x="dom-document-embeds">embeds</code></dfn>
  attribute must return an <code>HTMLCollection</code> rooted at the <code>Document</code> node,
  whose filter matches only <code>embed</code> elements.</p>

  <p>The <dfn attribute for="Document"><code data-x="dom-document-plugins">plugins</code></dfn>
  attribute must return the same object as that returned by the <code
  data-x="dom-document-embeds">embeds</code> attribute.</p>

  <p>The <dfn attribute for="Document"><code data-x="dom-document-links">links</code></dfn>
  attribute must return an <code>HTMLCollection</code> rooted at the <code>Document</code> node,
  whose filter matches only <code>a</code> elements with <code
  data-x="attr-hyperlink-href">href</code> attributes and <code>area</code> elements with <code
  data-x="attr-hyperlink-href">href</code> attributes.</p>

  <p>The <dfn attribute for="Document"><code data-x="dom-document-forms">forms</code></dfn>
  attribute must return an <code>HTMLCollection</code> rooted at the <code>Document</code> node,
  whose filter matches only <code>form</code> elements.</p>

  <p>The <dfn attribute for="Document"><code data-x="dom-document-scripts">scripts</code></dfn>
  attribute must return an <code>HTMLCollection</code> rooted at the <code>Document</code> node,
  whose filter matches only <code>script</code> elements.</p>

  <hr>

  </div>

  <dl class="domintro">
   <dt><code data-x=""><var>collection</var> = <var>document</var>.<span subdfn data-x="dom-document-getElementsByName">getElementsByName</span>(<var>name</var>)</code></dt>
   <dd><p>Returns a <code>NodeList</code> of elements in the <code>Document</code> that have a <code
   data-x="">name</code> attribute with the value <var>name</var>.</p></dd>
  </dl>

  <div w-nodev>

  <p>The <dfn method for="Document"><code
  data-x="dom-document-getElementsByName">getElementsByName(<var>elementName</var>)</code></dfn> method
  steps are to return a <span>live</span> <code>NodeList</code> containing all the <span>HTML
  elements</span> in that document that have a <code data-x="">name</code> attribute whose value is
  <span>identical to</span> the <var>elementName</var> argument, in <span>tree order</span>. When the
  method is invoked on a <code>Document</code> object again with the same argument, the user agent
  may return the same as the object returned by the earlier call. In other cases, a new
  <code>NodeList</code> object must be returned.</p>

  </div>

  <hr>

  <dl class="domintro">
   <dt><code data-x=""><var>document</var>.<span subdfn data-x="dom-document-currentScript">currentScript</span></code></dt>
   <dd>
    <p>Returns the <code>script</code> element, or the <span>SVG <code>script</code></span> element,
    that is currently executing, as long as the element represents a <span>classic script</span>. In
    the case of reentrant script execution, returns the one that most recently started executing
    amongst those that have not yet finished executing.</p>

    <p>Returns null if the <code>Document</code> is not currently executing a <code>script</code> or
    <span>SVG <code>script</code></span> element (e.g., because the running script is an event
    handler, or a timeout), or if the currently executing <code>script</code> or <span>SVG
    <code>script</code></span> element represents a <span>module script</span>.</p>
   </dd>
  </dl>

  <div w-nodev>

  <p>The <dfn attribute for="Document"><code
  data-x="dom-document-currentScript">currentScript</code></dfn> attribute, on getting, must return
  the value to which it was most recently set. When the <code>Document</code> is created, the <code
  data-x="dom-document-currentScript">currentScript</code> must be initialized to null.</p>

  </div>

  <p class="note">This API has fallen out of favor in the implementer and standards community, as
  it globally exposes <code>script</code> or <span>SVG <code>script</code></span> elements. As such,
  it is not available in newer contexts, such as when running <span data-x="module script">module
  scripts</span> or when running scripts in a <span>shadow tree</span>. We are looking into creating
  a new solution for identifying the running script in such contexts, which does not make it
  globally available: see <a href="https://github.com/whatwg/html/issues/1013">issue #1013</a>.</p>

  <div w-nodev>

  <hr>

  <p id="dom-document-namedItem-which">The <code>Document</code> interface <span data-x="support
  named properties">supports named properties</span>. The <span>supported property names</span> of a
  <code>Document</code> object <var>document</var> at any moment consist of the following, in
  <span>tree order</span> according to the element that contributed them, ignoring later duplicates,
  and with values from <code data-x="attr-id">id</code> attributes coming before values from <code
  data-x="">name</code> attributes when the same element contributes both:</p>

  <!-- KEEP THIS LIST IN SYNC WITH "NAMED ELEMENTS" DEFINITION BELOW -->
  <ul>
   <li><p>the value of the <code data-x="">name</code> content attribute for all
   <span>exposed</span> <code>embed</code>, <code>form</code>, <code>iframe</code>,
   <code>img</code>, and <span>exposed</span> <code>object</code> elements that have a non-empty
   <code data-x="">name</code> content attribute and are <span>in a document tree</span> with
   <var>document</var> as their <span>root</span>;</p></li>

   <li><p>the value of the <code data-x="attr-id">id</code> content attribute for all
   <span>exposed</span> <code>object</code> elements that have a non-empty
   <code data-x="attr-id">id</code> content attribute and are <span>in a document tree</span> with
   <var>document</var> as their <span>root</span>; and</p></li>

   <li><p>the value of the <code data-x="attr-id">id</code> content attribute for all
   <code>img</code> elements that have both a non-empty <code data-x="attr-id">id</code> content
   attribute and a non-empty <code data-x="">name</code> content attribute, and are <span>in a
   document tree</span> with <var>document</var> as their <span>root</span>.</p></li>
  </ul>

  <p id="dom-document-nameditem">To <span>determine the value of a named property</span>
  <var>name</var> for a <code>Document</code>, the user agent must return the value obtained using
  the following steps:</p>

  <ol>
   <li>
    <p>Let <var>elements</var> be the list of <span data-x="dom-document-namedItem-filter">named
    elements</span> with the name <var>name</var> that are <span>in a document tree</span> with the
    <code>Document</code> as their <span>root</span>.</p>

    <p class="note">There will be at least one such element, since the algorithm would otherwise not
    have been <span data-x="LegacyPlatformObjectGetOwnProperty">invoked by Web IDL</span>.</p>
   </li>

   <li><p>If <var>elements</var> has only one element, and that element is an <code>iframe</code>
   element, and that <code>iframe</code> element's <span>content navigable</span> is not null, then
   return the <span data-x="nav-wp">active <code>WindowProxy</code></span> of the element's
   <span>content navigable</span>.</p></li>

   <li>
    <p>Otherwise, if <var>elements</var> has only one element, return that element.</p>
   </li>

   <li>
    <p>Otherwise return an <code>HTMLCollection</code> rooted at the <code>Document</code> node,
    whose filter matches only <span data-x="dom-document-namedItem-filter">named elements</span> with
    the name <var>name</var>.</p> <!-- the same one each time is returned, because of the
    rule under collections -->
   </li>

  <!--
  Note that this named getter overrides built-in properties, as in:
     https://software.hixie.ch/utilities/js/live-dom-viewer/?%3C!DOCTYPE%20html%3E%0D%0A...%3Ciframe%20name%3Dbody%3E%3C%2Fiframe%3E%3Cscript%3Ew(document.body)%3C%2Fscript%3E
  This is what the "LegacyOverrideBuiltIns" bit means in the IDL.
  -->
  </ol>

  <p><dfn data-x="dom-document-nameditem-filter">Named elements</dfn> with the name <var>name</var>, for the purposes of the above algorithm, are those that are either:</p>

  <!-- KEEP THIS LIST IN SYNC WITH SUPPORTED PROPERTY VALUES ABOVE -->
  <ul>
   <li><span>Exposed</span> <code>embed</code>, <code>form</code>, <code>iframe</code>,
   <code>img</code>, or <span>exposed</span> <code>object</code> elements that have a <code
   data-x="">name</code> content attribute whose value is <var>name</var>, or</li>

   <li><span>Exposed</span> <code>object</code> elements that have an <code
   data-x="attr-id">id</code> content attribute whose value is <var>name</var>, or</li>

   <li><code>img</code> elements that have an <code data-x="attr-id">id</code> content attribute
   whose value is <var>name</var>, and that have a non-empty <code data-x="">name</code>
   content attribute present also.</li>
  </ul>

  <p>An <code>embed</code> or <code>object</code> element is said to be <dfn>exposed</dfn> if it has
  no <span>exposed</span> <code>object</code> ancestor, and, for <code>object</code> elements, is
  additionally either not showing its <span>fallback content</span> or has no <code>object</code> or
  <code>embed</code> descendants.</p>

  </div>

  <hr>

  <p class="note">The <code data-x="dom-document-dir">dir</code> attribute on the
  <code>Document</code> interface is defined along with the <code data-x="attr-dir">dir</code>
  content attribute.</p>



  <h3>Elements</h3>

  <h4>Semantics</h4>

  <p>Elements, attributes, and attribute values in HTML are defined (by this specification) to have
  certain meanings (semantics). For example, the <code>ol</code> element represents an ordered list,
  and the <code data-x="attr-lang">lang</code> attribute represents the language of the content.</p>

  <p>These definitions allow HTML processors, such as web browsers or search engines, to present and
  use documents and applications in a wide variety of contexts that the author might not have
  considered.</p>

  <div class="example">

   <p>As a simple example, consider a web page written by an author who only considered desktop
   computer web browsers:</p>

   <pre><code class="html">&lt;!DOCTYPE HTML>
&lt;html lang="en">
 &lt;head>
  &lt;title>My Page&lt;/title>
 &lt;/head>
 &lt;body>
  &lt;h1>Welcome to my page&lt;/h1>
  &lt;p>I like cars and lorries and have a big Jeep!&lt;/p>
  &lt;h2>Where I live&lt;/h2>
  &lt;p>I live in a small hut on a mountain!&lt;/p>
 &lt;/body>
&lt;/html></code></pre>

   <p>Because HTML conveys <em>meaning</em>, rather than presentation, the same
   page can also be used by a small browser on a mobile phone, without any change to the page.
   Instead of headings being in large letters as on the desktop, for example, the browser on the
   mobile phone might use the same size text for the whole page, but with the headings in bold.</p>

   <p>But it goes further than just differences in screen size: the same page could equally be used
   by a blind user using a browser based around speech synthesis, which instead of displaying the
   page on a screen, reads the page to the user, e.g. using headphones. Instead of large text for
   the headings, the speech browser might use a different volume or a slower voice.</p>

   <p>That's not all, either. Since the browsers know which parts of the page are the headings, they
   can create a document outline that the user can use to quickly navigate around the document,
   using keys for "jump to next heading" or "jump to previous heading". Such features are especially
   common with speech browsers, where users would otherwise find quickly navigating a page quite
   difficult.</p>

   <p>Even beyond browsers, software can make use of this information. Search engines can use the
   headings to more effectively index a page, or to provide quick links to subsections of the page
   from their results. Tools can use the headings to create a table of contents (that is in fact how
   this very specification's table of contents is generated).</p>

   <p>This example has focused on headings, but the same principle applies to all of the semantics
   in HTML.</p>

  </div>

  <p>Authors must not use elements, attributes, or attribute values for purposes other than their
  appropriate intended semantic purpose, as doing so prevents software from correctly processing the
  page.</p>

  <div class="example">

   <p>For example, the following snippet, intended to represent the heading of a
   corporate site, is non-conforming because the second line is not intended to
   be a heading of a subsection, but merely a subheading or subtitle (a
   subordinate heading for the same section).</p>

   <pre class="bad"><code class="html">&lt;body&gt;
 &lt;h1&gt;ACME Corporation&lt;/h1&gt;
 &lt;h2&gt;The leaders in arbitrary fast delivery since 1920&lt;/h2&gt;
 ...</code></pre>

   <p>The <code>hgroup</code> element can be used for these kinds of situations:</p>

   <pre><code class="html">&lt;body&gt;
 &lt;hgroup&gt;
  &lt;h1&gt;ACME Corporation&lt;/h1&gt;
  &lt;p&gt;The leaders in arbitrary fast delivery since 1920&lt;/p&gt;
 &lt;/hgroup&gt;
 ...</code></pre>

  </div>

  <div class="example">

   <p>The document in this next example is similarly non-conforming, despite
   being syntactically correct, because the data placed in the cells is clearly
   not tabular data, and the <code>cite</code> element mis-used:</p>

   <pre class="bad" lang="en-GB"><code class="html">&lt;!DOCTYPE HTML&gt;
&lt;html lang="en-GB"&gt;
 &lt;head&gt; &lt;title&gt; Demonstration &lt;/title&gt; &lt;/head&gt;
 &lt;body&gt;
  &lt;table&gt;
   &lt;tr&gt; &lt;td&gt; <!--en-GB-->My favourite animal is the cat. &lt;/td&gt; &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &mdash;&lt;a href="https://example.org/~ernest/"&gt;&lt;cite&gt;Ernest&lt;/cite&gt;&lt;/a&gt;,
     in an essay from 1992
    &lt;/td&gt;
   &lt;/tr&gt;
  &lt;/table&gt;
 &lt;/body&gt;
&lt;/html&gt;</code></pre>

   <p>This would make software that relies on these semantics fail: for example,
   a speech browser that allowed a blind user to navigate tables in the document
   would report the quote above as a table, confusing the user; similarly, a
   tool that extracted titles of works from pages would extract "Ernest" as the
   title of a work, even though it's actually a person's name, not a title.</p>

   <p>A corrected version of this document might be:</p>

   <pre lang="en-GB"><code class="html">&lt;!DOCTYPE HTML&gt;
&lt;html lang="en-GB"&gt;
 &lt;head&gt; &lt;title&gt; Demonstration &lt;/title&gt; &lt;/head&gt;
 &lt;body&gt;
  &lt;blockquote&gt;
   &lt;p&gt; <!--en-GB-->My favourite animal is the cat. &lt;/p&gt;
  &lt;/blockquote&gt;
  &lt;p&gt;
   &mdash;&lt;a href="https://example.org/~ernest/"&gt;Ernest&lt;/a&gt;,
   in an essay from 1992
  &lt;/p&gt;
 &lt;/body&gt;
&lt;/html&gt;</code></pre>

  </div>

  <p>Authors must not use elements, attributes, or attribute values that are not permitted by this
  specification or <span>other applicable specifications</span>, as doing so makes it significantly
  harder for the language to be extended in the future.</p>

  <div class="example">

   <p>In the next example, there is a non-conforming attribute value ("carpet") and a non-conforming
   attribute ("texture"), which is not permitted by this specification:</p>

   <pre class="bad"><code class="html">&lt;label&gt;Carpet: &lt;input type="carpet" name="c" texture="deep pile"&gt;&lt;/label&gt;</code></pre>

   <p>Here would be an alternative and correct way to mark this up:</p>

   <pre><code class="html">&lt;label&gt;Carpet: &lt;input type="text" class="carpet" name="c" data-texture="deep pile"&gt;&lt;/label&gt;</code></pre>

  </div>

  <p id="no-browsing-context">DOM nodes whose <span>node document</span>'s <span
  data-x="concept-document-bc">browsing context</span> is null are exempt from all document
  conformance requirements other than the <a href="#writing">HTML syntax</a> requirements and <a
  href="#writing-xhtml-documents">XML syntax</a> requirements.</p>

  <div class="example">
   <p>In particular, the <code>template</code> element's <span>template contents</span>'s <span>node
   document</span>'s <span data-x="concept-document-bc">browsing context</span> is null. For
   example, the <span data-x="concept-element-content-model">content model</span> requirements and
   attribute value microsyntax requirements do not apply to a <code>template</code> element's
   <span>template contents</span>. In this example an <code>img</code> element has attribute values
   that are placeholders that would be invalid outside a <code>template</code> element.</p>

   <pre><code class="html">&lt;template>
 &lt;article>
  &lt;img <mark>src="{{src}}" alt="{{alt}}"</mark>>
  &lt;h1>&lt;/h1>
 &lt;/article>
&lt;/template></code></pre>

   <p>However, if the above markup were to omit the <code data-x="">&lt;/h1></code> end tag, that
   would be a violation of the <a href="#writing">HTML syntax</a>, and would thus be flagged as an
   error by conformance checkers.</p>
  </div>

  <p>Through scripting and using other mechanisms, the values of attributes, text, and indeed the
  entire structure of the document may change dynamically while a user agent is processing it. The
  semantics of a document at an instant in time are those represented by the state of the document
  at that instant in time, and the semantics of a document can therefore change over time. User
  agents <span w-nodev>must</span> update their presentation of the document as this
  occurs.</p>

  <p class="example">HTML has a <code>progress</code> element that describes a progress bar. If its
  "value" attribute is dynamically updated by a script, the UA would update the rendering to show
  the progress changing.</p>



  <h4>Elements in the DOM</h4>

  <p>The nodes representing <span>HTML elements</span> in the DOM <span w-nodev>must</span>
  implement, and expose to scripts, the interfaces listed for them in the relevant sections of this
  specification. This includes <span>HTML elements</span> in <span>XML documents</span>, even when
  those documents are in another context (e.g. inside an XSLT transform).</p>

  <p>Elements in the DOM <dfn data-x="represents">represent</dfn> things; that is, they have
  intrinsic <em>meaning</em>, also known as semantics.</p>

  <p class="example">For example, an <code>ol</code> element represents an ordered list.</p>

  <p>Elements can be <dfn data-x="referenced">referenced</dfn> (referred to) in some way, either
  explicitly or implicitly. One way that an element in the DOM can be explicitly referenced is by
  giving an <code data-x="attr-id">id</code> attribute to the element, and then creating a
  <span>hyperlink</span> with that <code data-x="attr-id">id</code> attribute's value as the <span
  data-x="navigate-fragid">fragment</span> for the <span>hyperlink</span>'s <code
  data-x="attr-hyperlink-href">href</code> attribute value. Hyperlinks are not necessary for a
  reference, however; any manner of referring to the element in question will suffice.</p>

  <div class="example">
   <p>Consider the following <code>figure</code> element, which is given an <code
   data-x="attr-id">id</code> attribute:</p>

   <pre><code class="html">&lt;figure id="module-script-graph">
  &lt;img src="module-script-graph.svg"
       alt="Module A depends on module B, which depends
            on modules C and D.">
  &lt;figcaption>Figure 27: a simple module graph&lt;/figcaption>
&lt;/figure></code></pre>

   <p>A <span>hyperlink</span>-based <span data-x="referenced">reference</span> could be created
   using the <code>a</code> element, like so:</p>

   <pre><code class="html">As we can see in &lt;a href="#module-script-graph">figure 27&lt;/a>, ...</code></pre>

   <p>However, there are many other ways of <span data-x="referenced">referencing</span> the
   <code>figure</code> element, such as:</p>

   <ul>
    <li><p>"As depicted in the figure of modules A, B, C, and D..."</p></li>

    <li><p>"In Figure 27..." (without a hyperlink)</p></li>

    <li><p>"From the contents of the 'simple module graph' figure..."</p></li>

    <li><p>"In the figure below..." (but <a href="#figure-note-about-references">this is
    discouraged</a>)</p></li>
   </ul>
  </div>

  <p>The basic interface, from which all the <span>HTML elements</span>' interfaces inherit, <span
  w-nodev>and which must be used by elements that have no additional requirements,</span> is
  the <code>HTMLElement</code> interface.</p>

  <pre><code class="idl">[Exposed=Window]
interface <dfn interface>HTMLElement</dfn> : <span>Element</span> {
  [<span>HTMLConstructor</span>] constructor();

  // metadata attributes
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-title">title</span>;
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-lang">lang</span>;
  [<span>CEReactions</span>] attribute boolean <span data-x="dom-translate">translate</span>;
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-dir">dir</span>;

  // <span>user interaction</span>
  [<span>CEReactions</span>] attribute (boolean or unrestricted double or DOMString)? <span data-x="dom-hidden">hidden</span>;
  [<span>CEReactions</span>] attribute boolean <span data-x="dom-inert">inert</span>;
  undefined <span data-x="dom-click">click</span>();
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-accessKey">accessKey</span>;
  readonly attribute DOMString <span data-x="dom-accessKeyLabel">accessKeyLabel</span>;
  [<span>CEReactions</span>] attribute boolean <span data-x="dom-draggable">draggable</span>;
  [<span>CEReactions</span>] attribute boolean <span data-x="dom-spellcheck">spellcheck</span>;
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-autocapitalize">autocapitalize</span>;

  [<span>CEReactions</span>] attribute [<span>LegacyNullToEmptyString</span>] DOMString <span data-x="dom-innerText">innerText</span>;
  [<span>CEReactions</span>] attribute [<span>LegacyNullToEmptyString</span>] DOMString <span data-x="dom-outerText">outerText</span>;

  <span>ElementInternals</span> <span data-x="dom-attachInternals">attachInternals</span>();

  // The popover API
  undefined <span data-x="dom-showPopover">showPopover</span>();
  undefined <span data-x="dom-hidePopover">hidePopover</span>();
  undefined <span data-x="dom-togglePopover">togglePopover</span>(optional boolean force);
  [<span>CEReactions</span>] attribute DOMString? <span data-x="dom-popover">popover</span>;
};

<span>HTMLElement</span> includes <span>GlobalEventHandlers</span>;
<span>HTMLElement</span> includes <span>ElementContentEditable</span>;
<span>HTMLElement</span> includes <span>HTMLOrSVGElement</span>;

[Exposed=Window]
interface <dfn interface>HTMLUnknownElement</dfn> : <span>HTMLElement</span> {
  // Note: <a href="#customized-built-in-element-restrictions">intentionally</a> no [<span>HTMLConstructor</span>]
};</code></pre>

  <p>The <code>HTMLElement</code> interface holds methods and attributes related to a number of
  disparate features, and the members of this interface are therefore described in various different
  sections of this specification.</p>

  <div w-nodev>

  <hr>

  <p>The <span>element interface</span> for an element with name <var>name</var> in the
  <span>HTML namespace</span> is determined as follows:</p>

  <ol>
   <li><p>If <var>name</var> is <code>applet</code>, <code>bgsound</code>, <code>blink</code>,
   <code>isindex</code>, <code>keygen</code>, <code>multicol</code>, <code>nextid</code>, or
   <code>spacer</code>, then return <code>HTMLUnknownElement</code>.</p></li>

   <li><p>If <var>name</var> is <code>acronym</code>, <code>basefont</code>, <code>big</code>,
   <code>center</code>, <code>nobr</code>, <code>noembed</code>, <code>noframes</code>,
   <code>plaintext</code>, <code>rb</code>, <code>rtc</code>, <code>strike</code>, or
   <code>tt</code>, then return <code>HTMLElement</code>.</p></li>

   <li><p>If <var>name</var> is <code>listing</code> or <code>xmp</code>, then return
   <code>HTMLPreElement</code>.</p></li>

   <li><p>Otherwise, if this specification defines an interface appropriate for the <span>element
   type</span> corresponding to the local name <var>name</var>, then return that interface.</p></li>

   <li><p>If <span>other applicable specifications</span> define an appropriate interface for
   <var>name</var>, then return the interface they define.</p></li>

   <li><p>If <var>name</var> is a <span>valid custom element name</span>, then return
   <code>HTMLElement</code>.</p>

   <li><p>Return <code>HTMLUnknownElement</code>.</p></li>
  </ol>

  <p class="note">The use of <code>HTMLElement</code> instead of <code>HTMLUnknownElement</code> in
  the case of <span data-x="valid custom element name">valid custom element names</span> is done to
  ensure that any potential future <span data-x="custom-element-upgrades">upgrades</span> only cause
  a linear transition of the element's prototype chain, from <code>HTMLElement</code> to a subclass,
  instead of a lateral one, from <code>HTMLUnknownElement</code> to an unrelated subclass.</p>

  <p>Features shared between HTML and SVG elements use the <code>HTMLOrSVGElement</code> interface
  mixin: <ref spec=SVG></p>

  <pre><code class="idl">interface mixin <dfn interface>HTMLOrSVGElement</dfn> {
  [SameObject] readonly attribute <span>DOMStringMap</span> <span data-x="dom-dataset">dataset</span>;
  attribute DOMString <span data-x="dom-HTMLOrSVGElement-nonce">nonce</span>; // <a href="#nonce-does-not-update-dom">intentionally no [CEReactions]</a>

  [<span>CEReactions</span>] attribute boolean <span data-x="dom-fe-autofocus">autofocus</span>;
  [<span>CEReactions</span>] attribute long <span data-x="dom-tabindex">tabIndex</span>;
  undefined <span data-x="dom-focus">focus</span>(optional <span>FocusOptions</span> options = {});
  undefined <span data-x="dom-blur">blur</span>();
};</code></pre>

  </div>

  <div class="example">
   <p>An example of an element that is neither an HTML nor SVG element is one created as
   follows:</p>

   <pre><code class="html">const el = document.createElementNS("some namespace", "example");
console.assert(el.constructor === Element);</code></pre>
  </div>

  <div w-nodev>

  <h4 id="html-element-constructors">HTML element constructors</h4>

  <p>To support the <a href="#custom-elements">custom elements</a> feature, all HTML elements have
  special constructor behavior. This is indicated via the <dfn extended-attribute
  data-lt="HTMLConstructor" data-x="HTMLConstructor"><code>[HTMLConstructor]</code></dfn> IDL
  <span>extended attribute</span>.  It indicates that the interface object for the given interface
  will have a specific behavior when called, as defined in detail below.</p>

  <p>The <code data-x="HTMLConstructor">[HTMLConstructor]</code> extended attribute must take no
  arguments, and must only appear on <span data-x="constructor operation">constructor
  operations</span>. It must appear only once on a constructor operation, and the interface must
  contain only the single, annotated constructor operation, and no others. The annotated
  constructor operation must be declared to take no arguments.</p>

  <p>Interfaces declared with constructor operations that are annotated with the <code
  data-x="HTMLConstructor">[HTMLConstructor]</code> extended attribute have the following
  <span>overridden constructor steps</span>:</p>

  <ol>
   <li><p>Let <var>registry</var> be the <span>current global object</span>'s
   <code>CustomElementRegistry</code> object.</p></li>

   <li>
    <p>If <span>NewTarget</span> is equal to the <span>active function
    object</span>, then throw a <code>TypeError</code>.</p>

    <div class="example">
     <p>This can occur when a custom element is defined using an <span>element interface</span> as
     its constructor:</p>

     <pre><code class="js">customElements.define("bad-1", HTMLButtonElement);
new HTMLButtonElement();          // (1)
document.createElement("bad-1");  // (2)</code></pre>

     <p>In this case, during the execution of <code>HTMLButtonElement</code> (either explicitly, as
     in (1), or implicitly, as in (2)), both the <span>active function object</span> and
     <span>NewTarget</span> are <code>HTMLButtonElement</code>. If this check was not present, it
     would be possible to create an instance of <code>HTMLButtonElement</code> whose local name was
     <code data-x="">bad-1</code>.</p>
    </div>
   </li>

   <li>
    <p>Let <var>definition</var> be the entry in <var>registry</var> with <span
    data-x="concept-custom-element-definition-constructor">constructor</span> equal to
    <span>NewTarget</span>. If there is no such definition, then throw a <code>TypeError</code>.</p>

    <p class="note">Since there can be no entry in <var>registry</var> with a <span
    data-x="concept-custom-element-definition-constructor">constructor</span> of undefined, this
    step also prevents HTML element constructors from being called as functions (since in that case
    <span>NewTarget</span> will be undefined).</p>
   </li>

   <li><p>Let <var>is value</var> be null.</p></li>

   <li>
    <p>If <var>definition</var>'s <span data-x="concept-custom-element-definition-local-name">local
    name</span> is equal to <var>definition</var>'s <span
    data-x="concept-custom-element-definition-name">name</span> (i.e., <var>definition</var> is for
    an <span>autonomous custom element</span>), then:</p>

    <ol>
     <li>
      <p>If the <span>active function object</span> is not <code>HTMLElement</code>, then throw a
      <code>TypeError</code>.</p>

      <div class="example">
       <p>This can occur when a custom element is defined to not extend any local names, but
       inherits from a non-<code>HTMLElement</code> class:</p>

       <pre><code class="js">customElements.define("bad-2", class Bad2 extends HTMLParagraphElement {});</code></pre>

       <p>In this case, during the (implicit) <code data-x="">super()</code> call that occurs when
       constructing an instance of <code data-x="">Bad2</code>, the <span>active function
       object</span> is <code>HTMLParagraphElement</code>, not <code>HTMLElement</code>.</p>
      </div>
     </li>
    </ol>
   </li>

   <li>
    <p>Otherwise (i.e., if <var>definition</var> is for a <span>customized built-in
    element</span>):</p>

    <ol>
     <li><p>Let <var>valid local names</var> be the list of local names for elements defined in this
     specification or in <span>other applicable specifications</span> that use the <span>active
     function object</span> as their <span>element interface</span>.</p></li>

     <li>
      <p>If <var>valid local names</var> does not contain <var>definition</var>'s <span
      data-x="concept-custom-element-definition-local-name">local name</span>, then throw a
      <code>TypeError</code>.</p>

      <div class="example">
       <p>This can occur when a custom element is defined to extend a given local name but inherits
       from the wrong class:</p>

       <pre><code class="js">customElements.define("bad-3", class Bad3 extends HTMLQuoteElement {}, { extends: "p" });</code></pre>

       <p>In this case, during the (implicit) <code data-x="">super()</code> call that occurs when
       constructing an instance of <code data-x="">Bad3</code>, <var>valid local names</var> is the
       list containing <code>q</code> and <code>blockquote</code>, but <var>definition</var>'s <span
       data-x="concept-custom-element-definition-local-name">local name</span> is <code>p</code>,
       which is not in that list.</p>
      </div>
     </li>

     <li><p>Set <var>is value</var> to <var>definition</var>'s <span
     data-x="concept-custom-element-definition-name">name</span>.</p></li>
    </ol>
   </li>

   <li>
    <p>If <var>definition</var>'s <span
    data-x="concept-custom-element-definition-construction-stack">construction stack</span> is
    empty, then:</p>

    <ol>
     <li><p>Let <var>element</var> be the result of <span data-x="internally create a new object
     implementing the interface">internally creating a new object implementing the interface</span>
     to which the <span>active function object</span> corresponds, given the <span>current
     realm</span> and <span>NewTarget</span>.</p></li>

     <li><p>Set <var>element</var>'s <span>node document</span> to the <span>current global
     object</span>'s <span data-x="concept-document-window">associated
     <code>Document</code></span>.</p></li>

     <li><p>Set <var>element</var>'s <span data-x="concept-element-namespace">namespace</span> to
     the <span>HTML namespace</span>.</p></li>

     <li><p>Set <var>element</var>'s <span data-x="concept-element-namespace-prefix">namespace
     prefix</span> to null.</p></li>

     <li><p>Set <var>element</var>'s <span data-x="concept-element-local-name">local name</span> to
     <var>definition</var>'s <span data-x="concept-custom-element-definition-local-name">local
     name</span>.</p></li>

     <li><p>Set <var>element</var>'s <span>custom element state</span> to "<code
     data-x="">custom</code>".</p></li>

     <li><p>Set <var>element</var>'s <span data-x="concept-element-custom-element-definition">custom
     element definition</span> to <var>definition</var>.</p></li>

     <li><p>Set <var>element</var>'s <span data-x="concept-element-is-value"><code
     data-x="">is</code> value</span> to <var>is value</var>.</p></li>

     <li><p>Return <var>element</var>.</p></li>
    </ol>

    <p class="note">This occurs when author script constructs a new custom element directly, e.g.
    via <code data-x="">new MyCustomElement()</code>.</p>
   </li>

   <li><p>Let <var>prototype</var> be ? <span data-x="js-Get">Get</span>(<span>NewTarget</span>,
   "prototype").</p></li>

   <li>
    <p>If <span data-x="js-Type">Type</span>(<var>prototype</var>) is not Object, then:</p>

    <ol>
     <li><p>Let <var>realm</var> be ? <span>GetFunctionRealm</span>(<span>NewTarget</span>).</p></li>

     <li><p>Set <var>prototype</var> to the <span>interface prototype object</span> of
     <var>realm</var> whose interface is the same as the interface of the <span>active function
     object</span>.</p></li>
    </ol>

    <p class="note">The realm of the <span>active function object</span> might not be
    <var>realm</var>, so we are using the more general concept of "the same interface" across
    realms; we are not looking for equality of <span data-x="interface object">interface
    objects</span>. This fallback behavior, including using the realm of <span>NewTarget</span> and
    looking up the appropriate prototype there, is designed to match analogous behavior for the
    JavaScript built-ins and Web IDL's <span>internally create a new object implementing the
    interface</span> algorithm.</p>
   </li>

   <li><p>Let <var>element</var> be the last entry in <var>definition</var>'s <span
   data-x="concept-custom-element-definition-construction-stack">construction stack</span>.</li>

   <li>
    <p>If <var>element</var> is an <span data-x="concept-already-constructed-marker"><i>already
    constructed</i> marker</span>, then throw an <span>"<code>InvalidStateError</code>"</span>
    <code>DOMException</code>.</p>

    <div class="example">
     <p>This can occur when the author code inside the <span>custom element
     constructor</span> <a href="#custom-element-conformance">non-conformantly</a> creates another
     instance of the class being constructed, before calling <code
     data-x="">super()</code>:</p>

     <pre><code class="js">let doSillyThing = true;

class DontDoThis extends HTMLElement {
  constructor() {
    if (doSillyThing) {
      doSillyThing = false;
      new DontDoThis();
      // Now the construction stack will contain an <i>already constructed</i> marker.
    }

    // This will then fail with an "InvalidStateError" DOMException:
    super();
  }
}</code></pre>
    </div>

    <div class="example">
     <p>This can also occur when author code inside the <span>custom element constructor</span> <a
     href="#custom-element-conformance">non-conformantly</a> calls <code data-x="">super()</code>
     twice, since per the JavaScript specification, this actually executes the superclass
     constructor (i.e. this algorithm) twice, before throwing an error:

     <pre><code class="js">class DontDoThisEither extends HTMLElement {
  constructor() {
    super();

    // This will throw, but not until it has already called into the HTMLElement constructor
    super();
  }
}</code></pre>
    </div>
   </li>

   <li><p>Perform ? <var>element</var>.[[SetPrototypeOf]](<var>prototype</var>).</p></li>

   <li><p>Replace the last entry in <var>definition</var>'s <span
   data-x="concept-custom-element-definition-construction-stack">construction stack</span> with an
   <span data-x="concept-already-constructed-marker"><i>already constructed</i>
   marker</span>.</p></li>

   <li>
    <p>Return <var>element</var>.</p>

    <p class="note">This step is normally reached when <span
    data-x="custom-element-upgrades">upgrading</span> a custom element; the existing element is
    returned, so that the <code data-x="">super()</code> call inside the <span>custom element
    constructor</span> assigns that existing element to <b>this</b>.</p>
   </li>
  </ol>

  <hr>

  <p>In addition to the constructor behavior implied by <code
  data-x="HTMLConstructor">[HTMLConstructor]</code>, some elements also have <span data-x="named
  constructor">named constructors</span> (which are really factory functions with a modified <code
  data-x="">prototype</code> property).

  <div class="example">
   <p>Named constructors for HTML elements can also be used in an <code data-x="">extends</code>
   clause when defining a <span>custom element constructor</span>:</p>

   <pre><code class="js">class AutoEmbiggenedImage extends Image {
  constructor(width, height) {
    super(width * 10, height * 10);
  }
}

customElements.define("auto-embiggened", AutoEmbiggenedImage, { extends: "img" });

const image = new AutoEmbiggenedImage(15, 20);
console.assert(image.width === 150);
console.assert(image.height === 200);</code></pre>
  </div>

  </div>



  <h4>Element definitions</h4>

  <p>Each element in this specification has a definition that includes the following
  information:</p>

  <dl>
   <dt><dfn data-x="concept-element-categories">Categories</dfn></dt>

   <dd><p>A list of <span data-x="content categories">categories</span> to which the element belongs.
   These are used when defining the <span>content models</span> for each element.</p></dd>


   <dt><dfn data-x="concept-element-contexts">Contexts in which this element can be used</dfn></dt>

   <dd>
    <p>A <em>non-normative</em> description of where the element can be used. This information is
    redundant with the content models of elements that allow this one as a child, and is provided
    only as a convenience.</p>

    <div class="note">
     <p>For simplicity, only the most specific expectations are listed.</p>

     <p>For example, all <span>phrasing content</span> is <span>flow content</span>. Thus, elements
     that are <span>phrasing content</span> will only be listed as "where <span>phrasing
     content</span> is expected", since this is the more-specific expectation. Anywhere that expects
     <span>flow content</span> also expects <span>phrasing content</span>, and thus also meets this
     expectation.</p>
    </div>
   </dd>


   <dt><dfn data-x="concept-element-content-model">Content model</dfn></dt>

   <dd><p>A normative description of what content must be included as children and descendants of
   the element.</p></dd>


   <dt><dfn data-x="concept-element-tag-omission">Tag omission in text/html</dfn></dt>

   <dd><p>A <em>non-normative</em> description of whether, in the <code>text/html</code> syntax, the
   <span data-x="syntax-start-tag">start</span> and <span data-x="syntax-end-tag">end</span> tags can
   be omitted. This information is redundant with the normative requirements given in the <span
   data-x="syntax-tag-omission">optional tags</span> section, and is provided in the element
   definitions only as a convenience.</p></dd>


   <dt><dfn data-x="concept-element-attributes">Content attributes</dfn></dt>

   <dd><p>A normative list of attributes that may be specified on the element (except where
   otherwise disallowed), along with non-normative descriptions of those attributes. (The content to
   the left of the dash is normative, the content to the right of the dash is not.)</p></dd>


   <dt><dfn
   data-x="concept-element-accessibility-considerations">Accessibility considerations</dfn></dt>

   <dd>
    <p>For authors: Conformance requirements for use of <cite>ARIA</cite> <code
    data-x="attr-aria-role">role</code> and <code data-x="attr-aria-*">aria-*</code> attributes
    are defined in <cite>ARIA in HTML</cite>. <ref spec=ARIA> <ref spec=ARIAHTML></p>

    <p>For implementers: User agent requirements for implementing accessibility API semantics
    are defined in <cite>HTML Accessibility API Mappings</cite>. <ref spec=HTMLAAM></p>
   </dd>


   <dt><dfn data-x="concept-element-dom">DOM interface</dfn></dt>

   <dd><p>A normative definition of a DOM interface that such elements must implement.</p></dd>
  </dl>

  <p>This is then followed by a description of what the element <span>represents</span>, along with
  any additional normative conformance criteria that may apply to authors<span data-x=""
  w-nodev> and implementations</span>. Examples are sometimes also included.</p>


  <h5>Attributes</h5>

  <p id="attribute-text">An attribute value is a string. Except where otherwise specified,
  attribute values on <span>HTML elements</span> may be any string value, including the empty
  string, and there is no restriction on what text can be specified in such attribute values.</p>



  <h4><dfn>Content models</dfn></h4>

  <p>Each element defined in this specification has a content model: a description of the element's
  expected <span data-x="concept-html-contents">contents</span>. An <span data-x="HTML elements">HTML
  element</span> must have contents that match the requirements described in the element's content
  model. The <dfn data-x="concept-html-contents">contents</dfn> of an element are its children in the
  DOM.</p>

  <p><span>ASCII whitespace</span> is always allowed between elements. User agents represent these
  characters between elements in the source markup as <code>Text</code> nodes in the DOM.<!-- not a
  conf criteria since the parser now requires this --> Empty <code>Text</code> nodes and
  <code>Text</code> nodes consisting of just sequences of those characters are considered
  <dfn>inter-element whitespace</dfn>.</p>

  <p><span>Inter-element whitespace</span>, comment nodes, and processing instruction nodes must be
  ignored when establishing whether an element's contents match the element's content model or not,
  and must be ignored when following algorithms that define document and element semantics.</p>

  <p class="note">Thus, an element <var>A</var> is said to be <i>preceded or followed</i>
  by a second element <var>B</var> if <var>A</var> and <var>B</var> have
  the same parent node and there are no other element nodes or <code>Text</code> nodes (other than
  <span>inter-element whitespace</span>) between them. Similarly, a node is the <i>only child</i> of
  an element if that element contains no other nodes other than <span>inter-element
  whitespace</span>, comment nodes, and processing instruction nodes.</p>

  <p>Authors must not use <span>HTML elements</span> anywhere except where they are explicitly
  allowed, as defined for each element, or as explicitly required by other specifications. For XML
  compound documents, these contexts could be inside elements from other namespaces, if those
  elements are defined as providing the relevant contexts.</p>

  <p class="example"><cite>The Atom Syndication Format</cite> defines a <code
  data-x="">content</code> element. When its <code data-x="">type</code> attribute has the value
  <code data-x="">xhtml</code>, <cite>The Atom Syndication Format</cite> requires that it contain a
  single HTML <code>div</code> element. Thus, a <code>div</code> element is allowed in that context,
  even though this is not explicitly normatively stated by this specification. <ref spec=ATOM></p>

  <p>In addition, <span>HTML elements</span> may be orphan nodes (i.e. without a parent node).</p>

  <div class="example">

   <p>For example, creating a <code>td</code> element and storing it in a global variable in a
   script is conforming, even though <code>td</code> elements are otherwise only supposed to be used
   inside <code>tr</code> elements.</p>

   <pre><code class="js">var data = {
  name: "Banana",
  cell: document.createElement('td'),
};</code></pre>

  </div>


  <h5>The "nothing" content model</h5>

  <p>When an element's content model is <dfn data-x="concept-content-nothing">nothing</dfn>, the
  element must contain no <code>Text</code> nodes (other than <span>inter-element whitespace</span>)
  and no element nodes.</p>

  <p class="note">Most HTML elements whose content model is "nothing" are also, for convenience,
  <span>void elements</span> (elements that have no <span data-x="syntax-end-tag">end tag</span> in
  the <a href="#syntax">HTML syntax</a>). However, these are entirely separate concepts.</p>


  <h5>Kinds of content</h5>

  <p>Each element in HTML falls into zero or more <dfn data-x="content categories">categories</dfn>
  that group elements with similar characteristics together. The following broad categories are used
  in this specification:</p>

  <ul class="brief">
   <li><span>Metadata content</span></li>
   <li><span>Flow content</span></li>
   <li><span>Sectioning content</span></li>
   <li><span>Heading content</span></li>
   <li><span>Phrasing content</span></li>
   <li><span>Embedded content</span></li>
   <li><span>Interactive content</span></li>
  </ul>

  <p class="note">Some elements also fall into other categories, which are defined in other parts of
  this specification.</p>

  <p>These categories are related as follows:</p>

  <p><iframe width="1000" height="288" src="/images/content-venn.svg"></iframe></p>

  <p>Sectioning content, heading content, phrasing content, embedded content, and interactive
  content are all types of flow content. Metadata is sometimes flow content. Metadata and
  interactive content are sometimes phrasing content. Embedded content is also a type of phrasing
  content, and sometimes is interactive content.</p>

  <p>Other categories are also used for specific purposes, e.g. form controls are specified using a
  number of categories to define common requirements. Some elements have unique requirements and do
  not fit into any particular category.</p>


  <h6>Metadata content</h6>

  <p><dfn export>Metadata content</dfn> is content that sets up the presentation or behavior of the
  rest of the content, or that sets up the relationship of the document with other documents, or
  that conveys other "out of band" information.</p>

  <!-- when updating this also update the category index -->
  <ul class="brief category-list">
   <li><code>base</code></li>
   <li><code>link</code></li>
   <li><code>meta</code></li>
   <li><code>noscript</code></li>
   <li><code>script</code></li>
   <li><code>style</code></li>
   <li><code>template</code></li>
   <li><code>title</code></li>
  </ul>

  <p>Elements from other namespaces whose semantics are primarily metadata-related (e.g. RDF) are
  also <span>metadata content</span>.</p>

  <div class="example">

   <p>Thus, in the XML serialization, one can use RDF, like this:</p>

   <pre><code class="html">&lt;html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:r="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xml:lang="en">
 &lt;head>
  &lt;title>Hedral's Home Page&lt;/title>
  &lt;r:RDF>
   &lt;Person xmlns="http://www.w3.org/2000/10/swap/pim/contact#"
           r:about="https://hedral.example.com/#">
    &lt;fullName>Cat Hedral&lt;/fullName>
    &lt;mailbox r:resource="mailto:hedral@damowmow.com"/>
    &lt;personalTitle>Sir&lt;/personalTitle>
   &lt;/Person>
  &lt;/r:RDF>
 &lt;/head>
 &lt;body>
  &lt;h1>My home page&lt;/h1>
  &lt;p>I like playing with string, I guess. Sister says squirrels are fun
  too so sometimes I follow her to play with them.&lt;/p>
 &lt;/body>
&lt;/html></code></pre>

   <p>This isn't possible in the HTML serialization, however.</p>

  </div>


  <h6>Flow content</h6>

  <p>Most elements that are used in the body of documents and applications are categorized as
  <dfn export>flow content</dfn>.</p>

  <!-- when updating this also update the category index -->
  <ul class="brief category-list">
   <li><code>a</code></li>
   <li><code>abbr</code></li>
   <li><code>address</code></li>
   <li><code>area</code> (if it is a descendant of a <code>map</code> element)</li>
   <li><code>article</code></li>
   <li><code>aside</code></li>
   <li><code>audio</code></li>
   <li><code>b</code></li>
   <li><code>bdi</code></li>
   <li><code>bdo</code></li>
   <li><code>blockquote</code></li>
   <li><code>br</code></li>
   <li><code>button</code></li>
   <li><code>canvas</code></li>
   <li><code>cite</code></li>
   <li><code>code</code></li>
   <li><code>data</code></li>
   <li><code>datalist</code></li>
   <li><code>del</code></li>
   <li><code>details</code></li>
   <li><code>dfn</code></li>
   <li><code>dialog</code></li>
   <li><code>div</code></li>
   <li><code>dl</code></li>
   <li><code>em</code></li>
   <li><code>embed</code></li>
   <li><code>fieldset</code></li>
   <li><code>figure</code></li>
   <li><code>footer</code></li>
   <li><code>form</code></li>
   <li><code>h1</code></li>
   <li><code>h2</code></li>
   <li><code>h3</code></li>
   <li><code>h4</code></li>
   <li><code>h5</code></li>
   <li><code>h6</code></li>
   <li><code>header</code></li>
   <li><code>hgroup</code></li>
   <li><code>hr</code></li>
   <li><code>i</code></li>
   <li><code>iframe</code></li>
   <li><code>img</code></li>
   <li><code>input</code></li>
   <li><code>ins</code></li>
   <li><code>kbd</code></li>
   <li><code>label</code></li>
   <li><code>link</code> (if it is <span>allowed in the body</span>)</li>
   <li><code>main</code> (if it is a <span>hierarchically correct <code>main</code> element</span>)</li>
   <li><code>map</code></li>
   <li><code>mark</code></li>
   <li><span>MathML <code>math</code></span></li>
   <li><code>menu</code></li>
   <li><code>meta</code> (if the <code data-x="attr-itemprop">itemprop</code> attribute is present)</li>
   <li><code>meter</code></li>
   <li><code>nav</code></li>
   <li><code>noscript</code></li>
   <li><code>object</code></li>
   <li><code>ol</code></li>
   <li><code>output</code></li>
   <li><code>p</code></li>
   <li><code>picture</code></li>
   <li><code>pre</code></li>
   <li><code>progress</code></li>
   <li><code>q</code></li>
   <li><code>ruby</code></li>
   <li><code>s</code></li>
   <li><code>samp</code></li>
   <li><code>script</code></li>
   <li><code>search</code></li>
   <li><code>section</code></li>
   <li><code>select</code></li>
   <li><code>slot</code></li>
   <li><code>small</code></li>
   <li><code>span</code></li>
   <li><code>strong</code></li>
   <li><code>sub</code></li>
   <li><code>sup</code></li>
   <li><span>SVG <code>svg</code></span></li>
   <li><code>table</code></li>
   <li><code>template</code></li>
   <li><code>textarea</code></li>
   <li><code>time</code></li>
   <li><code>u</code></li>
   <li><code>ul</code></li>
   <li><code>var</code></li>
   <li><code>video</code></li>
   <li><code>wbr</code></li>
   <li><span data-x="autonomous custom element">autonomous custom elements</span></li>
   <li><span data-x="text content">text</span></li>
  </ul>


  <h6>Sectioning content</h6>

  <p><dfn export>Sectioning content</dfn> is content that defines the scope of <code>header</code>
  and <code>footer</code> elements.</p>

  <!-- when updating this also update the category index -->
  <ul class="brief category-list">
   <li><code>article</code></li>
   <li><code>aside</code></li>
   <li><code>nav</code></li>
   <li><code>section</code></li>
  </ul>


  <h6>Heading content</h6>

  <p><dfn export>Heading content</dfn> defines the heading of a section (whether explicitly marked
  up using <span>sectioning content</span> elements, or implied by the heading content itself).</p>

  <!-- when updating this also update the category index -->
  <ul class="brief category-list">
   <li><code>h1</code></li>
   <li><code>h2</code></li>
   <li><code>h3</code></li>
   <li><code>h4</code></li>
   <li><code>h5</code></li>
   <li><code>h6</code></li>
   <li><code>hgroup</code> (if it has a descendant <code>h1</code> to <code>h6</code> element)</li>
  </ul>


  <h6>Phrasing content</h6>

  <p><dfn export>Phrasing content</dfn> is the text of the document, as well as elements that mark
  up that text at the intra-paragraph level. Runs of <span>phrasing content</span> form <span
  data-x="paragraph">paragraphs</span>.</p>

  <!-- when updating this also update the category index -->
  <ul class="brief category-list">
   <li><code>a</code></li>
   <li><code>abbr</code></li>
   <li><code>area</code> (if it is a descendant of a <code>map</code> element)</li>
   <li><code>audio</code></li>
   <li><code>b</code></li>
   <li><code>bdi</code></li>
   <li><code>bdo</code></li>
   <li><code>br</code></li>
   <li><code>button</code></li>
   <li><code>canvas</code></li>
   <li><code>cite</code></li>
   <li><code>code</code></li>
   <li><code>data</code></li>
   <li><code>datalist</code></li>
   <li><code>del</code></li>
   <li><code>dfn</code></li>
   <li><code>em</code></li>
   <li><code>embed</code></li>
   <li><code>i</code></li>
   <li><code>iframe</code></li>
   <li><code>img</code></li>
   <li><code>input</code></li>
   <li><code>ins</code></li>
   <li><code>kbd</code></li>
   <li><code>label</code></li>
   <li><code>link</code> (if it is <span>allowed in the body</span>)</li>
   <li><code>map</code></li>
   <li><code>mark</code></li>
   <li><span>MathML <code>math</code></span></li>
   <li><code>meta</code> (if the <code data-x="attr-itemprop">itemprop</code> attribute is present)</li>
   <li><code>meter</code></li>
   <li><code>noscript</code></li>
   <li><code>object</code></li>
   <li><code>output</code></li>
   <li><code>picture</code></li>
   <li><code>progress</code></li>
   <li><code>q</code></li>
   <li><code>ruby</code></li>
   <li><code>s</code></li>
   <li><code>samp</code></li>
   <li><code>script</code></li>
   <li><code>select</code></li>
   <li><code>slot</code></li>
   <li><code>small</code></li>
   <li><code>span</code></li>
   <li><code>strong</code></li>
   <li><code>sub</code></li>
   <li><code>sup</code></li>
   <li><span>SVG <code>svg</code></span></li>
   <li><code>template</code></li>
   <li><code>textarea</code></li>
   <li><code>time</code></li>
   <li><code>u</code></li>
   <li><code>var</code></li>
   <li><code>video</code></li>
   <li><code>wbr</code></li>
   <li><span data-x="autonomous custom element">autonomous custom elements</span></li>
   <li><span data-x="text content">text</span></li>
  </ul>

  <p class="note">Most elements that are categorized as phrasing content can only contain elements
  that are themselves categorized as phrasing content, not any flow content.</p>

  <p><dfn data-x="text content">Text</dfn>, in the context of content models, means either nothing,
  or <code>Text</code> nodes. <span data-x="text content">Text</span> is sometimes used as a content
  model on its own, but is also <span>phrasing content</span>, and can be <span>inter-element
  whitespace</span> (if the <code>Text</code> nodes are empty or contain just <span>ASCII
  whitespace</span>).</p>

  <p><code>Text</code> nodes and attribute values must consist of <span data-x="scalar value">scalar
  values</span>, excluding <span data-x="noncharacter">noncharacters</span>, and <span
  data-x="control">controls</span> other than <span>ASCII whitespace</span>.

  <!--<code>Text</code> nodes and attribute values may begin with an <i>isolated combining
  character</i>.--> <!-- commented out since nothing disallows it currently, so it's implicit;
  however, if we ever make charmod a normative reference, this will be needed to override it -->
  <!-- see also https://www.w3.org/Bugs/Public/show_bug.cgi?id=13502#c22 -->

  This specification includes extra constraints on the exact value of <code>Text</code> nodes and
  attribute values depending on their precise context.

  <!-- <ref spec=UNICODE>-->

  </p>



  <h6>Embedded content</h6>

  <p><dfn id="embedded-content-category" export>Embedded content</dfn> is content that imports
  another resource into the document, or content from another vocabulary that
  is inserted into the document.</p>

  <!-- when updating this also update the category index -->
  <ul class="brief category-list">
   <li><code>audio</code></li>
   <li><code>canvas</code></li>
   <li><code>embed</code></li>
   <li><code>iframe</code></li>
   <li><code>img</code></li>
   <li><span>MathML <code>math</code></span></li>
   <li><code>object</code></li>
   <li><code>picture</code></li>
   <li><span>SVG <code>svg</code></span></li>
   <li><code>video</code></li>
  </ul>

  <p>Elements that are from namespaces other than the <span>HTML namespace</span> and that convey
  content but not metadata, are <span>embedded content</span> for the purposes of the content models
  defined in this specification. (For example, MathML or SVG.)</p>

  <p>Some embedded content elements can have <dfn>fallback content</dfn>: content that is to be used
  when the external resource cannot be used (e.g. because it is of an unsupported format). The
  element definitions state what the fallback is, if any.</p>
  <!-- we might not need to define fallback content at all. consider removing it if we don't end up
  using it anywhere (e.g. Selection) -->


  <h6>Interactive content</h6>

<!--
TESTS:
https://software.hixie.ch/utilities/js/live-dom-viewer/?%3C%21DOCTYPE%20html%3E%0A%3Cp%20tabindex%3D1%3Etest%20%3Ca%20href%3D%22%22%3E%20%3Cem%3Etest%3C/em%3E%20%3C/a%3E%0A%3Cscript%3E%0A%20function%20test%20%28e%29%20%7B%20w%28e.type%20+%20%27%20on%20%27%20+%20e.target.tagName%20+%20%27%20through%20%27%20+%20e.currentTarget.tagName%29%3B%20%7D%0A%20document.getElementsByTagName%28%27a%27%29%5B0%5D.addEventListener%28%27click%27%2C%20test%2C%20false%29%3B%0A%20document.getElementsByTagName%28%27a%27%29%5B0%5D.addEventListener%28%27DOMActivate%27%2C%20test%2C%20false%29%3B%0A%20document.getElementsByTagName%28%27p%27%29%5B0%5D.addEventListener%28%27click%27%2C%20test%2C%20false%29%3B%0A%20document.getElementsByTagName%28%27p%27%29%5B0%5D.addEventListener%28%27DOMActivate%27%2C%20test%2C%20false%29%3B%0A%3C/script%3E%0A
https://software.hixie.ch/utilities/js/live-dom-viewer/?%3C%21DOCTYPE%20HTML%3E%0A%3Ca%20href%3Dhttp%3A//google.com/%20target%3Da%3EA%3C/a%3E%3Ca%20href%3Dhttp%3A//yahoo.com/%20target%3Db%3EB%3C/a%3E%3Cbr%3E%0A%3Ciframe%20name%3Da%3E%3C/iframe%3E%3Ciframe%20name%3Db%3E%3C/iframe%3E%0A%3Cscript%3E%0A%20var%20a%20%3D%20document.getElementsByTagName%28%27a%27%29%5B0%5D%3B%0A%20var%20b%20%3D%20document.getElementsByTagName%28%27a%27%29%5B1%5D%3B%0A%20a.appendChild%28b%29%3B%0A%3C/script%3E
https://software.hixie.ch/utilities/js/live-dom-viewer/?%3C%21DOCTYPE%20HTML%3E%0A%3Cform%20action%3D%22http%3A//google.com/%22%20onsubmit%3D%22w%28%27onsubmit%27%29%22%3E%3Cem%3EA%3C/em%3E%3C/form%3E%0A%3Cscript%3E%0Adocument.getElementsByTagName%28%27form%27%29%5B0%5D.attachEvent%28%27onsubmit%27%2C%20function%20%28%29%20%7B%20w%28%27submit%20fired%27%29%20%7D%29%3B%0Adocument.getElementsByTagName%28%27form%27%29%5B0%5D.fireEvent%28%27onsubmit%27%29%3B%0A%3C/script%3E
https://software.hixie.ch/utilities/js/live-dom-viewer/?%3C%21DOCTYPE%20HTML%3E%0A%3Cform%20action%3D%22http%3A//google.com/%22%3EX%3C/form%3E%0A%3Cscript%3E%0Avar%20evt%20%3D%20document.createEvent%28%22Events%22%29%3B%0Aevt.initEvent%28%22submit%22%2C%20true%2C%20true%29%3B%0Adocument.getElementsByTagName%28%27form%27%29%5B0%5D.dispatchEvent%28evt%29%3B%0A%3C/script%3E
-->

  <p><dfn export>Interactive content</dfn> is content that is specifically intended for user
  interaction.</p>

  <!-- when updating this also update the category index -->
  <ul class="brief category-list">
   <li><code>a</code> (if the <code data-x="attr-hyperlink-href">href</code> attribute is present)</li>
   <li><code>audio</code> (if the <code data-x="attr-media-controls">controls</code> attribute is present)</li>
   <li><code>button</code></li>
   <li><code>details</code></li>
   <li><code>embed</code></li>
   <li><code>iframe</code></li>
   <li><code>img</code> (if the <code data-x="attr-hyperlink-usemap">usemap</code> attribute is present)</li>
   <li><code>input</code> (if the <code data-x="attr-input-type">type</code> attribute is <em>not</em> in the <span data-x="attr-input-type-hidden">Hidden</span> state)</li>
   <li><code>label</code></li>
   <li><code>select</code></li>
   <li><code>textarea</code></li>
   <li><code>video</code> (if the <code data-x="attr-media-controls">controls</code> attribute is present)</li>
  </ul>



  <h6 id="palpable-content">Palpable content</h6>

  <p>As a general rule, elements whose content model allows any <span>flow content</span> or
  <span>phrasing content</span> should have at least one node in its <span
  data-x="concept-html-contents">contents</span> that is <dfn export>palpable content</dfn> and
  that does not have the <code data-x="attr-hidden">hidden</code> attribute specified.</p>

  <p class="note"><span>Palpable content</span> makes an element non-empty by providing either
  some descendant non-empty <span data-x="text content">text</span>, or else something users can
  hear (<code>audio</code> elements) or view (<code>video</code>, <code>img</code>, or
  <code>canvas</code> elements) or otherwise interact with (for example, interactive form
  controls).</p>

  <p>This requirement is not a hard requirement, however, as there are many cases where an element
  can be empty legitimately, for example when it is used as a placeholder which will later be filled
  in by a script, or when the element is part of a template and would on most pages be filled in but
  on some pages is not relevant.</p>

  <p>Conformance checkers are encouraged to provide a mechanism for authors to find elements that
  fail to fulfill this requirement, as an authoring aid.</p>

  <p>The following elements are palpable content:</p>

  <!-- when updating this also update the category index -->
  <ul class="brief category-list">
   <li><code>a</code></li>
   <li><code>abbr</code></li>
   <li><code>address</code></li>
   <li><code>article</code></li>
   <li><code>aside</code></li>
   <li><code>audio</code> (if the <code data-x="attr-media-controls">controls</code> attribute is present)</li>
   <li><code>b</code></li>
   <li><code>bdi</code></li>
   <li><code>bdo</code></li>
   <li><code>blockquote</code></li>
   <li><code>button</code></li>
   <li><code>canvas</code></li>
   <li><code>cite</code></li>
   <li><code>code</code></li>
   <li><code>data</code></li>
   <li><code>del</code></li>
   <li><code>details</code></li>
   <li><code>dfn</code></li>
   <li><code>div</code></li>
   <li><code>dl</code> (if the element's children include at least one name-value group)</li>
   <li><code>em</code></li>
   <li><code>embed</code></li>
   <li><code>fieldset</code></li>
   <li><code>figure</code></li>
   <li><code>footer</code></li>
   <li><code>form</code></li>
   <li><code>h1</code></li>
   <li><code>h2</code></li>
   <li><code>h3</code></li>
   <li><code>h4</code></li>
   <li><code>h5</code></li>
   <li><code>h6</code></li>
   <li><code>header</code></li>
   <li><code>hgroup</code></li>
   <li><code>i</code></li>
   <li><code>iframe</code></li>
   <li><code>img</code></li>
   <li><code>input</code> (if the <code data-x="attr-input-type">type</code> attribute is <em>not</em> in the <span data-x="attr-input-type-hidden">Hidden</span> state)</li>
   <li><code>ins</code></li>
   <li><code>kbd</code></li>
   <li><code>label</code></li>
   <li><code>main</code></li>
   <li><code>map</code></li>
   <li><code>mark</code></li>
   <li><span>MathML <code>math</code></span></li>
   <li><code>menu</code> (if the element's children include at least one <code>li</code> element)</li>
   <li><code>meter</code></li>
   <li><code>nav</code></li>
   <li><code>object</code></li>
   <li><code>ol</code> (if the element's children include at least one <code>li</code> element)</li>
   <li><code>output</code></li>
   <li><code>p</code></li>
   <li><code>picture</code></li>
   <li><code>pre</code></li>
   <li><code>progress</code></li>
   <li><code>q</code></li>
   <li><code>ruby</code></li>
   <li><code>s</code></li>
   <li><code>samp</code></li>
   <li><code>search</code></li>
   <li><code>section</code></li>
   <li><code>select</code></li>
   <li><code>small</code></li>
   <li><code>span</code></li>
   <li><code>strong</code></li>
   <li><code>sub</code></li>
   <li><code>sup</code></li>
   <li><span>SVG <code>svg</code></span></li>
   <li><code>table</code></li>
   <li><code>textarea</code></li>
   <li><code>time</code></li>
   <li><code>u</code></li>
   <li><code>ul</code> (if the element's children include at least one <code>li</code> element)</li>
   <li><code>var</code></li>
   <li><code>video</code></li>
   <li><span data-x="autonomous custom element">autonomous custom elements</span></li>
   <li><span data-x="text content">text</span> that is not <span>inter-element whitespace</span></li>
  </ul>


  <h6>Script-supporting elements</h6>

  <p><dfn>Script-supporting elements</dfn> are those that do not <span
  data-x="represents">represent</span> anything themselves (i.e. they are not rendered), but are
  used to support scripts, e.g. to provide functionality for the user.</p>

  <p>The following elements are script-supporting elements:</p>

  <!-- when updating this also update the category index -->
  <ul class="brief category-list">
   <li><code>script</code></li>
   <li><code>template</code></li>
  </ul>



  <h5>Transparent content models</h5>

  <p>Some elements are described as <dfn>transparent</dfn>; they have "transparent" in the
  description of their content model. The content model of a <span>transparent</span> element is
  derived from the content model of its parent element: the elements required in the part of the
  content model that is "transparent" are the same elements as required in the part of the content
  model of the parent of the transparent element in which the transparent element finds itself.</p>

  <div class="example">

   <p>For instance, an <code>ins</code> element inside a <code>ruby</code> element cannot contain an
   <code>rt</code> element, because the part of the <code>ruby</code> element's content model that
   allows <code>ins</code> elements is the part that allows <span>phrasing content</span>, and the
   <code>rt</code> element is not <span>phrasing content</span>.</p>

  </div>

<!--(as far as I can tell, there's no way to violate this requirement
     without first violating the earlier requirement)
  <p>Furthermore, when a content model includes a part that is "transparent", those parts must not
  contain content that would not be conformant if all transparent elements in the tree were
  replaced, in their parent element, by the <span data-x="concept-html-contents">contents</span> in
  the "transparent" part of their content model, retaining order.</p>

  <div class="example">

   <p>Consider the following markup fragment:</p>

   <pre><code class="html">&lt;p>Hello &lt;a href="world.html">&lt;em>wonderful&lt;/em> world&lt;/a>!&lt;/p></code></pre>

   <p>Its DOM looks like the following:</p>

   <ul class="domTree"><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <span data-x="">Hello </span></li><li class="t1"><code>a</code> <span class="t2" data-x=""><code class="attribute name" data-x="attr-hyperlink-href">href</code>="<code class="attribute value" data-x="">world.html</code>"</span><ul><li class="t1"><code>em</code><ul><li class="t3"><code>#text</code>: <span data-x="">wonderful</span></li></ul></li><li class="t3"><code>#text</code>: <span data-x=""> world</span></li></ul></li><li class="t3"><code>#text</code>: <span data-x="">!</span></li></ul></li></ul>

   <p>The content model of the <code>a</code> element is <span>transparent</span>. To see if its
   contents are conforming, therefore, the element is replaced by its contents:</p>

   <ul class="domTree"><li class="t1"><code>p</code><ul><li class="t3"><code>#text</code>: <span data-x="">Hello </span></li><li class="t1"><code>em</code><ul><li class="t3"><code>#text</code>: <span data-x="">wonderful</span></li></ul></li><li class="t3"><code>#text</code>: <span data-x=""> world</span></li><li class="t3"><code>#text</code>: <span data-x="">!</span></li></ul></li></ul>

   <p>Since that is conforming, the contents of the <code>a</code> are conforming in the original
   fragment (there is no complication regarding the various parts of the <code>p</code> element's
   content model, since that element's content model has only one part).</p>

  </div>
-->

  <p class="note">In some cases, where transparent elements are nested in each other, the process
  has to be applied iteratively.</p>

  <div class="example">

   <p>Consider the following markup fragment:</p>

   <pre><code class="html">&lt;p>&lt;object>&lt;param>&lt;ins>&lt;map>&lt;a href="/">Apples&lt;/a>&lt;/map>&lt;/ins>&lt;/object>&lt;/p></code></pre>

   <p>To check whether "Apples" is allowed inside the <code>a</code> element, the content models are
   examined. The <code>a</code> element's content model is transparent, as is the <code>map</code>
   element's, as is the <code>ins</code> element's, as is the part of the <code>object</code>
   element's in which the <code>ins</code> element is found. The <code>object</code> element is
   found in the <code>p</code> element, whose content model is <span>phrasing content</span>. Thus,
   "Apples" is allowed, as text is phrasing content.</p>

  </div>

  <p>When a transparent element has no parent, then the part of its content model that is
  "transparent" must instead be treated as accepting any <span>flow content</span>.</p>


  <h5>Paragraphs</h5>

  <p class="note">The term <span>paragraph</span> as defined in this section is used for more than
  just the definition of the <code>p</code> element. The <span>paragraph</span> concept defined here
  is used to describe how to interpret documents. The <code>p</code> element is merely one of
  several ways of marking up a <span>paragraph</span>.</p>

  <!-- note: the actual definition is below -->
  <p>A <dfn>paragraph</dfn> is typically a run of <span>phrasing content</span> that forms a block
  of text with one or more sentences that discuss a particular topic, as in typography, but can also
  be used for more general thematic grouping. For instance, an address is also a paragraph, as is a
  part of a form, a byline, or a stanza in a poem.</p>

  <div class="example">

   <p>In the following example, there are two paragraphs in a section. There is also a heading,
   which contains phrasing content that is not a paragraph. Note how the comments and
   <span>inter-element whitespace</span> do not form paragraphs.</p>

   <pre><code class="html">&lt;section>
  &lt;h2>Example of paragraphs&lt;/h2>
  This is the &lt;em>first&lt;/em> paragraph in this example.
  &lt;p>This is the second.&lt;/p>
  &lt;!-- This is not a paragraph. -->
&lt;/section></code></pre>

  </div>

  <p>Paragraphs in <span>flow content</span> are defined relative to what the document looks like
  without the <code>a</code>, <code>ins</code>, <code>del</code>, and <code>map</code> elements
  complicating matters, since those elements, with their hybrid content models, can straddle
  paragraph boundaries, as shown in the first two examples below.</p>

  <p class="note">Generally, having elements straddle paragraph boundaries is best avoided.
  Maintaining such markup can be difficult.</p>

  <div class="example">

   <p>The following example takes the markup from the earlier example and puts <code>ins</code> and
   <code>del</code> elements around some of the markup to show that the text was changed (though in
   this case, the changes admittedly don't make much sense). Notice how this example has exactly the
   same paragraphs as the previous one, despite the <code>ins</code> and <code>del</code> elements
   &mdash; the <code>ins</code> element straddles the heading and the first paragraph, and the
   <code>del</code> element straddles the boundary between the two paragraphs.</p>

   <pre><code class="html">&lt;section>
  &lt;ins>&lt;h2>Example of paragraphs&lt;/h2>
  This is the &lt;em>first&lt;/em> paragraph in&lt;/ins> this example&lt;del>.
  &lt;p>This is the second.&lt;/p>&lt;/del>
  &lt;!-- This is not a paragraph. -->
&lt;/section></code></pre>

  </div>

  <div w-nodev>

  <p>Let <var>view</var> be a view of the DOM that replaces all <code>a</code>,
  <code>ins</code>, <code>del</code>, and <code>map</code> elements in the document with their <span
  data-x="concept-html-contents">contents</span>. Then, in <var>view</var>, for each run
  of sibling <span>phrasing content</span> nodes uninterrupted by other types of content, in an
  element that accepts content other than <span>phrasing content</span> as well as <span>phrasing
  content</span>, let <var>first</var> be the first node of the run, and let <var>last</var> be the last node of the run. For each such run that consists of at least one
  node that is neither <span>embedded content</span> nor <span>inter-element whitespace</span>, a
  paragraph exists in the original DOM from immediately before <var>first</var> to
  immediately after <var>last</var>. (Paragraphs can thus span across <code>a</code>,
  <code>ins</code>, <code>del</code>, and <code>map</code> elements.)</p>

  <p>Conformance checkers may warn authors of cases where they have paragraphs that overlap each
  other (this can happen with <code>object</code>, <code>video</code>, <code>audio</code>, and
  <code>canvas</code> elements, and indirectly through elements in other namespaces that allow HTML
  to be further embedded therein, like <span>SVG <code>svg</code></span> or <span>MathML
  <code>math</code></span>).</p>
  <!-- example below -->

  </div>

  <p>A <span>paragraph</span> is also formed explicitly by <code>p</code> elements.</p>

  <p class="note">The <code>p</code> element can be used to wrap individual paragraphs when there
  would otherwise not be any content other than phrasing content to separate the paragraphs from
  each other.</p>

  <div class="example">

   <p>In the following example, the link spans half of the first paragraph, all of the heading
   separating the two paragraphs, and half of the second paragraph. It straddles the paragraphs and
   the heading.</p>

   <pre><code class="html">&lt;header>
 Welcome!
 &lt;a href="about.html">
  This is home of...
  &lt;h1>The Falcons!&lt;/h1>
  The Lockheed Martin multirole jet fighter aircraft!
 &lt;/a>
 This page discusses the F-16 Fighting Falcon's innermost secrets.
&lt;/header></code></pre>

   <p>Here is another way of marking this up, this time showing the paragraphs explicitly, and
   splitting the one link element into three:</p>

   <pre><code class="html">&lt;header>
 &lt;p>Welcome! &lt;a href="about.html">This is home of...&lt;/a>&lt;/p>
 &lt;h1>&lt;a href="about.html">The Falcons!&lt;/a>&lt;/h1>
 &lt;p>&lt;a href="about.html">The Lockheed Martin multirole jet
 fighter aircraft!&lt;/a> This page discusses the F-16 Fighting
 Falcon's innermost secrets.&lt;/p>
&lt;/header></code></pre>

  </div>

  <div class="example">

   <!-- I don't know if there's a better way to deal with this, but if there is, let me know... -->

   <p>It is possible for paragraphs to overlap when using certain elements that define fallback
   content. For example, in the following section:</p>

   <pre><code class="html">&lt;section>
 &lt;h2>My Cats&lt;/h2>
 You can play with my cat simulator.
 &lt;object data="cats.sim">
  To see the cat simulator, use one of the following links:
  &lt;ul>
   &lt;li>&lt;a href="cats.sim">Download simulator file&lt;/a>
   &lt;li>&lt;a href="https://sims.example.com/watch?v=LYds5xY4INU">Use online simulator&lt;/a>
  &lt;/ul>
  Alternatively, upgrade to the Mellblom Browser.
 &lt;/object>
 I'm quite proud of it.
&lt;/section></code></pre>

   <p>There are five paragraphs:</p>

   <ol class="brief">

    <li>The paragraph that says "You can play with my cat simulator. <i>object</i> I'm
    quite proud of it.", where <i>object</i> is the <code>object</code> element.</li>

    <li>The paragraph that says "To see the cat simulator, use one of the following links:".</li>

    <li>The paragraph that says "Download simulator file".</li>

    <li>The paragraph that says "Use online simulator".</li>

    <li>The paragraph that says "Alternatively, upgrade to the Mellblom Browser.".</li>
   </ol>

   <p>The first paragraph is overlapped by the other four. A user agent that supports the "cats.sim"
   resource will only show the first one, but a user agent that shows the fallback will confusingly
   show the first sentence of the first paragraph as if it was in the same paragraph as the second
   one, and will show the last paragraph as if it was at the start of the second sentence of the
   first paragraph.</p>

   <p>To avoid this confusion, explicit <code>p</code> elements can be used. For example:</p>

   <!-- My Fish -->
   <pre><code class="html">&lt;section>
 &lt;h2>My Cats&lt;/h2>
 &lt;p>You can play with my cat simulator.&lt;/p>
 &lt;object data="cats.sim">
  &lt;p>To see the cat simulator, use one of the following links:&lt;/p>
  &lt;ul>
   &lt;li>&lt;a href="cats.sim">Download simulator file&lt;/a>
   &lt;li>&lt;a href="https://sims.example.com/watch?v=LYds5xY4INU">Use online simulator&lt;/a>
  &lt;/ul>
  &lt;p>Alternatively, upgrade to the Mellblom Browser.&lt;/p>
 &lt;/object>
 &lt;p>I'm quite proud of it.&lt;/p>
&lt;/section></code></pre>

  </div>


  <h4><dfn>Global attributes</dfn></h4>

  <p>The following attributes are common to and may be specified on all <span>HTML
  elements</span><span w-nodev> (even those not defined in this specification)</span>:</p>

  <ul class="brief">
   <li><code data-x="attr-accesskey">accesskey</code></li>
   <li><code data-x="attr-autocapitalize">autocapitalize</code></li>
   <li><code data-x="attr-fe-autofocus">autofocus</code></li>
   <li><code data-x="attr-contenteditable">contenteditable</code></li>
   <li><code data-x="attr-dir">dir</code></li>
   <li><code data-x="attr-draggable">draggable</code></li>
   <li><code data-x="attr-enterkeyhint">enterkeyhint</code></li>
   <li><code data-x="attr-hidden">hidden</code></li>
   <li><code data-x="attr-inert">inert</code></li>
   <li><code data-x="attr-inputmode">inputmode</code></li>
   <li><code data-x="attr-is">is</code></li>
   <li><code data-x="attr-itemid">itemid</code></li>
   <li><code data-x="attr-itemprop">itemprop</code></li>
   <li><code data-x="attr-itemref">itemref</code></li>
   <li><code data-x="attr-itemscope">itemscope</code></li>
   <li><code data-x="attr-itemtype">itemtype</code></li>
   <li><code data-x="attr-lang">lang</code></li>
   <li><code data-x="attr-nonce">nonce</code></li>
   <li><code data-x="attr-popover">popover</code></li>
   <li><code data-x="attr-spellcheck">spellcheck</code></li>
   <li><code data-x="attr-style">style</code></li>
   <li><code data-x="attr-tabindex">tabindex</code></li>
   <li><code data-x="attr-title">title</code></li>
   <li><code data-x="attr-translate">translate</code></li>
  </ul>

  <div w-nodev>

  <p>These attributes are only defined by this specification as attributes for <span>HTML
  elements</span>. When this specification refers to elements having these attributes, elements from
  namespaces that are not defined as having these attributes must not be considered as being
  elements with these attributes.</p>

  <div class="example">

   <p>For example, in the following XML fragment, the "<code data-x="">bogus</code>" element does not
   have a <code data-x="attr-dir">dir</code> attribute as defined in this specification, despite
   having an attribute with the literal name "<code data-x="">dir</code>". Thus, <span>the
   directionality</span> of the inner-most <code>span</code> element is '<span
   data-x="concept-rtl">rtl</span>', inherited from the <code>div</code> element indirectly through
   the "<code data-x="">bogus</code>" element.</p>

   <pre class="bad"><code class="html">&lt;div xmlns="http://www.w3.org/1999/xhtml" dir="rtl">
 &lt;bogus xmlns="https://example.net/ns" dir="ltr">
  &lt;span xmlns="http://www.w3.org/1999/xhtml">
  &lt;/span>
 &lt;/bogus>
&lt;/div></code></pre>

  </div>

  </div>

  <hr>

  <p><cite>DOM</cite> defines the user agent requirements for the <dfn element-attr for="global"
  data-x="attr-class" id="classes"><code>class</code></dfn>, <dfn element-attr for="global"
  data-x="attr-id" id="the-id-attribute"><code>id</code></dfn>, and <dfn element-attr for="global"
  data-x="attr-slot"><code>slot</code></dfn> attributes for any element in any namespace. <ref
  spec=DOM></p>

  <p>The <code data-x="attr-class">class</code>, <code data-x="attr-id">id</code>, and <code
  data-x="attr-slot">slot</code> attributes may be specified on all <span>HTML elements</span>.</p>

  <p>When specified on <span>HTML elements</span>, the <code data-x="attr-class">class</code>
  attribute must have a value that is a <span>set of space-separated tokens</span> representing the
  various classes that the element belongs to.</p>

  <div class="note">

  <p>Assigning classes to an element affects class matching in selectors in CSS, the <code
  data-x="dom-document-getElementsByClassName">getElementsByClassName()</code> method in the DOM,
  and other such features.</p>

  <p>There are no additional restrictions on the tokens authors can use in the <code
  data-x="attr-class">class</code> attribute, but authors are encouraged to use values that describe
  the nature of the content, rather than values that describe the desired presentation of the
  content.</p>

  </div>

  <p>When specified on <span>HTML elements</span>, the <code data-x="attr-id">id</code> attribute
  value must be unique amongst all the <span data-x="concept-id">IDs</span> in the element's
  <span>tree</span> and must contain at least one character. The value must not contain any
  <span>ASCII whitespace</span>.</p>

  <!-- ASCII whitespace is disallowed because space-separated lists of IDs otherwise would not be
  able to reach all valid IDs -->

  <div class="note">

  <p>The <code data-x="attr-id">id</code> attribute specifies its element's <span
  data-x="concept-id">unique identifier (ID)</span>.</p>

  <p>There are no other restrictions on what form an ID can take; in particular, IDs can consist of
  just digits, start with a digit, start with an underscore, consist of just punctuation, etc.</p>

  <p>An element's <span data-x="concept-id">unique identifier</span> can be used for a variety of
  purposes, most notably as a way to link to specific parts of a document using <span
  data-x="concept-url-fragment">fragments</span>, as a way to target an element when scripting, and
  as a way to style a specific element from CSS.</p>

  </div>

  <div w-nodev>

  <p>Identifiers are opaque strings. Particular meanings should not be derived from the value of the
  <code data-x="attr-id">id</code> attribute.</p>

  </div>

  <p>There are no conformance requirements for the <code data-x="attr-slot">slot</code> attribute
  specific to <span>HTML elements</span>.</p>

  <p class="note">The <code data-x="attr-slot">slot</code> attribute is used to <span>assign a
  slot</span> to an element: an element with a <code data-x="attr-slot">slot</code> attribute is
  <span data-x="assign a slot">assigned</span> to the <span data-x="concept-slot">slot</span>
  created by the <code>slot</code> element whose <span data-x="attr-slot-name">name</span>
  attribute's value matches that <code data-x="attr-slot">slot</code> attribute's value — but only
  if that <code>slot</code> element finds itself in the <span>shadow tree</span> whose
  <span>root</span>'s <span data-x="concept-DocumentFragment-host">host</span> has the corresponding
  <code data-x="attr-slot">slot</code> attribute value.</p>

  <hr>

  <p>To enable assistive technology products to expose a more fine-grained interface than is
  otherwise possible with HTML elements and attributes, a set of <a href="#wai-aria">annotations
  for assistive technology products</a> can be specified (the ARIA <code
  data-x="attr-aria-role">role</code> and <code data-x="attr-aria-*">aria-*</code> attributes). <ref
  spec=ARIA></p>

  <hr>

  <p>The following <span>event handler content attributes</span> may be specified on any <span
  data-x="HTML elements">HTML element</span>:</p>

  <ul class="brief">
   <li><code data-x="handler-onauxclick">onauxclick</code></li>
   <li><code data-x="handler-onbeforeinput">onbeforeinput</code></li>
   <li><code data-x="handler-onbeforematch">onbeforematch</code></li>
   <li><code data-x="handler-onbeforetoggle">onbeforetoggle</code></li>
   <li><code data-x="handler-onblur">onblur</code>*</li>
   <li><code data-x="handler-oncancel">oncancel</code></li>
   <li><code data-x="handler-oncanplay">oncanplay</code></li>
   <li><code data-x="handler-oncanplaythrough">oncanplaythrough</code></li>
   <li><code data-x="handler-onchange">onchange</code></li>
   <li><code data-x="handler-onclick">onclick</code></li>
   <li><code data-x="handler-onclose">onclose</code></li>
   <li><code data-x="handler-oncontextlost">oncontextlost</code></li>
   <li><code data-x="handler-oncontextmenu">oncontextmenu</code></li>
   <li><code data-x="handler-oncontextrestored">oncontextrestored</code></li>
   <li><code data-x="handler-oncopy">oncopy</code></li>
   <li><code data-x="handler-oncuechange">oncuechange</code></li>
   <li><code data-x="handler-oncut">oncut</code></li>
   <li><code data-x="handler-ondblclick">ondblclick</code></li>
   <li><code data-x="handler-ondrag">ondrag</code></li>
   <li><code data-x="handler-ondragend">ondragend</code></li>
   <li><code data-x="handler-ondragenter">ondragenter</code></li>
   <li><code data-x="handler-ondragleave">ondragleave</code></li>
   <li><code data-x="handler-ondragover">ondragover</code></li>
   <li><code data-x="handler-ondragstart">ondragstart</code></li>
   <li><code data-x="handler-ondrop">ondrop</code></li>
   <li><code data-x="handler-ondurationchange">ondurationchange</code></li>
   <li><code data-x="handler-onemptied">onemptied</code></li>
   <li><code data-x="handler-onended">onended</code></li>
   <li><code data-x="handler-onerror">onerror</code>*</li>
   <li><code data-x="handler-onfocus">onfocus</code>*</li>
   <li><code data-x="handler-onformdata">onformdata</code></li>
   <li><code data-x="handler-oninput">oninput</code></li>
   <li><code data-x="handler-oninvalid">oninvalid</code></li>
   <li><code data-x="handler-onkeydown">onkeydown</code></li>
   <li><code data-x="handler-onkeypress">onkeypress</code></li>
   <li><code data-x="handler-onkeyup">onkeyup</code></li>
   <li><code data-x="handler-onload">onload</code>*</li>
   <li><code data-x="handler-onloadeddata">onloadeddata</code></li>
   <li><code data-x="handler-onloadedmetadata">onloadedmetadata</code></li>
   <li><code data-x="handler-onloadstart">onloadstart</code></li>
   <li><code data-x="handler-onmousedown">onmousedown</code></li>
   <li><code data-x="handler-onmouseenter">onmouseenter</code></li>
   <li><code data-x="handler-onmouseleave">onmouseleave</code></li>
   <li><code data-x="handler-onmousemove">onmousemove</code></li>
   <li><code data-x="handler-onmouseout">onmouseout</code></li>
   <li><code data-x="handler-onmouseover">onmouseover</code></li>
   <li><code data-x="handler-onmouseup">onmouseup</code></li>
   <li><code data-x="handler-onpaste">onpaste</code></li>
   <li><code data-x="handler-onpause">onpause</code></li>
   <li><code data-x="handler-onplay">onplay</code></li>
   <li><code data-x="handler-onplaying">onplaying</code></li>
   <li><code data-x="handler-onprogress">onprogress</code></li>
   <li><code data-x="handler-onratechange">onratechange</code></li>
   <li><code data-x="handler-onreset">onreset</code></li>
   <li><code data-x="handler-onresize">onresize</code>*</li>
   <li><code data-x="handler-onscroll">onscroll</code>*</li>
   <li><code data-x="handler-onscrollend">onscrollend</code>*</li>
   <li><code data-x="handler-onsecuritypolicyviolation">onsecuritypolicyviolation</code></li>
   <li><code data-x="handler-onseeked">onseeked</code></li>
   <li><code data-x="handler-onseeking">onseeking</code></li>
   <li><code data-x="handler-onselect">onselect</code></li>
   <li><code data-x="handler-onslotchange">onslotchange</code></li>
   <li><code data-x="handler-onstalled">onstalled</code></li>
   <li><code data-x="handler-onsubmit">onsubmit</code></li>
   <li><code data-x="handler-onsuspend">onsuspend</code></li>
   <li><code data-x="handler-ontimeupdate">ontimeupdate</code></li>
   <li><code data-x="handler-ontoggle">ontoggle</code></li>
   <li><code data-x="handler-onvolumechange">onvolumechange</code></li>
   <li><code data-x="handler-onwaiting">onwaiting</code></li>
   <li><code data-x="handler-onwheel">onwheel</code></li>
  </ul>

  <p class="note">The attributes marked with an asterisk have a different meaning when specified on
  <code>body</code> elements as those elements expose <span>event handlers</span> of the
  <code>Window</code> object with the same names.</p>

  <p class="note">While these attributes apply to all elements, they are not useful on all elements.
  For example, only <span data-x="media element">media elements</span> will ever receive a <code
  data-x="event-media-volumechange">volumechange</code> event fired by the user agent.</p>

  <hr>

  <p><span data-x="custom data attribute">Custom data attributes</span> (e.g. <code
  data-x="">data-foldername</code> or <code data-x="">data-msgid</code>) can be specified on any
  <span data-x="HTML elements">HTML element</span>, to store custom data, state, annotations, and
  similar, specific to the page.</p>

  <hr>

  <p>In <span>HTML documents</span>, elements in the <span>HTML namespace</span> may have an <code
  data-x="">xmlns</code> attribute specified, if, and only if, it has the exact value "<code
  data-x="">http://www.w3.org/1999/xhtml</code>". This does not apply to <span>XML
  documents</span>.</p>

  <p class="note">In HTML, the <code data-x="">xmlns</code> attribute has absolutely no effect. It
  is basically a talisman. It is allowed merely to make migration to and from XML mildly easier.
  When parsed by an <span>HTML parser</span>, the attribute ends up in no namespace, not the "<code
  data-x="">http://www.w3.org/2000/xmlns/</code>" namespace like namespace declaration attributes in
  XML do.</p>

  <p class="note">In XML, an <code data-x="">xmlns</code> attribute is part of the namespace
  declaration mechanism, and an element cannot actually have an <code data-x="">xmlns</code>
  attribute in no namespace specified.</p>

  <hr>

  <p><cite>XML</cite> also allows the use of the <code data-x="attr-xml-space">xml:space</code>
  attribute in the <span>XML namespace</span> on any element in an <span data-x="XML documents">XML
  document</span>. This attribute has no effect on <span>HTML elements</span>, as the default
  behavior in HTML is to preserve whitespace. <ref spec=XML></p>

  <p class="note">There is no way to serialize the <code data-x="attr-xml-space">xml:space</code>
  attribute on <span>HTML elements</span> in the <code>text/html</code> syntax.</p>



  <h5>The <code data-x="attr-title">title</code> attribute</h5>

  <p>The <dfn element-attr for="html-global"><code data-x="attr-title">title</code></dfn> attribute
  <span>represents</span> advisory information for the element, such as would be appropriate for a
  tooltip. On a link, this could be the title or a description of the target resource; on an image,
  it could be the image credit or a description of the image; on a paragraph, it could be a footnote
  or commentary on the text; on a citation, it could be further information about the source; on
  <span>interactive content</span>, it could be a label for, or instructions for, use of the
  element; and so forth.  The value is text.</p>

  <!-- search for title-warning if modifying this paragraph -->
  <p class="note">Relying on the <code data-x="attr-title">title</code> attribute is currently
  discouraged as many user agents do not expose the attribute in an accessible manner as required by
  this specification (e.g., requiring a pointing device such as a mouse to cause a tooltip to
  appear, which excludes keyboard-only users and touch-only users, such as anyone with a modern
  phone or tablet).</p>

  <p>If this attribute is omitted from an element, then it implies that the <code
  data-x="attr-title">title</code> attribute of the nearest ancestor <span data-x="HTML
  elements">HTML element</span> with a <code data-x="attr-title">title</code> attribute set is also
  relevant to this element. Setting the attribute overrides this, explicitly stating that the
  advisory information of any ancestors is not relevant to this element. Setting the attribute to
  the empty string indicates that the element has no advisory information.</p>

  <p>If the <code data-x="attr-title">title</code> attribute's value contains U+000A LINE FEED (LF)
  characters, the content is split into multiple lines. Each U+000A LINE FEED (LF) character
  represents a line break.</p>

  <div class="example">
   <p>Caution is advised with respect to the use of newlines in <code
   data-x="attr-title">title</code> attributes.</p>

   <p>For instance, the following snippet actually defines an abbreviation's expansion <em>with a
   line break in it</em>:</p>

   <pre class="bad"><code class="html">&lt;p>My logs show that there was some interest in &lt;abbr title="Hypertext
Transport Protocol">HTTP&lt;/abbr> today.&lt;/p></code></pre> <!-- DO NOT REWRAP THIS LINE -->
  </div>

  <p>Some elements, such as <code>link</code>, <code>abbr</code>, and <code>input</code>, define
  additional semantics for the <code data-x="attr-title">title</code> attribute beyond the semantics
  described above.</p> <!-- the other two are <code>style</code> and <code>dfn</code> -->

  <div w-nodev>

  <p>The <dfn>advisory information</dfn> of an element is the value that the following algorithm
  returns, with the algorithm being aborted once a value is returned. When the algorithm returns the
  empty string, then there is no advisory information.</p>

  <ol>
   <li><p>If the element has a <code data-x="attr-title">title</code> attribute, then return its
   value.</p></li>

   <li><p>If the element has a parent element, then return the parent element's <span>advisory
   information</span>.</p></li>

   <li><p>Return the empty string.</p></li>
  </ol>

  <p>User agents should inform the user when elements have <span>advisory information</span>,
  otherwise the information would not be discoverable.</p>

  <hr>

  <p>The <dfn attribute for="HTMLElement"><code data-x="dom-title">title</code></dfn> IDL attribute
  must <span>reflect</span> the <code data-x="attr-title">title</code> content attribute.</p>

  </div>



  <h5>The <code data-x="attr-lang">lang</code> and <code data-x="attr-xml-lang">xml:lang</code>
  attributes</h5>

  <p>The <dfn element-attr for="html-global"><code data-x="attr-lang">lang</code></dfn> attribute
  (in no namespace) specifies the primary language for the element's contents and for any of the
  element's attributes that contain text. Its value must be a valid BCP 47 language tag, or the
  empty string. Setting the attribute to the empty string indicates that the primary language is
  unknown<!-- UA conformance requirements for this are below -->. <ref spec=BCP47></p>

  <p>The <dfn data-x="attr-xml-lang" data-x-href="https://www.w3.org/TR/xml/#sec-lang-tag"><code
  data-x="">lang</code></dfn> attribute in the <span>XML namespace</span> is defined in XML. <ref
  spec=XML></p>

  <p>If these attributes are omitted from an element, then the language of this element is the same
  as the language of its parent element, if any.</p>

  <p>The <code data-x="attr-lang">lang</code> attribute in no namespace may be used on any <span
  data-x="HTML elements">HTML element</span>.</p>

  <p>The <span data-x="attr-xml-lang"><code data-x="">lang</code> attribute in the <span>XML
  namespace</span></span> may be used on <span>HTML elements</span> in <span>XML documents</span>,
  as well as elements in other namespaces if the relevant specifications allow it (in particular,
  MathML and SVG allow <span data-x="attr-xml-lang"><code data-x="">lang</code> attributes in the
  <span>XML namespace</span></span> to be specified on their elements). If both the <code
  data-x="attr-lang">lang</code> attribute in no namespace and the <span data-x="attr-xml-lang"><code
  data-x="">lang</code> attribute in the <span>XML namespace</span></span> are specified on the same
  element, they must have exactly the same value when compared in an <span>ASCII
  case-insensitive</span> manner.</p>

  <p>Authors must not use the <span data-x="attr-xml-lang"><code data-x="">lang</code> attribute in
  the <span>XML namespace</span></span> on <span>HTML elements</span> in <span>HTML
  documents</span>. To ease migration to and from XML, authors may specify an attribute in no
  namespace with no prefix and with the literal localname "<code data-x="">xml:lang</code>" on
  <span>HTML elements</span> in <span>HTML documents</span>, but such attributes must only be
  specified if a <code data-x="attr-lang">lang</code> attribute in no namespace is also specified,
  and both attributes must have the same value when compared in an <span>ASCII
  case-insensitive</span> manner.</p>

  <p class="note">The attribute in no namespace with no prefix and with the literal localname "<code
  data-x="">xml:lang</code>" has no effect on language processing.</p>

  <div w-nodev>

  <hr>

  <p>To determine the <dfn export for="Node">language</dfn> of a node, user agents must look at the
  nearest ancestor element (including the element itself if the node is an element) that has a <span
  data-x="attr-xml-lang"><code data-x="">lang</code> attribute in the <span>XML
  namespace</span></span> set or is an <span data-x="HTML elements">HTML element</span> and has a
  <code data-x="attr-lang">lang</code> in no namespace attribute set. That attribute specifies the
  language of the node (regardless of its value).</p>

  <p>If both the <code data-x="attr-lang">lang</code> attribute in no namespace and the <span
  data-x="attr-xml-lang"><code data-x="">lang</code> attribute in the <span>XML
  namespace</span></span> are set on an element, user agents must use the <span
  data-x="attr-xml-lang"><code data-x="">lang</code> attribute in the <span>XML
  namespace</span></span>, and the <code data-x="attr-lang">lang</code> attribute in no namespace
  must be <span data-x="ignore">ignored</span> for the purposes of determining the element's
  language.</p>

  <p>If node's <span data-x="inclusive ancestor">inclusive ancestors</span> do not have either
  attribute set, but there is a <span>pragma-set default language</span> set, then that is the
  language of the node. If there is no <span>pragma-set default language</span> set, then language
  information from a higher-level protocol (such as HTTP), if any, must be used as the final
  fallback language instead. In the absence of any such language information, and in cases where the
  higher-level protocol reports multiple languages, the language of the node is unknown, and the
  corresponding language tag is the empty string.</p>

  <p>If the resulting value is not a recognized language tag, then it must be treated as an unknown
  language having the given language tag, distinct from all other languages. For the purposes of
  round-tripping or communicating with other services that expect language tags, user agents should
  pass unknown language tags through unmodified, and tagged as being BCP 47 language tags, so that
  subsequent services do not interpret the data as another type of language description. <ref spec=BCP47></p>

  <p class="example">Thus, for instance, an element with <code data-x="">lang="xyzzy"</code> would be
  matched by the selector <code data-x="">:lang(xyzzy)</code> (e.g. in CSS), but it would not be
  matched by <code data-x="">:lang(abcde)</code>, even though both are equally invalid. Similarly, if
  a web browser and screen reader working in unison communicated about the language of the element,
  the browser would tell the screen reader that the language was "xyzzy", even if it knew it was
  invalid, just in case the screen reader actually supported a language with that tag after all.
  Even if the screen reader supported both BCP 47 and another syntax for encoding language names,
  and in that other syntax the string "xyzzy" was a way to denote the Belarusian language, it would
  be <em>incorrect</em> for the screen reader to then start treating text as Belarusian, because
  "xyzzy" is not how Belarusian is described in BCP 47 codes (BCP 47 uses the code "be" for
  Belarusian).</p>

  <p>If the resulting value is the empty string, then it must be interpreted as meaning that the
  language of the node is explicitly unknown.</p>

  <hr>

  <p>User agents may use the element's language to determine proper processing or rendering (e.g. in
  the selection of appropriate fonts or pronunciations, for dictionary selection, or for the user
  interfaces of form controls such as date pickers). <!--User agents must not use the element's
  language to determine text directionality. (commented out because text directionality is a
  rendering-level concern.)--></p>

  <!-- Date pickers would use the language information for determining the language of months, for
  example. They should use the page's _locale_ to figure out the format itself, not the language.
  There's currently no way to determine the page's locale except by guessing from the charset and
  language... -->

  <hr>

  <p>The <dfn attribute for="HTMLElement"><code data-x="dom-lang">lang</code></dfn> IDL attribute
  must <span>reflect</span> the <code data-x="attr-lang">lang</code> content attribute in no
  namespace.</p>

  </div>



  <h5>The <code data-x="attr-translate">translate</code> attribute</h5>

  <!-- v2: a way to translate the declensions of the word(s), but keep the actual roots the same
           for examples, see https://www.w3.org/Bugs/Public/show_bug.cgi?id=17954 -->

  <p>The <dfn element-attr for="html-global"><code data-x="attr-translate">translate</code></dfn>
  attribute is an <span>enumerated attribute</span> that is used to specify whether an element's
  attribute values and the values of its <code>Text</code> node children are to be translated when
  the page is localized, or whether to leave them unchanged.</p>

  <p>The attribute's keywords are the empty string, <code data-x="">yes</code>, and <code
  data-x="">no</code>. The empty string and the <code data-x="">yes</code> keyword map to the
  <i>yes</i> state. The <code data-x="">no</code> keyword maps to the <i>no</i> state. In addition,
  there is a third state, the <i>inherit</i> state, which is the <i
  data-x="missing value default">missing value default</i> and the <i
  data-x="invalid value default">invalid value default</i>.</p>

  <p>Each element (even non-HTML elements) has a <dfn>translation mode</dfn>, which is in either the
  <span>translate-enabled</span> state or the <span>no-translate</span> state. If an <span
  data-x="HTML elements">HTML element</span>'s <code data-x="attr-translate">translate</code>
  attribute is in the <i>yes</i> state, then the element's <span>translation mode</span> is in the
  <span>translate-enabled</span> state; otherwise, if the element's <code
  data-x="attr-translate">translate</code> attribute is in the <i>no</i> state, then the element's
  <span>translation mode</span> is in the <span>no-translate</span> state. Otherwise, either the
  element's <code data-x="attr-translate">translate</code> attribute is in the <i>inherit</i> state,
  or the element is not an <span data-x="HTML elements">HTML element</span> and thus does not have a
  <code data-x="attr-translate">translate</code> attribute; in either case, the element's
  <span>translation mode</span> is in the same state as its <span>parent element</span>'s, if any,
  or in the <span>translate-enabled</span> state, if the element's <span>parent element</span> is
  null.</p>

  <p>When an element is in the <dfn>translate-enabled</dfn> state, the element's <span>translatable
  attributes</span> and the values of its <code>Text</code> node children are to be translated when
  the page is localized.</p>

  <p>When an element is in the <dfn>no-translate</dfn> state, the element's attribute values and the
  values of its <code>Text</code> node children are to be left as-is when the page is localized,
  e.g. because the element contains a person's name or a name of a computer program.</p>

  <p>The following attributes are <dfn>translatable attributes</dfn>:</p>

  <ul class="brief">
   <li><code data-x="attr-th-abbr">abbr</code> on <code>th</code> elements</li>
   <li><code data-x="">alt</code> on <code data-x="attr-area-alt">area</code>,
                                     <code data-x="attr-img-alt">img</code>, and
                                     <code data-x="attr-input-alt">input</code> elements</li>
   <li><code data-x="attr-meta-content">content</code> on <code>meta</code> elements, if the <code data-x="attr-meta-name">name</code> attribute specifies a metadata name whose value is known to be translatable</li>
   <li><code data-x="attr-hyperlink-download">download</code> on <code>a</code> and
                                                                 <code>area</code> elements</li>
   <li><code data-x="">label</code> on <code data-x="attr-optgroup-label">optgroup</code>,
                                       <code data-x="attr-option-label">option</code>, and
                                       <code data-x="attr-track-label">track</code> elements</li>
   <li><code data-x="attr-lang">lang</code> on <span>HTML elements</span>; must be "translated" to match the language used in the translation</li>
   <li><code data-x="">placeholder</code> on <code data-x="attr-input-placeholder">input</code> and
                                             <code data-x="attr-textarea-placeholder">textarea</code> elements</li>
   <li><code data-x="attr-iframe-srcdoc">srcdoc</code> on <code>iframe</code> elements; must be parsed and recursively processed</li>
   <li><code data-x="attr-style">style</code> on <span>HTML elements</span>; must be parsed and
   recursively processed (e.g. for the values of <span>'content'</span> properties)</li>
   <li><code data-x="attr-title">title</code> on all <span>HTML elements</span></li>
   <li><code data-x="attr-input-value">value</code> on <code>input</code> elements with a
       <code data-x="attr-input-type">type</code> attribute in the <span data-x="attr-input-type-button">Button</span> state
       or the <span data-x="attr-input-type-reset">Reset Button</span> state</li>
       <!-- <input value> on other types is excluded since we can't predict if it interferes with server-side processing -->
  </ul>

  <p>Other specifications may define other attributes that are also <span>translatable
  attributes</span>. For example, <cite>ARIA</cite> would define the <code
  data-x="attr-aria-label">aria-label</code> attribute as translatable.</p>

  <div w-nodev>

  <hr>

  <p>The <dfn attribute for="HTMLElement"><code data-x="dom-translate">translate</code></dfn> IDL
  attribute must, on getting, return true if the element's <span>translation mode</span> is
  <span>translate-enabled</span>, and false otherwise. On setting, it must set the content
  attribute's value to "<code data-x="">yes</code>" if the new value is true, and set the content
  attribute's value to "<code data-x="">no</code>" otherwise.</p>

  </div>

  <div class="example">

   <p>In this example, everything in the document is to be translated when the page is localized,
   except the sample keyboard input and sample program output:</p>

   <pre><code class="html">&lt;!DOCTYPE HTML>
&lt;html lang=en> &lt;!-- default on the document element is translate=yes -->
 &lt;head>
  &lt;title>The Bee Game&lt;/title> &lt;!-- implied translate=yes inherited from ancestors -->
 &lt;/head>
 &lt;body>
  &lt;p>The Bee Game is a text adventure game in English.&lt;/p>
  &lt;p>When the game launches, the first thing you should do is type
  &lt;kbd <strong>translate=no</strong>>eat honey&lt;/kbd>. The game will respond with:&lt;/p>
  &lt;pre>&lt;samp <strong>translate=no</strong>>Yum yum! That was some good honey!&lt;/samp>&lt;/pre>
 &lt;/body>
&lt;/html></code></pre>

  </div>



  <h5>The <code data-x="attr-dir">dir</code> attribute</h5>

  <p>The <dfn element-attr for="html-global"><code data-x="attr-dir">dir</code></dfn> attribute
  specifies the element's text directionality. The attribute is an <span>enumerated attribute</span>
  with the following keywords and states:</p>

  <dl>
   <dt>The <dfn attr-value for="html-global/dir"><code data-x="attr-dir-ltr">ltr</code></dfn>
   keyword, which maps to the <dfn data-x="attr-dir-ltr-state">ltr</dfn> state</dt>

   <dd>
    <p>Indicates that the contents of the element are explicitly directionally isolated
    left-to-right text.</p>
   </dd>

   <dt>The <dfn attr-value for="html-global/dir"><code data-x="attr-dir-rtl">rtl</code></dfn>
   keyword, which maps to the <dfn data-x="attr-dir-rtl-state">rtl</dfn> state</dt>

   <dd>
    <p>Indicates that the contents of the element are explicitly directionally isolated
    right-to-left text.</p>
   </dd>

   <dt>The <dfn attr-value for="html-global/dir"><code data-x="attr-dir-auto">auto</code></dfn>
   keyword, which maps to the <dfn data-x="attr-dir-auto-state">auto</dfn> state</dt>

   <dd>
    <p>Indicates that the contents of the element are explicitly directionally isolated text, but
    that the direction is to be determined programmatically using the contents of the element (as
    described below).</p>

    <p class="note">The heuristic used by this state is very crude (it just looks at the first
    character with a strong directionality, in a manner analogous to the Paragraph Level
    determination in the bidirectional algorithm). Authors are urged to only use this value as a
    last resort when the direction of the text is truly unknown and no better server-side heuristic
    can be applied. <ref spec=BIDI></p>

    <p class="note">For <code>textarea</code> and <code>pre</code> elements, the heuristic is
    applied on a per-paragraph level.</p>
   </dd>
  </dl>

  <p>The attribute has no <i data-x="invalid value default">invalid value default</i> and no <i data-x="missing value default">missing value default</i>.</p>

  <hr>

  <p><dfn>The directionality</dfn> of an element (any element, not just an <span data-x="HTML
  elements">HTML element</span>) is either '<dfn data-x="concept-ltr">ltr</dfn>' or '<dfn
  data-x="concept-rtl">rtl</dfn>', and is determined as per the first appropriate set of steps from
  the following list:</p>

  <dl class="switch">


   <dt>If the element's <code data-x="attr-dir">dir</code> attribute is in the <span
   data-x="attr-dir-ltr-state">ltr</span> state</dt>

   <dt>If the element is a <span>document element</span> and the <code data-x="attr-dir">dir</code>
   attribute is not in a defined state (i.e. it is not present or has an invalid value)</dt>

   <dt>If the element is an <code>input</code> element whose <code
   data-x="attr-input-type">type</code> attribute is in the <span
   data-x="attr-input-type-tel">Telephone</span> state, and the <code data-x="attr-dir">dir</code>
   attribute is not in a defined state (i.e. it is not present or has an invalid value)</dt>

   <dd><p><span>The directionality</span> of the element is '<span
   data-x="concept-ltr">ltr</span>'.</p></dd>


   <dt>If the element's <code data-x="attr-dir">dir</code> attribute is in the <span
   data-x="attr-dir-rtl-state">rtl</span> state</dt>

   <dd><p><span>The directionality</span> of the element is '<span
   data-x="concept-rtl">rtl</span>'.</p></dd>

   <dt>If the element is an <code>input</code> element whose <code
   data-x="attr-input-type">type</code> attribute is in the <span
   data-x="attr-input-type-text">Text</span>, <span data-x="attr-input-type-search">Search</span>,
   <span data-x="attr-input-type-tel">Telephone</span>, <span
   data-x="attr-input-type-url">URL</span>, or <span data-x="attr-input-type-email">Email</span>
   state, and the <code data-x="attr-dir">dir</code> attribute is in the <span
   data-x="attr-dir-auto-state">auto</span> state</dt>

   <dt>If the element is a <code>textarea</code> element and the <code data-x="attr-dir">dir</code>
   attribute is in the <span data-x="attr-dir-auto-state">auto</span> state</dt>

   <dd>
    <p>If the element's <span data-x="concept-fe-value">value</span> contains a character of
    bidirectional character type AL or R, and there is no character of bidirectional character type
    L anywhere before it in the element's <span data-x="concept-fe-value">value</span>, then
    <span>the directionality</span> of the element is '<span data-x="concept-rtl">rtl</span>'. <ref spec=BIDI></p>

    <p>Otherwise, if the element's <span data-x="concept-fe-value">value</span> is not the empty
    string, or if the element is a <span>document element</span>, <span>the directionality</span> of
    the element is '<span data-x="concept-ltr">ltr</span>'.</p>

    <p>Otherwise, <span>the directionality</span> of the element is the same as the element's parent
    element's <span data-x="the directionality">directionality</span>.</p>
   </dd>



   <dt>If the element's <code data-x="attr-dir">dir</code> attribute is in the <span
   data-x="attr-dir-auto-state">auto</span> state</dt>

   <dt>If the element is a <code>bdi</code> element and the <code data-x="attr-dir">dir</code>
   attribute is not in a defined state (i.e. it is not present or has an invalid value)</dt>

   <dd>
    <p>Find the first character in <span>tree order</span> that matches the following criteria:</p>

    <ul>

     <li><p>The character is from a <code>Text</code> node that is a descendant of the element whose
     <span data-x="the directionality">directionality</span> is being determined.</p></li>

     <li><p>The character is of bidirectional character type L, AL, or R. <ref spec=BIDI></li>

     <li>
      <p>The character is not in a <code>Text</code> node that has an ancestor element that is a
      descendant of the element whose <span data-x="the directionality">directionality</span> is
      being determined and that is either:</p>

      <ul class="brief">
       <li>A <code>bdi</code> element.
       <li>A <code>script</code> element.
       <li>A <code>style</code> element.
       <li>A <code>textarea</code> element.
       <li>An element with a <code data-x="attr-dir">dir</code> attribute in a defined state.
      </ul>
     </li>

    </ul>

    <p>If such a character is found and it is of bidirectional character type AL or R, <span>the
    directionality</span> of the element is '<span data-x="concept-rtl">rtl</span>'.</p>

    <p>If such a character is found and it is of bidirectional character type L, <span>the
    directionality</span> of the element is '<span data-x="concept-ltr">ltr</span>'.</p>

    <p>Otherwise, if the element is a <span>document element</span>, <span>the directionality</span>
    of the element is '<span data-x="concept-ltr">ltr</span>'.</p>

    <p>Otherwise, <span>the directionality</span> of the element is the same as the element's parent
    element's <span data-x="the directionality">directionality</span>.</p>
   </dd>


   <dt>If the element has a parent element and the <code data-x="attr-dir">dir</code> attribute is
   not in a defined state (i.e. it is not present or has an invalid value)</dt>

   <dd><p><span>The directionality</span> of the element is the same as the element's parent
   element's <span data-x="the directionality">directionality</span>.</p></dd>
  </dl>

  <p class="note">Since the <code data-x="attr-dir">dir</code> attribute is only defined for
  <span>HTML elements</span>, it cannot be present on elements from other namespaces. Thus, elements
  from other namespaces always just inherit their <span data-x="the
  directionality">directionality</span> from their parent element, or, if they don't have one,
  default to '<span data-x="concept-ltr">ltr</span>'.</p>

  <div w-nodev>

  <p class="note">This attribute <a href="#bidireq">has rendering requirements involving the
  bidirectional algorithm</a>.</p>

  </div>

  <hr>

  <p>The <dfn data-x="directionality of the attribute">directionality of an attribute</dfn> of an
  <span data-x="HTML elements">HTML element</span>, which is used when the text of that attribute is
  to be included in the rendering in some manner, is determined as per the first appropriate set of
  steps from the following list:</p>

  <dl class="switch">

   <dt>If the attribute is a <span>directionality-capable attribute</span> and the element's <code
   data-x="attr-dir">dir</code> attribute is in the <span data-x="attr-dir-auto-state">auto</span>
   state</dt>

   <dd>
    <p>Find the first character (in logical order) of the attribute's value that is of bidirectional
    character type L, AL, or R. <ref spec=BIDI></p>

    <p>If such a character is found and it is of bidirectional character type AL or R, the
    <span>directionality of the attribute</span> is '<span data-x="concept-rtl">rtl</span>'.</p>

    <p>Otherwise, the <span>directionality of the attribute</span> is '<span
    data-x="concept-ltr">ltr</span>'.</p>
   </dd>

   <dt>Otherwise</dt>

   <dd>The <span>directionality of the attribute</span> is the same as <span data-x="the
   directionality">the element's directionality</span>.</dd>
  </dl>

  <p>The following attributes are <dfn data-x="directionality-capable
  attribute">directionality-capable attributes</dfn>:</p>

  <ul class="brief">
   <li><code data-x="attr-th-abbr">abbr</code> on <code>th</code> elements</li>
   <li><code data-x="">alt</code> on <code data-x="attr-area-alt">area</code>,
                                    <code data-x="attr-img-alt">img</code>, and
                                    <code data-x="attr-input-alt">input</code> elements</li>
   <li><code data-x="attr-meta-content">content</code> on <code>meta</code> elements, if the <code data-x="attr-meta-name">name</code> attribute specifies a metadata name whose value is primarily intended to be human-readable rather than machine-readable</li>
   <li><code data-x="">label</code> on <code data-x="attr-optgroup-label">optgroup</code>,
                                       <code data-x="attr-option-label">option</code>, and
                                       <code data-x="attr-track-label">track</code> elements</li>
   <li><code data-x="">placeholder</code> on <code data-x="attr-input-placeholder">input</code> and
                                            <code data-x="attr-textarea-placeholder">textarea</code> elements</li>
   <li><code data-x="attr-title">title</code> on all <span>HTML elements</span></li>
  </ul>

  <hr>

  <dl class="domintro">
   <dt><code data-x=""><var>document</var>.<span subdfn data-x="dom-dir">dir</span> [ = <var>value</var> ]</code></dt>
   <dd>
    <p>Returns <span>the <code>html</code> element</span>'s <code data-x="attr-dir">dir</code>
    attribute's value, if any.</p>

    <p>Can be set, to either "<code data-x="">ltr</code>", "<code data-x="">rtl</code>", or "<code
    data-x="">auto</code>" to replace <span>the <code>html</code> element</span>'s <code
    data-x="attr-dir">dir</code> attribute's value.</p>

    <p>If there is no <span data-x="the html element"><code>html</code> element</span>, returns the
    empty string and ignores new values.</p>
   </dd>
  </dl>

  <div w-nodev>

  <p>The <dfn attribute for="HTMLElement"><code data-x="dom-dir">dir</code></dfn> IDL attribute on
  an element must <span>reflect</span> the <code data-x="attr-dir">dir</code> content attribute of
  that element, <span>limited to only known values</span>.</p>

  <p>The <dfn attribute for="Document"><code data-x="dom-document-dir">dir</code></dfn> IDL
  attribute on <code>Document</code> objects must <span>reflect</span> the <code
  data-x="attr-dir">dir</code> content attribute of <span>the <code>html</code> element</span>, if
  any, <span>limited to only known values</span>. If there is no such element, then the attribute
  must return the empty string and do nothing on setting.</p>

  </div>

  <p class="note">Authors are strongly encouraged to use the <code data-x="attr-dir">dir</code>
  attribute to indicate text direction rather than using CSS, since that way their documents will
  continue to render correctly even in the absence of CSS (e.g. as interpreted by search
  engines).</p>

  <div class="example">

   <p>This markup fragment is of an IM conversation.</p>

   <pre><code class="html">&lt;p dir=auto class="u1">&lt;b>&lt;bdi>Student&lt;/bdi>:&lt;/b> How do you write "What's your name?" in Arabic?&lt;/p>
&lt;p dir=auto class="u2">&lt;b>&lt;bdi>Teacher&lt;/bdi>:&lt;/b> &#x645;&#x627; &#x627;&#x633;&#x645;&#x643;&#x61f;&lt;/p>
&lt;p dir=auto class="u1">&lt;b>&lt;bdi>Student&lt;/bdi>:&lt;/b> Thanks.&lt;/p>
&lt;p dir=auto class="u2">&lt;b>&lt;bdi>Teacher&lt;/bdi>:&lt;/b> That's written "&#x634;&#x643;&#x631;&#x64b;&#x627;".&lt;/p>
&lt;p dir=auto class="u2">&lt;b>&lt;bdi>Teacher&lt;/bdi>:&lt;/b> Do you know how to write "Please"?&lt;/p>
&lt;p dir=auto class="u1">&lt;b>&lt;bdi>Student&lt;/bdi>:&lt;/b> "&#x645;&#x646; &#x641;&#x636;&#x644;&#x643;", right?&lt;/p></code></pre>

<!--
<!DOCTYPE html>
<style>
 div { border: groove #FFFF99; padding: 0.25em; width: 22em; background: #FFFFEE; color: black; }
 p { margin: 0.25em 0; font: 1em/1 InaiMathi; color: purple; }
 .u1 { color: teal; }
</style>
<div>
<p dir=ltr class="u1"><b><bdi>Student</bdi>:</b> How do you write "What's your name?" in Arabic?</p>
<p dir=rtl class="u2"><b><bdi>Teacher</bdi>:</b> &#x645;&#x627; &#x627;&#x633;&#x645;&#x643;&#x61f;</p>
<p dir=ltr class="u1"><b><bdi>Student</bdi>:</b> Thanks.</p>
<p dir=ltr class="u2"><b><bdi>Teacher</bdi>:</b> That's written "&#x634;&#x643;&#x631;&#x64b;&#x627;".</p>
<p dir=ltr class="u2"><b><bdi>Teacher</bdi>:</b> Do you know how to write "Please"?</p>
<p dir=rtl class="u1"><b><bdi>Student</bdi>:</b> "&#x645;&#x646; &#x641;&#x636;&#x644;&#x643;", right?</p>
-->

   <p>Given a suitable style sheet and the default alignment styles for the <code>p</code> element,
   namely to align the text to the <i>start edge</i> of the paragraph, the resulting rendering could
   be as follows:</p>

   <p><img src="/images/im.png" alt="Each paragraph rendered as a separate block, with the paragraphs left-aligned except the second paragraph and the last one, which would be right aligned, with the usernames ('Student' and 'Teacher' in this example) flush right, with a colon to their left, and the text first to the left of that." width=366 height=157></p>

   <p>As noted earlier, the <code data-x="attr-dir-auto">auto</code> value is not a panacea. The
   final paragraph in this example is misinterpreted as being right-to-left text, since it begins
   with an Arabic character, which causes the "right?" to be to the left of the Arabic text.</p>

  </div>



  <h5>The <code data-x="attr-style">style</code> attribute</h5>

  <p>All <span>HTML elements</span> may have the <dfn element-attr for="html-global"><code
  data-x="attr-style">style</code></dfn> content attribute set. This is a <span
  data-x="css-styling-attribute">style attribute</span> as defined by <cite>CSS Style
  Attributes</cite>. <ref spec=CSSATTR></p>

  <div w-nodev>

  <p>In user agents that support CSS, the attribute's value must be parsed when the attribute is
  added or has its value changed<!-- so dynamic changes to the base URL don't affect the CSS -->,
  according to the rules given for <span data-x="css-styling-attribute">style attributes</span>.
  <ref spec=CSSATTR></p>

  <p>However, if the <span>Should element's inline behavior be blocked by Content Security
  Policy?</span> algorithm returns "<code data-x="">Blocked</code>" when executed upon the
  attribute's <span>element</span>, "<code data-x="">style attribute</code>", and the attribute's
  value, then the style rules defined in the attribute's value must not be applied to the
  <span>element</span>. <ref spec=CSP></p>

  </div>

  <p>Documents that use <code data-x="attr-style">style</code> attributes on any of their elements
  must still be comprehensible and usable if those attributes were removed.</p>

  <p class="note">In particular, using the <code data-x="attr-style">style</code> attribute to hide
  and show content, or to convey meaning that is otherwise not included in the document, is
  non-conforming. (To hide and show content, use the <code data-x="attr-hidden">hidden</code>
  attribute.)</p>

  <hr>

  <dl class="domintro">
   <dt><code data-x=""><var>element</var>.<span subdfn data-x="dom-style">style</span></code></dt>
   <dd><p>Returns a <code>CSSStyleDeclaration</code> object for the element's <code
   data-x="attr-style">style</code> attribute.</p></dd>
  </dl>

  <div w-nodev>

  <p>The <code data-x="dom-style">style</code> IDL attribute is defined in <cite>CSS Object Model</cite>. <ref
  spec=CSSOM></p>

  </div>

  <div class="example">

   <p>In the following example, the words that refer to colors are marked up using the
   <code>span</code> element and the <code data-x="attr-style">style</code> attribute to make those
   words show up in the relevant colors in visual media.</p>

   <pre><code class="html">&lt;p>My sweat suit is &lt;span style="color: green; background:
transparent">green&lt;/span> and my eyes are &lt;span style="color: blue;
background: transparent">blue&lt;/span>.&lt;/p></code></pre>

  </div>



  <h5><dfn>Embedding custom non-visible data</dfn> with the <code data-x="attr-data-*">data-*</code> attributes</h5>

  <p>A <dfn>custom data attribute</dfn> is an attribute in no namespace whose name starts with the
  string "<dfn><code data-x="attr-data-*">data-</code></dfn>", has at least one character after the
  hyphen, is <span>XML-compatible</span>, and contains no <span data-x="ASCII upper alpha">ASCII
  upper alphas</span>.</p>

  <p class="note">All attribute names on <span>HTML elements</span> in <span>HTML documents</span>
  get ASCII-lowercased automatically, so the restriction on ASCII uppercase letters doesn't affect
  such documents.</p>

  <p><span data-x="custom data attribute">Custom data attributes</span> are intended to store custom
  data, state, annotations, and similar, private to the page or application, for which there are no
  more appropriate attributes or elements.</p>

  <p>These attributes are not intended for use by software that is not known to the administrators
  of the site that uses the attributes. For generic extensions that are to be used by multiple
  independent tools, either this specification should be extended to provide the feature explicitly,
  or a technology like <span>microdata</span> should be used (with a standardized vocabulary).</p>

  <div class="example">

   <p>For instance, a site about music could annotate list items representing tracks in an album
   with custom data attributes containing the length of each track. This information could then be
   used by the site itself to allow the user to sort the list by track length, or to filter the list
   for tracks of certain lengths.</p>

   <pre><code class="html">&lt;ol>
 &lt;li data-length="2m11s">Beyond The Sea&lt;/li>
 ...
&lt;/ol></code></pre>

   <p>It would be inappropriate, however, for the user to use generic software not associated with
   that music site to search for tracks of a certain length by looking at this data.</p>

   <p>This is because these attributes are intended for use by the site's own scripts, and are not a
   generic extension mechanism for publicly-usable metadata.</p>

  </div>

  <div class="example">

   <p>Similarly, a page author could write markup that provides information for a translation tool
   that they are intending to use:</p>

   <pre><code class="html">&lt;p>The third &lt;span data-mytrans-de="Anspruch">claim&lt;/span> covers the case of &lt;span
translate="no">HTML&lt;/span> markup.&lt;/p></code></pre>

   <p>In this example, the "<code data-x="">data-mytrans-de</code>" attribute gives specific text
   for the MyTrans product to use when translating the phrase "claim" to German. However, the
   standard <code data-x="attr-translate">translate</code> attribute is used to tell it that in all
   languages, "HTML" is to remain unchanged. When a standard attribute is available, there is no
   need for a <span>custom data attribute</span> to be used.</p>

  </div>

  <div class="example">

   <p>In this example, custom data attributes are used to store the result of a feature detection
   for <code>PaymentRequest</code>, which could be used in CSS to style a checkout page
   differently.</p>

   <pre><code class="html">&lt;script>
 if ('PaymentRequest' in window) {
   document.documentElement.dataset.hasPaymentRequest = '';
 }
&lt;/script></code></pre>

   <p>Here, the <code data-x="">data-has-payment-request</code> attribute is effectively being used
   as a <span>boolean attribute</span>; it is enough to check the presence of the attribute.
   However, if the author so wishes, it could later be populated with some value, maybe to indicate
   limited functionality of the feature.</p>

  </div>

  <p>Every <span data-x="HTML elements">HTML element</span> may have any number of <span
  data-x="custom data attribute">custom data attributes</span> specified, with any value.</p>

  <p>Authors should carefully design such extensions so that when the attributes are ignored and any
  associated CSS dropped, the page is still usable.</p>

  <div w-nodev>

  <p>User agents must not derive any implementation behavior from these attributes or values.
  Specifications intended for user agents must not define these attributes to have any meaningful
  values.</p>

  </div>

  <p>JavaScript libraries may use the <span data-x="custom data attribute">custom data
  attributes</span>, as they are considered to be part of the page on which they are used. Authors
  of libraries that are reused by many authors are encouraged to include their name in the attribute
  names, to reduce the risk of clashes. Where it makes sense, library authors are also encouraged to
  make the exact name used in the attribute names customizable, so that libraries whose authors
  unknowingly picked the same name can be used on the same page, and so that multiple versions of a
  particular library can be used on the same page even when those versions are not mutually
  compatible.</p>

  <div class="example">

   <p>For example, a library called "DoQuery" could use attribute names like <code
   data-x="">data-doquery-range</code>, and a library called "jJo" could use attributes names like
   <code data-x="">data-jjo-range</code>. The jJo library could also provide an API to set which
   prefix to use (e.g. <code data-x="">J.setDataPrefix('j2')</code>, making the attributes have names
   like <code data-x="">data-j2-range</code>).</p>

  </div>

  <hr>

  <dl class="domintro">
   <dt><code data-x=""><var>element</var>.<span subdfn data-x="dom-dataset">dataset</span></code></dt>
   <dd>
    <p>Returns a <code>DOMStringMap</code> object for the element's <code
    data-x="attr-data-*">data-*</code> attributes.</p>

    <p>Hyphenated names become camel-cased. For example, <code data-x="">data-foo-bar=""</code>
    becomes <code data-x="">element.dataset.fooBar</code>.</p>
   </dd>
  </dl>

  <div w-nodev>

  <p>The <dfn attribute for="HTMLOrSVGElement"><code data-x="dom-dataset">dataset</code></dfn> IDL
  attribute provides convenient accessors for all the <code data-x="attr-data-*">data-*</code>
  attributes on an element. On getting, the <code data-x="dom-dataset">dataset</code> IDL attribute
  must return a <code>DOMStringMap</code> whose associated element is this element.</p>

  </div>

  <p>The <code>DOMStringMap</code> interface is used for the <code
  data-x="dom-dataset">dataset</code> attribute. Each <code>DOMStringMap</code> has an <dfn
  data-x="concept-DOMStringMap-element">associated element</dfn>.</p>

  <pre><code class="idl">[Exposed=Window,
 <span>LegacyOverrideBuiltIns</span>]
interface <dfn interface>DOMStringMap</dfn> {
  <a href="#dom-domstringmap-nameditem">getter</a> DOMString (DOMString name);
  [<span>CEReactions</span>] <a href="#dom-domstringmap-setitem">setter</a> undefined (DOMString name, DOMString value);
  [<span>CEReactions</span>] <a href="#dom-domstringmap-removeitem">deleter</a> undefined (DOMString name);
};</code></pre>

  <div w-nodev>

  <p>To <dfn data-x="concept-DOMStringMap-pairs">get a <code>DOMStringMap</code>'s name-value
  pairs</dfn>, run the following algorithm:</p>

  <ol>
   <li><p>Let <var>list</var> be an empty list of name-value pairs.</p></li>

   <li><p>For each content attribute on the <code>DOMStringMap</code>'s <span
   data-x="concept-DOMStringMap-element">associated element</span> whose first five characters are
   the string "<code data-x="">data-</code>" and whose remaining characters (if any) do not include
   any <span data-x="ASCII upper alpha">ASCII upper alphas</span>, in the order that those
   attributes are listed in the element's <span>attribute list</span>, add a name-value pair to
   <var>list</var> whose name is the attribute's name with the first five characters removed and
   whose value is the attribute's value.</p></li>

   <li><p>For each name in <var>list</var>, for each U+002D HYPHEN-MINUS character (-) in the name
   that is followed by an <span>ASCII lower alpha</span>, remove the U+002D HYPHEN-MINUS character
   (-) and replace the character that followed it by the same character <span>converted to ASCII
   uppercase</span>.</p></li>

   <li><p>Return <var>list</var>.</p></li>
  </ol>

  <p>The <span>supported property names</span> on a <code>DOMStringMap</code> object at any instant
  are the names of each pair returned from <span data-x="concept-DOMStringMap-pairs">getting the
  <code>DOMStringMap</code>'s name-value pairs</span> at that instant, in the order returned.</p>

  <p id="dom-domstringmap-nameditem">To <span>determine the value of a named property</span>
  <var>name</var> for a <code>DOMStringMap</code>, return the value component of the name-value pair
  whose name component is <var>name</var> in the list returned from <span
  data-x="concept-DOMStringMap-pairs">getting the <code>DOMStringMap</code>'s name-value
  pairs</span>.</p>

  <p id="dom-domstringmap-setitem">To <span>set the value of a new named property</span> or
  <span>set the value of an existing named property</span> for a <code>DOMStringMap</code>, given a
  property name <var>name</var> and a new value <var>value</var>, run the following steps:</p>

  <ol>
   <li><p>If <var>name</var> contains a U+002D HYPHEN-MINUS character (-) followed by an <span>ASCII
   lower alpha</span>, then throw a <span>"<code>SyntaxError</code>"</span>
   <code>DOMException</code>.</p></li>

   <li><p>For each <span>ASCII upper alpha</span> in <var>name</var>, insert a U+002D HYPHEN-MINUS
   character (-) before the character and replace the character with the same character
   <span>converted to ASCII lowercase</span>.</p></li>

   <li><p>Insert the string <code data-x="">data-</code> at the front of <var>name</var>.</p></li>

   <li><p>If <var>name</var> does not match the XML <code data-x="xml-Name">Name</code> production,
   throw an <span>"<code>InvalidCharacterError</code>"</span> <code>DOMException</code>.</p></li>

   <li><p><span data-x="concept-element-attributes-set-value">Set an attribute value</span> for the
   <code>DOMStringMap</code>'s <span data-x="concept-DOMStringMap-element">associated element</span>
   using <var>name</var> and <var>value</var>.</p></li>
  </ol>

  <p id="dom-domstringmap-removeitem">To <span>delete an existing named property</span>
  <var>name</var> for a <code>DOMStringMap</code>, run the following steps:</p>

  <ol>
<!--(can't happen while the DOMStringMap deleter has no name)
   <li><p>If <var>name</var> contains a U+002D HYPHEN-MINUS character (-) followed by an <span>ASCII
   lower alpha</span>, then throw a <span>"<code>SyntaxError</code>"</span>
   <code>DOMException</code>.</p></li>
-->

   <li><p>For each <span>ASCII upper alpha</span> in <var>name</var>, insert a U+002D HYPHEN-MINUS
   character (-) before the character and replace the character with the same character
   <span>converted to ASCII lowercase</span>.</p></li>

   <li><p>Insert the string <code data-x="">data-</code> at the front of <var>name</var>.</p></li>

   <li><p><span data-x="concept-element-attributes-remove">Remove an attribute by name</span> given
   <var>name</var> and the <code>DOMStringMap</code>'s <span
   data-x="concept-DOMStringMap-element">associated element</span>.</p></li>
  </ol>

  <p class="note">This algorithm will only get invoked by <cite>Web IDL</cite> for names that
  are given by the earlier algorithm for <span data-x="concept-DOMStringMap-pairs">getting the
  <code>DOMStringMap</code>'s name-value pairs</span>. <ref
  spec=WEBIDL></p>

  </div>

  <div class="example">

   <p>If a web page wanted an element to represent a space ship, e.g. as part of a game, it would
   have to use the <code data-x="attr-class">class</code> attribute along with <code
   data-x="attr-data-*">data-*</code> attributes:</p>

   <pre><code class="html">&lt;div class="spaceship" data-ship-id="92432"
     data-weapons="laser 2" data-shields="50%"
     data-<!---->x="30" data-y="10" data-z="90">
 &lt;button class="fire"
         onclick="spaceships[this.parentNode.dataset.shipId].fire()">
  Fire
 &lt;/button>
&lt;/div></code></pre>

   <p>Notice how the hyphenated attribute name becomes camel-cased in the API.</p>

  </div>

  <div class="example">

   <p>Given the following fragment and elements with similar constructions:</p>

   <pre><code class="html">&lt;img class="tower" id="tower5" data-<!---->x="12" data-y="5"
     data-ai="robotarget" data-hp="46" data-ability="flames"
     src="towers/rocket.png" alt="Rocket Tower"></code></pre>

   <p>...one could imagine a function <code
   data-x="">splashDamage()</code> that takes some arguments, the first
   of which is the element to process:</p>

   <pre><code class="js">function splashDamage(node, x, y, damage) {
  if (node.classList.contains('tower') && // checking the 'class' attribute
      node.dataset.x == x && // reading the 'data-x' attribute
      node.dataset.y == y) { // reading the 'data-y' attribute
    var hp = parseInt(node.dataset.hp); // reading the 'data-hp' attribute
    hp = hp - damage;
    if (hp &lt; 0) {
      hp = 0;
      node.dataset.ai = 'dead'; // setting the 'data-ai' attribute
      delete node.dataset.ability; // removing the 'data-ability' attribute
    }
    node.dataset.hp = hp; // setting the 'data-hp' attribute
  }
}</code></pre>

  </div>


  <h4 id="the-innertext-idl-attribute">The <code data-x="dom-innerText">innerText</code> and <code
  data-x="dom-outerText">outerText</code> properties</h4>

  <dl class="domintro">
   <dt><code data-x=""><var>element</var>.<span subdfn data-x="dom-innerText">innerText</span> [ = <var>value</var> ]</code></dt>
   <dd>
    <p>Returns the element's text content "as rendered".</p>

    <p>Can be set, to replace the element's children with the given value, but with line breaks
    converted to <code>br</code> elements.</p>
   </dd>

   <dt><code data-x=""><var>element</var>.<span subdfn data-x="dom-outerText">outerText</span> [ = <var>value</var> ]</code></dt>
   <dd>
    <p>Returns the element's text content "as rendered".</p>

    <p>Can be set, to replace the element with the given value, but with line breaks converted to
    <code>br</code> elements.</p>
   </dd>
  </dl>

  <div w-nodev>

  <p>The <dfn attribute for="HTMLElement"><code data-x="dom-innerText">innerText</code></dfn> and
  <dfn attribute for="HTMLElement"><code data-x="dom-outerText">outerText</code></dfn> getter steps
  are:</p>

  <ol>
   <li>
    <p>If <span>this</span> is not <span>being rendered</span> or if the user agent is a non-CSS
    user agent, then return <span>this</span>'s <span>descendant text content</span>.</p>

    <p class="note">This step can produce surprising results, as when the <code
    data-x="dom-innerText">innerText</code> getter is invoked on an element not <span>being
    rendered</span>, its text contents are returned, but when accessed on an element that is
    <span>being rendered</span>, all of its children that are not <span>being rendered</span> have
    their text contents ignored.</p>
   </li>

   <li><p>Let <var>results</var> be a new empty <span>list</span>.</p></li>

   <li>
    <p>For each child node <var>node</var> of <span>this</span>:</p>

    <ol>
     <li><p>Let <var>current</var> be the <span>list</span> resulting in running the
     <span>rendered text collection steps</span> with <var>node</var>. Each item in
     <var>results</var> will either be a <span>string</span> or a positive integer (a <i>required
     line break count</i>).</p>

     <p class="note">Intuitively, a <i>required line break count</i> item means that a certain
     number of line breaks appear at that point, but they can be collapsed with the line breaks
     induced by adjacent <i>required line break count</i> items, reminiscent to CSS
     margin-collapsing.</p>

     <li><p>For each item <var>item</var> in <var>current</var>, append <var>item</var> to
     <var>results</var>.</p></li>
    </ol>
   </li>

   <li><p><span data-x="list remove">Remove</span> any items from <var>results</var> that are the
   empty string.</p></li>

   <li><p><span data-x="list remove">Remove</span> any runs of consecutive <i>required line break
   count</i> items at the start or end of <var>results</var>.</p></li>

   <li><p><span data-x="list replace">Replace</span> each remaining run of consecutive <i>required
   line break count</i> items with a string consisting of as many U+000A LF code points as the
   maximum of the values in the <i>required line break count</i> items.</p></li>

   <li><p>Return the concatenation of the string items in <var>results</var>.</p></li>
  </ol>

  <p>The <dfn>rendered text collection steps</dfn>, given a <span>node</span> <var>node</var>,
  are as follows:</p>

  <ol>
   <li><p>Let <var>items</var> be the result of running the <span>rendered text collection
   steps</span> with each child node of <var>node</var> in <span>tree order</span>, and then
   concatenating the results to a single <span>list</span>.</p></li>

   <li><p>If <var>node</var>'s <span>computed value</span> of <span>'visibility'</span> is not
   'visible', then return <var>items</var>.</p></li>

   <li>
    <p>If <var>node</var> is not <span>being rendered</span>, then return <var>items</var>. For the
    purpose of this step, the following elements must act as described if the
    <span>computed value</span> of the <span>'display'</span> property is not 'none':</p>

    <ul class="brief">
     <li><code>select</code> elements have an associated non-replaced inline <span>CSS box</span>
     whose child boxes include only those of <code>optgroup</code> and <code>option</code> element
     child nodes;</li>

     <li><code>optgroup</code> elements have an associated non-replaced block-level <span>CSS
     box</span> whose child boxes include only those of <code>option</code> element child nodes;
     and</li>

     <li><code>option</code> element have an associated non-replaced block-level <span>CSS
     box</span> whose child boxes are as normal for non-replaced block-level <span data-x="CSS
     box">CSS boxes</span>.</li>
    </ul>

    <p class="note"><var>items</var> can be non-empty due to 'display:contents'.</p>
   </li>

   <li><p>If <var>node</var> is a <code>Text</code> node, then for each CSS text box produced by
   <var>node</var>, in content order, compute the text of the box after application of the CSS
   <span>'white-space'</span> processing rules and <span>'text-transform'</span> rules, set
   <var>items</var> to the <span>list</span> of the resulting strings, and return <var>items</var>.
   The CSS <span>'white-space'</span> processing rules are slightly modified: collapsible spaces at
   the end of lines are always collapsed, but they are only removed if the line is the last line of
   the block, or it ends with a <code>br</code> element. Soft hyphens should be preserved. <ref
   spec=CSSTEXT></p></li>

   <li><p>If <var>node</var> is a <code>br</code> element, then <span data-x="list
   append">append</span> a string containing a single U+000A LF code point to
   <var>items</var>.</p></li>

   <li><p>If <var>node</var>'s <span>computed value</span> of <span>'display'</span> is
   <span>'table-cell'</span>, and <var>node</var>'s <span>CSS box</span> is not the last
   <span>'table-cell'</span> box of its enclosing <span>'table-row'</span> box, then <span
   data-x="list append">append</span> a string containing a single U+0009 TAB code point to
   <var>items</var>.</p></li>

   <li><p>If <var>node</var>'s <span>computed value</span> of <span>'display'</span> is
   <span>'table-row'</span>, and <var>node</var>'s <span>CSS box</span> is not the last
   <span>'table-row'</span> box of the nearest ancestor <span>'table'</span> box, then <span
   data-x="list append">append</span> a string containing a single U+000A LF code point to
   <var>items</var>.</p></li>

   <li><p>If <var>node</var> is a <code>p</code> element, then <span data-x="list
   append">append</span> 2 (a <i>required line break count</i>) at the beginning and end of
   <var>items</var>.</p></li>

   <li>
    <p>If <var>node</var>'s <span>used value</span> of <span>'display'</span> is
    <span>block-level</span> or <span>'table-caption'</span>, then <span data-x="list
    append">append</span> 1 (a <i>required line break count</i>) at the beginning and end of
    <var>items</var>. <ref spec=CSSDISPLAY></p>

    <p class="note">Floats and absolutely-positioned elements fall into this category.</p>
   </li>

   <li><p>Return <var>items</var>.</p></li>
  </ol>

  <p class="note">Note that descendant nodes of most replaced elements (e.g., <code>textarea</code>,
  <code>input</code>, and <code>video</code> &mdash; but not <code>button</code>) are not rendered
  by CSS, strictly speaking, and therefore have no <span data-x="CSS box">CSS boxes</span> for the
  purposes of this algorithm.</p>

  <p class="XXX">This algorithm is amenable to being generalized to work on <span
  data-x="concept-range">ranges</span>. Then we can use it as the basis for <code>Selection</code>'s
  stringifier and maybe expose it directly on <span data-x="concept-range">ranges</span>. See <a
  href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=10583">Bugzilla bug 10583</a>.</p>

  <hr>

  <p>The <code data-x="dom-innerText">innerText</code> setter steps are:</p>

  <ol>
   <li><p>Let <var>fragment</var> be the <span>rendered text fragment</span> for the given value
   given <span>this</span>'s <span>node document</span>.</p></li>

   <li><p><span data-x="concept-node-replace-all">Replace all</span> with <var>fragment</var> within
   <span>this</span>.</p></li>
  </ol>

  <p>The <code data-x="dom-outerText">outerText</code> setter steps are:</p>

  <ol>
   <li><p>If <span>this</span>'s parent is null, then throw a
   <span>"<code>NoModificationAllowedError</code>"</span> <code>DOMException</code>.</p></li>

   <li><p>Let <var>next</var> be <span>this</span>'s <span>next sibling</span>.</p></li>

   <li><p>Let <var>previous</var> be <span>this</span>'s <span>previous sibling</span>.</p></li>

   <li><p>Let <var>fragment</var> be the <span>rendered text fragment</span> for the given value
   given <span>this</span>'s <span>node document</span>.</p></li>

   <li><p>If <var>fragment</var> has no <span data-x="concept-tree-child">children</span>, then
   <span data-x="concept-node-append">append</span> a new <code>Text</code> node whose <span
   data-x="concept-cd-data">data</span> is the empty string and <span>node document</span> is
   <span>this</span>'s <span>node document</span> to <var>fragment</var>.</p></li>

   <li><p><span data-x="concept-node-replace">Replace</span> <span>this</span> with
   <var>fragment</var> within <span>this</span>'s parent.</p></li>

   <li><p>If <var>next</var> is non-null and <var>next</var>'s <span>previous sibling</span> is a
   <code>Text</code> node, then <span>merge with the next text node</span> given <var>next</var>'s
   <span>previous sibling</span>.</p></li>

   <li><p>If <var>previous</var> is a <code>Text</code> node, then <span>merge with the next text
   node</span> given <var>previous</var>.</p></li>
  </ol>

  <p>The <dfn>rendered text fragment</dfn> for a string <var>input</var> given a
  <code>Document</code> <var>document</var> is the result of running the following steps:</p>

  <ol>
   <li><p>Let <var>fragment</var> be a new <code>DocumentFragment</code> whose <span>node
   document</span> is <var>document</var>.</p></li>

   <li><p>Let <var>position</var> be a <span>position variable</span> for <var>input</var>,
   initially pointing at the start of <var>input</var>.</p></li>

   <li><p>Let <var>text</var> be the empty string.</p></li>

   <li>
    <p>While <var>position</var> is not past the end of <var>input</var>:</p>

    <ol>
     <li><p><span>Collect a sequence of code points</span> that are not U+000A LF or U+000D CR from
     <var>input</var> given <var>position</var>, and set <var>text</var> to the result.</p></li>

     <li><p>If <var>text</var> is not the empty string, then <span
     data-x="concept-node-append">append</span> a new <code>Text</code> node whose <span
     data-x="concept-cd-data">data</span> is <var>text</var> and <span>node document</span> is
     <var>document</var> to <var>fragment</var>.</p></li>

     <li>
      <p>While <var>position</var> is not past the end of <var>input</var>, and the code point at
      <var>position</var> is either U+000A LF or U+000D CR:</p>

      <ol>
       <li><p>If the code point at <var>position</var> is U+000D CR and the next code point is
       U+000A LF, then advance <var>position</var> to the next code point in
       <var>input</var>.</p></li>

       <li><p>Advance <var>position</var> to the next code point in <var>input</var>.</p></li>

       <li><p><span data-x="concept-node-append">Append</span> the result of <span data-x="create an
       element">creating an element</span> given <var>document</var>, <code>br</code>, and the
       <span>HTML namespace</span> to <var>fragment</var>.</p></li>
      </ol>
     </li>
    </ol>
   </li>

   <li><p>Return <var>fragment</var>.</p></li>
  </ol>

  <p>To <dfn>merge with the next text node</dfn> given a <code>Text</code> node <var>node</var>:</p>

  <ol>
   <li><p>Let <var>next</var> be <var>node</var>'s <span>next sibling</span>.</p></li>

   <li><p>If <var>next</var> is not a <code>Text</code> node, then return.</p></li>

   <li><p><span>Replace data</span> with <var>node</var>, <var>node</var>'s <span
   data-x="concept-cd-data">data</span>'s <span>length</span>, 0, and <var>next</var>'s <span
   data-x="concept-cd-data">data</span>.</p></li>

   <li>
    <p>If <var>next</var>'s parent is non-null, then <span
    data-x="concept-node-remove">remove</span> <var>next</var>.</p>

    <p class="note">The parent check is necessary as the previous step might have triggered mutation
    events.</p>
   </li>
  </ol>

  </div>

  <h4>Requirements relating to the bidirectional algorithm</h4>

  <div w-nodev>
  <h5>Authoring conformance criteria for bidirectional-algorithm formatting characters</h5>
  </div>

  <p><span>Text content</span> in <span>HTML elements</span> with <code>Text</code> nodes in their
  <span data-x="concept-html-contents">contents</span>, and text in attributes of <span>HTML
  elements</span> that allow free-form text, may contain characters in the ranges U+202A to U+202E
  and U+2066 to U+2069 (the bidirectional-algorithm formatting characters). <ref spec=BIDI></p>

  <p class="note">Authors are encouraged to use the <code data-x="attr-dir">dir</code> attribute, the
  <code>bdo</code> element, and the <code>bdi</code> element, rather than maintaining the
  bidirectional-algorithm formatting characters manually. The bidirectional-algorithm formatting
  characters interact poorly with CSS.</p>


  <div w-nodev>

  <h5>User agent conformance criteria</h5>

  <p>User agents must implement the Unicode bidirectional algorithm to determine the proper ordering
  of characters when rendering documents and parts of documents. <ref spec=BIDI></p>

  <p>The mapping of HTML to the Unicode bidirectional algorithm must be done in one of three ways.
  Either the user agent must implement CSS, including in particular the CSS
  <span>'unicode-bidi'</span>, <span>'direction'</span>, and <span>'content'</span> properties, and
  must have, in its user agent style sheet, the rules using those properties given in this
  specification's <a href="#rendering">rendering</a> section, or, alternatively, the user agent must
  act as if it implemented just the aforementioned properties and had a user agent style sheet that
  included all the aforementioned rules, but without letting style sheets specified in documents
  override them, or, alternatively, the user agent must implement another styling language with
  equivalent semantics. <ref spec=CSSGC></p>

  <p id="bidireq">The following elements and attributes have requirements defined by the <a
  href="#rendering">rendering</a> section that, due to the requirements in this section, are
  requirements on all user agents (not just those that <a href="#renderingUA">support the suggested
  default rendering</a>):</p>

  <ul class="brief">
   <li><code data-x="attr-dir">dir</code> attribute</li>
   <li><code>bdi</code> element</li>
   <li><code>bdo</code> element</li>
   <li><code>br</code> element</li>
   <li><code>pre</code> element</li>
   <li><code>textarea</code> element</li>
   <li><code>wbr</code> element</li>
  </ul>

  </div>

  <div w-nodev>

  <h4 id="wai-aria">Requirements related to ARIA and to platform accessibility APIs</h4>

  <p>User agent requirements for implementing Accessibility API semantics on <span>HTML
  elements</span> are defined in <cite>HTML Accessibility API Mappings</cite>. In addition to the
  rules there, for a <span>custom element</span> <var>element</var>, the default ARIA role
  semantics are determined as follows: <ref spec=HTMLAAM></p>

  <ol>
   <li><p>Let <var>map</var> be <var>element</var>'s <span>internal content attribute
   map</span>.</p></li>

   <li><p>If <var>map</var>["<code data-x="">role</code>"] <span data-x="map exists">exists</span>,
   then return it.</p></li>

   <li><p>Return no role.</p></li>
  </ol>

  <p>Similarly, for a <span>custom element</span> <var>element</var>, the default ARIA state and
  property semantics, for a state or property named <var>stateOrProperty</var>, are determined as
  follows:</p>

  <ol>
   <li>
    <p>If <var>element</var>'s <span>attached internals</span> is non-null:</p>

    <ol>
     <li><p>If <var>element</var>'s <span>attached internals</span>'s <span data-x="attr-associated
     element"><var>stateOrProperty</var>-associated element</span> exists, then return it.</p></li>

     <li><p>If <var>element</var>'s <span>attached internals</span>'s <span data-x="attr-associated
     elements"><var>stateOrProperty</var>-associated elements</span> exist, then return
     them.</p></li>
    </ol>
    <!-- We check these first as they end up being redundantly stored in element's internal content
         attribute map with an empty string value. -->

   <li><p>If <var>element</var>'s <span>internal content attribute
   map</span>[<var>stateOrProperty</var>] <span data-x="map exists">exists</span>, then return
   it.</p></li>

   <li><p>Return the default value for <var>stateOrProperty</var>.</p></li>
  </ol>

  <p class="note">The "default semantics" referred to here are sometimes also called "native",
  "implicit", or "host language" semantics in <cite>ARIA</cite>. <ref spec=ARIA></p>

  <p class="note">One implication of these definitions is that the default semantics can change over
  time. This allows custom elements the same expressivity as built-in elements; e.g., compare to how
  the default ARIA role semantics of an <code>a</code> element change as the <code
  data-x="attr-hyperlink-href">href</code> attribute is added or removed.</p>

  <p>For an example of this in action, see <a href="#custom-elements-accessibility-example">the
  custom elements section</a>.</p>

  <hr>

  <p>Conformance checker requirements for checking use of ARIA <code
  data-x="attr-aria-role">role</code> and <code data-x="attr-aria-*">aria-*</code> attributes on
  <span>HTML elements</span> are defined in <cite>ARIA in HTML</cite>. <ref spec=ARIAHTML></p>

  </div>



  <h2 split-filename="semantics" id="semantics">The elements of HTML</h2>

  <h3 id="the-root-element">The document element</h3>

  <h4 id="the-html-element">The <dfn element><code>html</code></dfn> element</h4>

  <dl class="element">
   <dt><span data-x="concept-element-categories">Categories</span>:</dt>
   <dd>None.</dd>
   <dt><span data-x="concept-element-contexts">Contexts in which this element can be used</span>:</dt>
   <dd>As document's <span>document element</span>.</dd>
   <dd>Wherever a subdocument fragment is allowed in a compound document.</dd>
   <dt><span data-x="concept-element-content-model">Content model</span>:</dt>
   <dd>A <code>head</code> element followed by a <code>body</code> element.</dd>
   <dt><span data-x="concept-element-attributes">Content attributes</span>:</dt>
   <dd><span>Global attributes</span></dd>
   <dt><span
   data-x="concept-element-accessibility-considerations">Accessibility considerations</span>:</dt>
   <dd><a href="https://w3c.github.io/html-aria/#el-html">For authors</a>.</dd>
   <dd><a href="https://w3c.github.io/html-aam/#el-html">For implementers</a>.</dd>
   <dt><span data-x="concept-element-dom">DOM interface</span>:</dt>
   <dd w-nodev>
    <pre><code class="idl">[Exposed=Window]
interface <dfn interface>HTMLHtmlElement</dfn> : <span>HTMLElement</span> {
  [<span>HTMLConstructor</span>] constructor();

  // <a href="#HTMLHtmlElement-partial">also has obsolete members</a>
};</code></pre>
   </dd>
   <dd w-dev>Uses <code>HTMLHtmlElement</code>.</dd>
  </dl>

  <p>The <code>html</code> element <span>represents</span> the root of an HTML document.</p>

  <p>Authors are encouraged to specify a <code data-x="attr-lang">lang</code> attribute on the root
  <code>html</code> element, giving the document's language. This aids speech synthesis tools to
  determine what pronunciations to use, translation tools to determine what rules to use, and so
  forth.</p>

  <div class="example">

   <p>The <code>html</code> element in the following example declares that the document's language
   is English.</p>

   <pre><code class="html">&lt;!DOCTYPE html>
<strong>&lt;html lang="en"></strong>
&lt;head>
&lt;title>Swapping Songs&lt;/title>
&lt;/head>
&lt;body>
&lt;h1>Swapping Songs&lt;/h1>
&lt;p>Tonight I swapped some of the songs I wrote with some friends, who
gave me some of the songs they wrote. I love sharing my music.&lt;/p>
&lt;/body>
<strong>&lt;/html></strong></code></pre>

  </div>




  <h3>Document metadata</h3>

  <h4 id="the-head-element">The <dfn element><code>head</code></dfn> element</h4>

  <dl class="element">
   <dt><span data-x="concept-element-categories">Categories</span>:</dt>
   <dd>None.</dd>
   <dt><span data-x="concept-element-contexts">Contexts in which this element can be used</span>:</dt>
   <dd>As the first element in an <code>html</code> element.</dd>
   <dt><span data-x="concept-element-content-model">Content model</span>:</dt>
   <dd>If the document is <span>an <code>iframe</code> <code data-x="attr-iframe-srcdoc">srcdoc</code> document</span> or if title information is available from a higher-level protocol: Zero or more elements of <span>metadata content</span>, of which no more than one is a <code>title</code> element and no more than one is a <code>base</code> element.</dd>
   <dd>Otherwise: One or more elements of <span>metadata content</span>, of which exactly one is a <code>title</code> element and no more than one is a <code>base</code> element.</dd>
   <dt><span data-x="concept-element-attributes">Content attributes</span>:</dt>
   <dd><span>Global attributes</span></dd>
   <dt><span
   data-x="concept-element-accessibility-considerations">Accessibility considerations</span>:</dt>
   <dd><a href="https://w3c.github.io/html-aria/#el-head">For authors</a>.</dd>
   <dd><a href="https://w3c.github.io/html-aam/#el-head">For implementers</a>.</dd>
   <dt><span data-x="concept-element-dom">DOM interface</span>:</dt>
   <dd w-nodev>
    <pre><code class="idl">[Exposed=Window]
interface <dfn interface>HTMLHeadElement</dfn> : <span>HTMLElement</span> {
  [<span>HTMLConstructor</span>] constructor();
};</code></pre>
   </dd>
   <dd w-dev>Uses <code>HTMLHeadElement</code>.</dd>
  </dl>

  <p>The <code>head</code> element <span>represents</span> a collection of metadata for the
  <code>Document</code>.</p>

  <div class="example">

   <p>The collection of metadata in a <code>head</code> element can be large or small. Here is an
   example of a very short one:</p>

   <pre><code class="html">&lt;!doctype html>
&lt;html lang=en>
 &lt;head>
  &lt;title>A document with a short head&lt;/title>
 &lt;/head>
 &lt;body>
 ...</code></pre>

   <p>Here is an example of a longer one:</p>

   <pre><code class="html">&lt;!DOCTYPE HTML>
&lt;HTML LANG="EN">
 &lt;HEAD>
  &lt;META CHARSET="UTF-8">
  &lt;BASE HREF="https://www.example.com/">
  &lt;TITLE>An application with a long head&lt;/TITLE>
  &lt;LINK REL="STYLESHEET" HREF="default.css">
  &lt;LINK REL="STYLESHEET ALTERNATE" HREF="big.css" TITLE="Big Text">
  &lt;SCRIPT SRC="support.js">&lt;/SCRIPT>
  &lt;META NAME="APPLICATION-NAME" CONTENT="Long headed application">
 &lt;/HEAD>
 &lt;BODY>
 ...</code></pre>

  </div>

  <p class="note">The <code>title</code> element is a required child in most situations, but when a
  higher-level protocol provides title information, e.g., in the subject line of an email when HTML
  is used as an email authoring format, the <code>title</code> element can be omitted.</p>



  <h4 id="the-title-element">The <dfn element><code>title</code></dfn> element</h4>

  <dl class="element">
   <dt><span data-x="concept-element-categories">Categories</span>:</dt>
   <dd><span>Metadata content</span>.</dd>
   <dt><span data-x="concept-element-contexts">Contexts in which this element can be used</span>:</dt>
   <dd>In a <code>head</code> element containing no other <code>title</code> elements.</dd>
   <dt><span data-x="concept-element-content-model">Content model</span>:</dt>
   <dd><span data-x="text content">Text</span> that is not <span>inter-element whitespace</span>.</dd>
   <dt><span data-x="concept-element-attributes">Content attributes</span>:</dt>
   <dd><span>Global attributes</span></dd>
   <dt><span
   data-x="concept-element-accessibility-considerations">Accessibility considerations</span>:</dt>
   <dd><a href="https://w3c.github.io/html-aria/#el-title">For authors</a>.</dd>
   <dd><a href="https://w3c.github.io/html-aam/#el-title">For implementers</a>.</dd>
   <dt><span data-x="concept-element-dom">DOM interface</span>:</dt>
   <dd w-nodev>
    <pre><code class="idl">[Exposed=Window]
interface <dfn interface>HTMLTitleElement</dfn> : <span>HTMLElement</span> {
  [<span>HTMLConstructor</span>] constructor();

  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-title-text">text</span>;
};</code></pre>
   </dd>
   <dd w-dev>Uses <code>HTMLTitleElement</code>.</dd>
  </dl>

  <p>The <code>title</code> element <span>represents</span> the document's title or name. Authors
  should use titles that identify their documents even when they are used out of context, for
  example in a user's history or bookmarks, or in search results. The document's title is often
  different from its first heading, since the first heading does not have to stand alone when taken
  out of context.</p>

  <p>There must be no more than one <code>title</code> element per document.</p>

  <p class="note">If it's reasonable for the <code>Document</code> to have no title, then the
  <code>title</code> element is probably not required. See the <code>head</code> element's content
  model for a description of when the element is required.</p>

  <dl class="domintro">
   <dt><code data-x=""><var>title</var>.<span subdfn data-x="dom-title-text">text</span> [ = <var>value</var> ]</code></dt>

   <dd>
    <p>Returns the <span>child text content</span> of the element.</p>

    <p>Can be set, to replace the element's children with the given value.</p>
   </dd>
  </dl>

  <div w-nodev>

  <p>The <dfn attribute for="HTMLTitleElement"><code data-x="dom-title-text">text</code></dfn>
  attribute's getter must return this <code>title</code> element's <span>child text
  content</span>.</p>

  <p>The <code data-x="dom-title-text">text</code> attribute's setter must <span>string replace
  all</span> with the given value within this <code>title</code> element.</p>

  </div>

  <div class="example">

   <p>Here are some examples of appropriate titles, contrasted with the top-level headings that
   might be used on those same pages.</p>

   <pre><code class="html">  &lt;title>Introduction to The Mating Rituals of Bees&lt;/title>
    ...
  &lt;h1>Introduction&lt;/h1>
  &lt;p>This companion guide to the highly successful
  &lt;cite>Introduction to Medieval Bee-Keeping&lt;/cite> book is...</code></pre>

   <p>The next page might be a part of the same site. Note how the title describes the subject
   matter unambiguously, while the first heading assumes the reader knows what the context is and
   therefore won't wonder if the dances are Salsa or Waltz:</p>

   <pre><code class="html">  &lt;title>Dances used during bee mating rituals&lt;/title>
    ...
  &lt;h1>The Dances&lt;/h1></code></pre>

  </div>

  <p>The string to use as the document's title is given by the <code
  data-x="dom-document-title">document.title</code> IDL attribute.</p>

  <div w-nodev>

  <p>User agents should use the document's title when referring to the document in their user
  interface. When the contents of a <code>title</code> element are used in this way, <span>the
  directionality</span> of that <code>title</code> element should be used to set the directionality
  of the document's title in the user interface.</p>

  </div>


  <h4>The <dfn element><code>base</code></dfn> element</h4>

  <dl class="element">
   <dt><span data-x="concept-element-categories">Categories</span>:</dt>
   <dd><span>Metadata content</span>.</dd>
   <dt><span data-x="concept-element-contexts">Contexts in which this element can be used</span>:</dt>
   <dd>In a <code>head</code> element containing no other <code>base</code> elements.</dd>
   <dt><span data-x="concept-element-content-model">Content model</span>:</dt>
   <dd><span data-x="concept-content-nothing">Nothing</span>.</dd>
   <dt><span data-x="concept-element-attributes">Content attributes</span>:</dt>
   <dd><span>Global attributes</span></dd>
   <dd><code data-x="attr-base-href">href</code></dd>
   <dd><code data-x="attr-base-target">target</code></dd>
   <dt><span
   data-x="concept-element-accessibility-considerations">Accessibility considerations</span>:</dt>
   <dd><a href="https://w3c.github.io/html-aria/#el-base">For authors</a>.</dd>
   <dd><a href="https://w3c.github.io/html-aam/#el-base">For implementers</a>.</dd>
   <dt><span data-x="concept-element-dom">DOM interface</span>:</dt>
   <dd w-nodev>
    <pre><code class="idl">[Exposed=Window]
interface <dfn interface>HTMLBaseElement</dfn> : <span>HTMLElement</span> {
  [<span>HTMLConstructor</span>] constructor();

  [<span>CEReactions</span>] attribute USVString <span data-x="dom-base-href">href</span>;
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-base-target">target</span>;
};</code></pre>
   </dd>
   <dd w-dev>Uses <code>HTMLBaseElement</code>.</dd>
  </dl>

  <p>The <code>base</code> element allows authors to specify the <span>document base URL</span> for
  the purposes of <span data-x="parse a url">parsing URLs</span>, and the name of the default
  <span>navigable</span> for the purposes of <span>following hyperlinks</span>. The element does
  not <span data-x="represents">represent</span> any content beyond this information.</p>

  <p>There must be no more than one <code>base</code> element per document.</p>

  <p>A <code>base</code> element must have either an <code data-x="attr-base-href">href</code>
  attribute, a <code data-x="attr-base-target">target</code> attribute, or both.</p>

  <p>The <dfn element-attr for="base"><code data-x="attr-base-href">href</code></dfn> content
  attribute, if specified, must contain a <span>valid URL potentially surrounded by
  spaces</span>.</p>

  <p>A <code>base</code> element, if it has an <code data-x="attr-base-href">href</code> attribute,
  must come before any other elements in the tree that have attributes defined as taking <span
  data-x="URL">URLs</span>, except the <code>html</code> element (its <code
  data-x="attr-html-manifest">manifest</code> attribute isn't affected by <code>base</code>
  elements).</p>

  <div w-nodev>

  <p class="note">If there are multiple <code>base</code> elements with <code
  data-x="attr-base-href">href</code> attributes, all but the first are ignored.</p>

  </div>

  <p>The <dfn element-attr for="base"><code data-x="attr-base-target">target</code></dfn> attribute,
  if specified, must contain a <span>valid navigable target name or keyword</span>, which specifies
  which <span>navigable</span> is to be used as the default when <span
  data-x="hyperlink">hyperlinks</span> and <span data-x="form">forms</span> in the
  <code>Document</code> cause <span data-x="navigate">navigation</span>.</p>

  <p>A <code>base</code> element, if it has a <code data-x="attr-base-target">target</code>
  attribute, must come before any elements in the tree that represent <span
  data-x="hyperlink">hyperlinks</span>.</p>

  <div w-nodev>

  <p class="note">If there are multiple <code>base</code> elements with <code
  data-x="attr-base-target">target</code> attributes, all but the first are ignored.</p>

  <p>To <dfn>get an element's target</dfn>, given an <code>a</code>, <code>area</code>, or
  <code>form</code> element <var>element</var>, run these steps:

  <ol>
   <li><p>If <var>element</var> has a <code data-x="">target</code> attribute, then return that
   attribute's value.</p></li>

   <li><p>If <var>element</var>'s <span>node document</span> contains a <code>base</code> element
   with a <code data-x="attr-base-target">target</code> attribute, then return the value of the
   <code data-x="attr-base-target">target</code> attribute of the first such <code>base</code>
   element.</p></li>

   <li><p>Return the empty string.</p></li>
  </ol>

  <hr>

  <p>A <code>base</code> element that is the first <code>base</code> element with an <code
  data-x="attr-base-href">href</code> content attribute <span>in a document tree</span> has a
  <dfn>frozen base URL</dfn>. The <span>frozen base URL</span> must be <span>immediately</span>
  <span data-x="set the frozen base URL">set</span> for an element whenever any of the following
  situations occur:</p>

  <ul class="brief">

   <li>The <code>base</code> element becomes the first <code>base</code> element in <span>tree
   order</span> with an <code data-x="attr-base-href">href</code> content attribute in its
   <code>Document</code>.</li>

   <li>The <code>base</code> element is the first <code>base</code> element in <span>tree
   order</span> with an <code data-x="attr-base-href">href</code> content attribute in its
   <code>Document</code>, and its <code data-x="attr-base-href">href</code> content attribute is
   changed.</li>

  </ul>

  <p>To <dfn export>set the frozen base URL</dfn> for an element <var>element</var>:</p>

  <ol>
   <li><p>Let <var>document</var> be <var>element</var>'s <span>node document</span>.

   <li><p>Let <var>urlRecord</var> be the result of <span data-x="URL parser">parsing</span> the
   value of <var>element</var>'s <code data-x="attr-base-href">href</code> content attribute with
   <var>document</var>'s <span>fallback base URL</span>, and <var>document</var>'s <span
   data-x="document's character encoding">character encoding</span>. (Thus, the <code>base</code>
   element isn't affected by itself.)</p></li>
   <!-- This uses the URL parser rather than parse a URL since otherwise we'd have to unnecessarily
        complicate the latter for two callsites. -->

   <li><p>Set <var>element</var>'s <span>frozen base URL</span> to <var>document</var>'s
   <span>fallback base URL</span>, if <var>urlRecord</var> is failure or running <span>Is base
   allowed for Document?</span> on the <span>resulting URL record</span> and <var>document</var>
   returns "<code data-x="">Blocked</code>", and to <var>urlRecord</var> otherwise.</p></li>
  </ol>

  <p>The <dfn attribute for="HTMLBaseElement"><code data-x="dom-base-href">href</code></dfn> IDL
  attribute, on getting, must return the result of running the following algorithm:
  <!-- https://software.hixie.ch/utilities/js/live-dom-viewer/?saved=1715
       https://github.com/whatwg/html/issues/1060#issuecomment-211221664 -->

  <ol>
   <li><p>Let <var>document</var> be <var>element</var>'s <span>node document</span>.

   <li><p>Let <var>url</var> be the value of the <code data-x="attr-base-href">href</code>
   attribute of this element, if it has one, and the empty string otherwise.</p></li>

   <li><p>Let <var>urlRecord</var> be the result of <span data-x="URL parser">parsing</span>
   <var>url</var> with <var>document</var>'s <span>fallback base URL</span>, and
   <var>document</var>'s <span data-x="document's character encoding">character encoding</span>.
   (Thus, the <code>base</code> element isn't affected by other <code>base</code> elements or
   itself.)</p></li>
   <!-- This uses the URL parser rather than parse a URL since otherwise we'd have to unnecessarily
        complicate the latter for two callsites. -->

   <li><p>If <var>urlRecord</var> is failure, return <var>url</var>.</p></li>

   <li><p>Return the <span data-x="concept-url-serializer">serialization</span> of
   <var>urlRecord</var>.</p></li>
  </ol>

  <p>The <code data-x="dom-base-href">href</code> IDL attribute, on setting, must set the <code
  data-x="attr-base-href">href</code> content attribute to the given new value.</p>

  <p>The <dfn attribute for="HTMLBaseElement"><code data-x="dom-base-target">target</code></dfn> IDL
  attribute must <span>reflect</span> the content attribute of the same name.</p>

  </div>

  <div class="example">

   <p>In this example, a <code>base</code> element is used to set the <span>document base
   URL</span>:</p>

   <pre><code class="html">&lt;!DOCTYPE html>
&lt;html lang="en">
    &lt;head>
        &lt;title>This is an example for the &amp;lt;base&amp;gt; element&lt;/title>
        &lt;base href="https://www.example.com/news/index.html">
    &lt;/head>
    &lt;body>
        &lt;p>Visit the &lt;a href="archives.html">archives&lt;/a>.&lt;/p>
    &lt;/body>
&lt;/html></code></pre>

   <p>The link in the above example would be a link to "<code
   data-x="">https://www.example.com/news/archives.html</code>".</p>

  </div>




  <h4>The <dfn element><code>link</code></dfn> element</h4>

  <dl class="element">
   <dt><span data-x="concept-element-categories">Categories</span>:</dt>
   <dd><span>Metadata content</span>.</dd>
   <dd>If the element is <span>allowed in the body</span>: <span>flow content</span>.</dd>
   <dd>If the element is <span>allowed in the body</span>: <span>phrasing content</span>.</dd>
   <dt><span data-x="concept-element-contexts">Contexts in which this element can be used</span>:</dt>
   <dd>Where <span>metadata content</span> is expected.</dd>
   <dd>In a <code>noscript</code> element that is a child of a <code>head</code> element.</dd>
   <dd>If the element is <span>allowed in the body</span>: where <span>phrasing content</span> is expected.</dd>
   <dt><span data-x="concept-element-content-model">Content model</span>:</dt>
   <dd><span data-x="concept-content-nothing">Nothing</span>.</dd>
   <dt><span data-x="concept-element-attributes">Content attributes</span>:</dt>
   <dd><span>Global attributes</span></dd>
   <dd><code data-x="attr-link-href">href</code></dd>
   <dd><code data-x="attr-link-crossorigin">crossorigin</code></dd>
   <dd><code data-x="attr-link-rel">rel</code></dd>
   <dd><code data-x="attr-link-media">media</code></dd>
   <dd><code data-x="attr-link-integrity">integrity</code></dd>
   <dd><code data-x="attr-link-hreflang">hreflang</code></dd>
   <dd><code data-x="attr-link-type">type</code></dd>
   <dd><code data-x="attr-link-referrerpolicy">referrerpolicy</code></dd>
   <dd><code data-x="attr-link-sizes">sizes</code></dd>
   <dd><code data-x="attr-link-imagesrcset">imagesrcset</code></dd>
   <dd><code data-x="attr-link-imagesizes">imagesizes</code></dd>
   <dd><code data-x="attr-link-as">as</code></dd>
   <dd><code data-x="attr-link-blocking">blocking</code></dd>
   <dd><code data-x="attr-link-color">color</code></dd>
   <dd><code data-x="attr-link-disabled">disabled</code></dd>
   <dd><code data-x="attr-link-fetchpriority">fetchpriority</code></dd>
   <dd>Also, the <code data-x="attr-link-title">title</code> attribute <span data-x="attr-link-title">has special semantics</span> on this element.</dd>
   <dt><span
   data-x="concept-element-accessibility-considerations">Accessibility considerations</span>:</dt>
   <dd><a href="https://w3c.github.io/html-aria/#el-link">For authors</a>.</dd>
   <dd><a href="https://w3c.github.io/html-aam/#el-link">For implementers</a>.</dd>
   <dt><span data-x="concept-element-dom">DOM interface</span>:</dt>
   <dd w-nodev>
    <pre><code class="idl">[Exposed=Window]
interface <dfn interface>HTMLLinkElement</dfn> : <span>HTMLElement</span> {
  [<span>HTMLConstructor</span>] constructor();

  [<span>CEReactions</span>] attribute USVString <span data-x="dom-link-href">href</span>;
  [<span>CEReactions</span>] attribute DOMString? <span data-x="dom-link-crossOrigin">crossOrigin</span>;
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-link-rel">rel</span>;
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-link-as">as</span>;
  [SameObject, PutForwards=<span data-x="dom-DOMTokenList-value">value</span>] readonly attribute <span>DOMTokenList</span> <span data-x="dom-link-relList">relList</span>;
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-link-media">media</span>;
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-link-integrity">integrity</span>;
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-link-hreflang">hreflang</span>;
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-link-type">type</span>;
  [SameObject, PutForwards=<span data-x="dom-DOMTokenList-value">value</span>] readonly attribute <span>DOMTokenList</span> <span data-x="dom-link-sizes">sizes</span>;
  [<span>CEReactions</span>] attribute USVString <span data-x="dom-link-imageSrcset">imageSrcset</span>;
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-link-imageSizes">imageSizes</span>;
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-link-referrerPolicy">referrerPolicy</span>;
  [SameObject, PutForwards=<span data-x="dom-DOMTokenList-value">value</span>] readonly attribute <span>DOMTokenList</span> <span data-x="dom-link-blocking">blocking</span>;
  [<span>CEReactions</span>] attribute boolean <span data-x="dom-link-disabled">disabled</span>;
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-link-fetchPriority">fetchPriority</span>;

  // <a href="#HTMLLinkElement-partial">also has obsolete members</a>
};
<span>HTMLLinkElement</span> includes <span>LinkStyle</span>;</code></pre>
   </dd>
   <dd w-dev>Uses <code>HTMLLinkElement</code>.</dd>
  </dl>

  <p>The <code>link</code> element allows authors to link their document to other resources.</p>

  <p>The address of the link(s) is given by the <dfn element-attr for="link"><code
  data-x="attr-link-href">href</code></dfn> attribute. If the <code
  data-x="attr-link-href">href</code> attribute is present, then its value must be a <span>valid
  non-empty URL potentially surrounded by spaces</span>. One or both of the <code
  data-x="attr-link-href">href</code> or <code data-x="attr-link-imagesrcset">imagesrcset</code>
  attributes must be present.</p>

  <p w-nodev>If both the <code data-x="attr-link-href">href</code> and <code
  data-x="attr-link-imagesrcset">imagesrcset</code> attributes are absent, then the element does not
  define a link.</p>

  <p>The types of link indicated (the relationships) are given by the value of the <dfn element-attr
  for="link"><code data-x="attr-link-rel">rel</code></dfn> attribute, which, if present, must have a
  value that is a <span>unordered set of unique space-separated tokens</span>. The <a
  href="#linkTypes">allowed keywords and their meanings</a> are defined in a later section. <span
  w-nodev>If the <code data-x="attr-link-rel">rel</code> attribute is absent, has no keywords, or if
  none of the keywords used are allowed according to the definitions in this specification, then the
  element does not create any links.</span></p>

  <div w-nodev>

  <p><code data-x="attr-link-rel">rel</code>'s
  <span data-x="concept-supported-tokens">supported tokens</span> are the keywords defined in
  <a href="#linkTypes">HTML link types</a> which are allowed on <code>link</code> elements, impact
  the processing model, and are supported by the user agent. The possible <span
  data-x="concept-supported-tokens">supported tokens</span> are
  <code data-x="rel-alternate">alternate</code>,
  <code data-x="rel-dns-prefetch">dns-prefetch</code>,
  <code data-x="rel-icon">icon</code>,
  <code data-x="rel-manifest">manifest</code>,
  <code data-x="rel-modulepreload">modulepreload</code>,
  <code data-x="rel-next">next</code>,
  <code data-x="rel-pingback">pingback</code>,
  <code data-x="rel-preconnect">preconnect</code>,
  <code data-x="rel-prefetch">prefetch</code>,
  <code data-x="rel-preload">preload</code>,
  <code data-x="rel-search">search</code>, and
  <code data-x="rel-stylesheet">stylesheet</code>.
  <code data-x="attr-link-rel">rel</code>'s <span data-x="concept-supported-tokens">supported
  tokens</span> must only include the tokens from this list that the user agent implements the
  processing model for.</p>

  <p class="note">Theoretically a user agent could support the processing model for the <code
  data-x="rel-canonical">canonical</code> keyword — if it were a search engine that executed
  JavaScript. But in practice that's quite unlikely. So in most cases, <code
  data-x="rel-canonical">canonical</code> ought not be included in <code
  data-x="attr-link-rel">rel</code>'s <span data-x="concept-supported-tokens">supported
  tokens</span>.</p>

  </div>

  <p>A <code>link</code> element must have either a <code data-x="attr-link-rel">rel</code>
  attribute or an <code data-x="attr-itemprop">itemprop</code> attribute, but not both.</p>

  <p>If a <code>link</code> element has an <code data-x="attr-itemprop">itemprop</code> attribute,
  or has a <code data-x="attr-link-rel">rel</code> attribute that contains only keywords that are
  <span>body-ok</span>, then the element is said to be <dfn>allowed in the body</dfn>. This means
  that the element can be used where <span>phrasing content</span> is expected.</p>

  <p class="note">If the <code data-x="attr-link-rel">rel</code> attribute is used, the element can
  only sometimes be used in the <code>body</code> of the page. When used with the <code
  data-x="attr-itemprop">itemprop</code> attribute, the element can be used both in the
  <code>head</code> element and in the <code>body</code> of the page, subject to the constraints of
  the microdata model.</p>

  <hr>

  <p>Two categories of links can be created using the <code>link</code> element: <span
  data-x="external resource link">links to external resources</span> and <span
  data-x="hyperlink">hyperlinks</span>. The <a href="#linkTypes">link types section</a> defines
  whether a particular link type is an external resource or a hyperlink. One <code>link</code>
  element can create multiple links (of which some might be <span data-x="external resource
  link">external resource links</span> and some might be <span
  data-x="hyperlink">hyperlinks</span>); exactly which and how many links are created depends on the
  keywords given in the <code data-x="attr-link-rel">rel</code> attribute. User agents must process
  the links on a per-link basis, not a per-element basis.</p>

  <p class="note">Each link created for a <code>link</code> element is handled separately. For
  instance, if there are two <code>link</code> elements with <code data-x="">rel="stylesheet"</code>,
  they each count as a separate external resource, and each is affected by its own attributes
  independently. Similarly, if a single <code>link</code> element has a <code
  data-x="attr-link-rel">rel</code> attribute with the value <code data-x="">next stylesheet</code>,
  it creates both a <span>hyperlink</span> (for the <code data-x="rel-next">next</code> keyword) and
  an <span>external resource link</span> (for the <code data-x="rel-stylesheet">stylesheet</code>
  keyword), and they are affected by other attributes (such as <code
  data-x="attr-link-media">media</code> or <code data-x="attr-link-title">title</code>)
  differently.</p>

  <div class="example">
   <p>For example, the following <code>link</code> element creates two <span
   data-x="hyperlink">hyperlinks</span> (to the same page):</p>

   <pre><code class="html">&lt;link rel="author license" href="/about"></code></pre>

   <p>The two links created by this element are one whose semantic is that the target page has
   information about the current page's author, and one whose semantic is that the target page has
   information regarding the license under which the current page is provided.</p>
  </div>

  <p><span data-x="hyperlink">Hyperlinks</span> created with the <code>link</code> element and its
  <code data-x="attr-link-rel">rel</code> attribute apply to the whole document. This contrasts with
  the <code data-x="attr-hyperlink-rel">rel</code> attribute of <code>a</code> and <code>area</code>
  elements, which indicates the type of a link whose context is given by the link's location within
  the document.</p>

  <p>Unlike those created by <code>a</code> and <code>area</code> elements, <span
  data-x="hyperlink">hyperlinks</span> created by <code>link</code> elements are not displayed as
  part of the document by default, in user agents that <a href="#renderingUA">support the suggested
  default rendering</a>. And even if they are force-displayed using CSS, they have no
  <span>activation behavior</span>. Instead, they primarily provide semantic information which might
  be used by the page or by other software that consumes the page's contents. Additionally, the user
  agent can <a
  href="#providing-users-with-a-means-to-follow-hyperlinks-created-using-the-link-element">provide
  its own UI for following such hyperlinks</a>.</p>

  <p>The exact behavior for <span data-x="external resource link">links to external resources</span>
  depends on the exact relationship, as defined for the relevant <a href="#linkTypes">link
  type</a>.</p>

  <hr>

  <p>The <dfn element-attr for="link"><code data-x="attr-link-crossorigin">crossorigin</code></dfn>
  attribute is a <span>CORS settings attribute</span>. It is intended for use with <span
  data-x="external resource link">external resource links</span>.</p>

  <p>The <dfn element-attr for="link"><code data-x="attr-link-media">media</code></dfn> attribute
  says which media the resource applies to. The value must be a <span>valid media query
  list</span>.</p>

  <p>The <dfn for="link" element-attr><code data-x="attr-link-integrity">integrity</code></dfn>
  attribute represents the <span data-x="concept-request-integrity-metadata">integrity
  metadata</span> for requests which this element is responsible for. The value is text. The
  attribute must only be specified on <code>link</code> elements that have a <code
  data-x="attr-link-rel">rel</code> attribute that contains the <code
  data-x="rel-stylesheet">stylesheet</code>, <code data-x="rel-preload">preload</code>, or <code
  data-x="rel-modulepreload">modulepreload</code> keyword. <ref spec=SRI></p>

  <p>The <dfn element-attr for="link"><code data-x="attr-link-hreflang">hreflang</code></dfn>
  attribute on the <code>link</code> element has the same semantics as the <span
  data-x="attr-hyperlink-hreflang"><code>hreflang</code> attribute on the <code>a</code>
  element</span>.</p>

  <p>The <dfn element-attr for="link"><code data-x="attr-link-type">type</code></dfn> attribute
  gives the <span>MIME type</span> of the linked resource. It is purely advisory. The value must be
  a <span>valid MIME type string</span>.</p>

  <p>For <span data-x="external resource link">external resource links</span>, the <code
  data-x="attr-link-type">type</code> attribute is used as a hint to user agents so that they can
  avoid fetching resources they do not support.</p>

  <p>The <dfn element-attr for="link"><code
  data-x="attr-link-referrerpolicy">referrerpolicy</code></dfn> attribute is a <span>referrer policy
  attribute</span>. It is intended for use with <span data-x="external resource link">external
  resource links</span>, where it helps set the <span>referrer policy</span> used when <span
  data-x="fetch and process the linked resource">fetching and processing the linked resource</span>.
  <ref spec=REFERRERPOLICY>.</p>

  <p>The <dfn element-attr for="link"><code data-x="attr-link-title">title</code></dfn> attribute
  gives the title of the link. With one exception, it is purely advisory. The value is text. The
  exception is for style sheet links that are <span>in a document tree</span>, for which the <code
  data-x="attr-link-title">title</code> attribute defines <span data-x="CSS style sheet set">CSS
  style sheet sets</span>.</p>

  <p class="note">The <code data-x="attr-link-title">title</code> attribute on <code>link</code>
  elements differs from the global <code data-x="attr-title">title</code> attribute of most other
  elements in that a link without a title does not inherit the title of the parent element: it
  merely has no title.</p>

  <hr>

  <p>The <dfn element-attr for="link"><code data-x="attr-link-imagesrcset">imagesrcset</code></dfn>
  attribute may be present, and is a <span>srcset attribute</span>.</p>

  <p>The <code data-x="attr-link-imagesrcset">imagesrcset</code> and <code
  data-x="attr-link-href">href</code> attributes (if <span data-x="width descriptor">width
  descriptors</span> are not used) together contribute the <span data-x="image source">image
  sources</span> to the <span>source set</span>.</p>

  <p>If the <code data-x="attr-link-imagesrcset">imagesrcset</code> attribute is present and has any
  <span data-x="image candidate string">image candidate strings</span> using a <span>width
  descriptor</span>, the <dfn element-attr for="link"><code
  data-x="attr-link-imagesizes">imagesizes</code></dfn> attribute must also be present, and is a
  <span>sizes attribute</span>. The <code data-x="attr-link-imagesizes">imagesizes</code> attribute
  contributes the <span>source size</span> to the <span>source set</span>.</p>

  <p>The <code data-x="attr-link-imagesrcset">imagesrcset</code> and <code
  data-x="attr-link-imagesizes">imagesizes</code> attributes must only be specified on
  <code>link</code> elements that have both a <code data-x="attr-link-rel">rel</code> attribute that
  specifies the <code data-x="rel-preload">preload</code> keyword, as well as an <code
  data-x="attr-link-as">as</code> attribute in the "<code data-x="">image</code>" state.</p>

  <div class="example">
   <p>These attributes allow preloading the appropriate resource that is later used by an
   <code>img</code> element that has the corresponding values for its <code
   data-x="attr-img-srcset">srcset</code> and <code data-x="attr-img-sizes">sizes</code>
   attributes:</p>

   <pre><code class="html">&lt;link rel="preload" as="image"
      imagesrcset="wolf_400px.jpg 400w, wolf_800px.jpg 800w, wolf_1600px.jpg 1600w"
      imagesizes="50vw">

&lt;!-- ... later, or perhaps inserted dynamically ... -->
&lt;img src="wolf.jpg" alt="A rad wolf"
     srcset="wolf_400px.jpg 400w, wolf_800px.jpg 800w, wolf_1600px.jpg 1600w"
     sizes="50vw"></code></pre>

     <p>Note how we omit the <code data-x="attr-link-href">href</code> attribute, as it would only
     be relevant for browsers that do not support <code
     data-x="attr-link-imagesrcset">imagesrcset</code>, and in those cases it would likely cause the
     incorrect image to be preloaded.</p>
  </div>

  <div class="example">
   <p>The <code data-x="attr-link-imagesrcset">imagesrcset</code> attribute can be combined with the
   <code data-x="attr-link-media">media</code> attribute to preload the appropriate resource
   selected from a <code>picture</code> element's sources, for <span>art direction</span>:</p>

   <pre><code class="html">&lt;link rel="preload" as="image"
      imagesrcset="dog-cropped-1x.jpg, dog-cropped-2x.jpg 2x"
      media="(max-width: 800px)">
&lt;link rel="preload" as="image"
      imagesrcset="dog-wide-1x.jpg, dog-wide-2x.jpg 2x"
      media="(min-width: 801px)">

&lt;!-- ... later, or perhaps inserted dynamically ... -->
&lt;picture>
  &lt;source srcset="dog-cropped-1x.jpg, dog-cropped-2x.jpg 2x"
          media="(max-width: 800px)">
  &lt;img src="dog-wide-1x.jpg" srcset="dog-wide-2x.jpg 2x"
       alt="An awesome dog">
&lt;/picture></code></pre>
  </div>

  <hr>

  <p>The <dfn element-attr for="link"><code data-x="attr-link-sizes">sizes</code></dfn> attribute
  gives the sizes of icons for visual media. Its value, if present, is merely advisory.<span
  w-nodev> User agents may use the value to decide which icon(s) to use if multiple icons are
  available.</span> If specified, the attribute must have a value that is an <span>unordered set of
  unique space-separated tokens</span> which are <span>ASCII case-insensitive</span>. Each value
  must be either an <span>ASCII case-insensitive</span> match for the string "<code
  data-x="attr-link-sizes-any">any</code>", or a value that consists of two <span data-x="valid
  non-negative integer">valid non-negative integers</span> that do not have a leading U+0030 DIGIT
  ZERO (0) character and that are separated by a single U+0078 LATIN SMALL LETTER X or U+0058 LATIN
  CAPITAL LETTER X character. The attribute must only be specified on <code>link</code> elements
  that have a <code data-x="attr-link-rel">rel</code> attribute that specifies the <code
  data-x="rel-icon">icon</code> keyword or the <code data-x="">apple-touch-icon</code> keyword.</p>

  <p class="note">The <code data-x="">apple-touch-icon</code> keyword is a registered <span
  data-x="concept-rel-extensions">extension to the predefined set of link types</span>, but user
  agents are not required to support it in any way.</p>

  <hr>

  <p>The <dfn element-attr for="link"><code data-x="attr-link-as">as</code></dfn> attribute
  specifies the <span data-x="concept-potential-destination">potential destination</span> for a
  preload request for the resource given by the <code data-x="attr-link-href">href</code> attribute.
  It is an <span>enumerated attribute</span>. Each <span
  data-x="concept-potential-destination">potential destination</span> is a keyword for this
  attribute, mapping to a state of the same name. The attribute must be specified on
  <code>link</code> elements that have a <code data-x="attr-link-rel">rel</code> attribute that
  contains the <code data-x="rel-preload">preload</code> keyword. It may be specified on
  <code>link</code> elements that have a <code data-x="attr-link-rel">rel</code> attribute that
  contains the <code data-x="rel-modulepreload">modulepreload</code> keyword; in such cases it must
  have a value which is a <span data-x="concept-script-like-destination">script-like
  destination</span>. For other <code>link</code> elements, it must not be specified.</p>

  <p w-nodev>The processing model for how the <code data-x="attr-link-as">as</code> attribute is
  used is given in an individual link type's <span>fetch and process the linked resource</span>
  algorithm.</p>

  <p class="note">The attribute does not have a <i data-x="missing value default">missing value
  default</i> or <i data-x="invalid value default">invalid value default</i>, meaning that invalid
  or missing values for the attribute map to no state. This is accounted for in the processing
  model. For <code data-x="rel-preload">preload</code> links, both conditions are an error; for
  <code data-x="rel-modulepreload">modulepreload</code> links, a missing value will be treated as
  "<code data-x="">script</code>".</p>

  <hr>

  <p>The <dfn element-attr for="link"><code data-x="attr-link-blocking">blocking</code></dfn>
  attribute is a <span>blocking attribute</span>. It is used by link type <code
  data-x="rel-stylesheet">stylesheet</code>, and it must only be specified on link elements
  that have a <code data-x="attr-link-rel">rel</code> attribute containing that keyword.</p>

  <hr>

  <p>The <dfn element-attr for="link"><code data-x="attr-link-color">color</code></dfn> attribute is
  used with the <code data-x="">mask-icon</code> link type. The attribute must only be specified on
  <code>link</code> elements that have a <code data-x="attr-link-rel">rel</code> attribute that
  contains the <code data-x="">mask-icon</code> keyword. The value must be a string that matches the
  CSS <span>&lt;color></span> production, defining a suggested color that user agents can use to
  customize the display of the icon that the user sees when they pin your site.</p>

  <p class="note">This specification does not have any user agent requirements for the <code
  data-x="attr-link-color">color</code> attribute.</p>

  <p class="note">The <code data-x="">mask-icon</code> keyword is a registered <span
  data-x="concept-rel-extensions">extension to the predefined set of link types</span>, but user
  agents are not required to support it in any way.</p>

  <hr>

  <p><code>link</code> elements have an associated <dfn>explicitly enabled</dfn> boolean. It is
  initially false.

  <p>The <dfn element-attr for="link"><code data-x="attr-link-disabled">disabled</code></dfn>
  attribute is a <span>boolean attribute</span> that is used with the <code
  data-x="rel-stylesheet">stylesheet</code> link type.  The attribute must only be specified on
  <code>link</code> elements that have a <code data-x="attr-link-rel">rel</code> attribute that
  contains the <code data-x="rel-stylesheet">stylesheet</code> keyword.</p>

  <p>Whenever the <code data-x="attr-link-disabled">disabled</code> attribute is removed, set the
  <code>link</code> element's <span>explicitly enabled</span> attribute to true.</p>

  <div class="example">
   <p>Removing the <code data-x="attr-link-disabled">disabled</code> attribute dynamically, e.g.,
   using <code data-x="">document.querySelector("link").removeAttribute("disabled")</code>, will
   fetch and apply the style sheet:</p>

   <pre><code class="html">&lt;link disabled rel="alternate stylesheet" href="css/pooh"></code></pre>
  </div>

  <p>The <dfn element-attr for="link"
  data-x="attr-link-fetchpriority"><code>fetchpriority</code></dfn> attribute is a <span>fetch
  priority attribute</span> that is intended for use with <span
  data-x="external resource link">external resource links</span>, where it is used to set the <span
  data-x="concept-request-priority">priority</span> used when <span
  data-x="fetch and process the linked resource">fetching and processing the linked
  resource</span>.</p>

  <div w-nodev>
  <hr>

  <p>The IDL attributes
  <dfn attribute for="HTMLLinkElement"><code data-x="dom-link-href">href</code></dfn>,
  <dfn attribute for="HTMLLinkElement"><code data-x="dom-link-hreflang">hreflang</code></dfn>,
  <dfn attribute for="HTMLLinkElement"><code data-x="dom-link-integrity">integrity</code></dfn>,
  <dfn attribute for="HTMLLinkElement"><code data-x="dom-link-media">media</code></dfn>,
  <dfn attribute for="HTMLLinkElement"><code data-x="dom-link-rel">rel</code></dfn>,
  <dfn attribute for="HTMLLinkElement"><code data-x="dom-link-sizes">sizes</code></dfn>,
  <dfn attribute for="HTMLLinkElement"><code data-x="dom-link-type">type</code></dfn>,
  <dfn attribute for="HTMLLinkElement"><code data-x="dom-link-blocking">blocking</code></dfn>, and
  <dfn attribute for="HTMLLinkElement"><code data-x="dom-link-disabled">disabled</code></dfn>
  each must <span>reflect</span> the respective content attributes of the same name.</p>

  <p class="note">There is no reflecting IDL attribute for the <code
  data-x="attr-link-color">color</code> attribute, but this might be added later.</p>

  <p>The <dfn attribute for="HTMLLinkElement"><code data-x="dom-link-as">as</code></dfn> IDL
  attribute must <span>reflect</span> the <code data-x="attr-link-as">as</code> content attribute,
  <span>limited to only known values</span>.</p>

  <p>The <dfn attribute for="HTMLLinkElement"><code
  data-x="dom-link-crossOrigin">crossOrigin</code></dfn> IDL attribute must <span>reflect</span> the
  <code data-x="attr-link-crossorigin">crossorigin</code> content attribute, <span>limited to only
  known values</span>.</p>

  <p>The <dfn attribute for="HTMLLinkElement"><code
  data-x="dom-link-referrerPolicy">referrerPolicy</code></dfn> IDL attribute must
  <span>reflect</span> the <code data-x="attr-link-referrerpolicy">referrerpolicy</code> content
  attribute, <span>limited to only known values</span>.</p>

  <p>The <dfn attribute for="HTMLLinkElement"><code
  data-x="dom-link-fetchPriority">fetchPriority</code></dfn> IDL attribute must
  <span>reflect</span> the <code data-x="attr-link-fetchpriority">fetchpriority</code> content
  attribute, <span>limited to only known values</span>.</p>

  <p>The <dfn attribute for="HTMLLinkElement"><code
  data-x="dom-link-imageSrcset">imageSrcset</code></dfn> IDL attribute must <span>reflect</span> the
  <code data-x="attr-link-imagesrcset">imagesrcset</code> content attribute.</p>

  <p>The <dfn attribute for="HTMLLinkElement"><code
  data-x="dom-link-imageSizes">imageSizes</code></dfn> IDL attribute must <span>reflect</span> the
  <code data-x="attr-link-imagesizes">imagesizes</code> content attribute.</p>

  <p>The <dfn attribute for="HTMLLinkElement"><code data-x="dom-link-rellist">relList</code></dfn>
  IDL attribute must <span data-x="reflect">reflect</span> the <code
  data-x="attr-link-rel">rel</code> content attribute.</p>

  <p class="note">The <code data-x="dom-link-rellist">relList</code> attribute can be used for
  feature detection, by calling its <code data-x="dom-DOMTokenList-supports">supports()</code>
  method to check which <a href="#linkTypes">types of links</a> are supported.</p>

  <h5>Processing the <code data-x="attr-link-media">media</code> attribute</h5>

  <p>If the link is a <span>hyperlink</span> then the <code data-x="attr-link-media">media</code>
  attribute is purely advisory, and describes for which media the document in question was
  designed.</p>

  <p>However, if the link is an <span>external resource link</span>, then the <code
  data-x="attr-link-media">media</code> attribute is prescriptive. The user agent must apply the
  external resource when the <code data-x="attr-link-media">media</code> attribute's value
  <span>matches the environment</span> and the other relevant conditions apply, and must not apply
  it otherwise.</p><!-- note similar text in <style> element section -->

  <p id="default-media">The default, if the <code data-x="attr-link-media">media</code> attribute is
  omitted, is "<code data-x="">all</code>", meaning that by default links apply to all media.</p>

  <p class="note">The external resource might have further restrictions defined within that limit
  its applicability. For example, a CSS style sheet might have some <code data-x="">@media</code>
  blocks. This specification does not override such further restrictions or requirements.</p><!--
  note similar text in <style> element section -->

  <h5>Processing the <code data-x="attr-link-type">type</code> attribute</h5>

  <p>If the <code data-x="attr-link-type">type</code> attribute is present, then the user agent must
  assume that the resource is of the given type (even if that is not a <span>valid MIME type
  string</span>, e.g. the empty string). If the attribute is omitted, but the <span>external
  resource link</span> type has a default type defined, then the user agent must assume that the
  resource is of that type. If the UA does not support the given <span>MIME type</span> for the
  given link relationship, then the UA should not <span>fetch and process the linked
  resource</span>; if the UA does support the given <span>MIME type</span> for the given link
  relationship, then the UA should <span>fetch and process the linked resource</span> at the
  appropriate time as specified for the <span>external resource link</span>'s particular type.
  If the attribute is omitted, and the <span>external resource link</span> type does not have a
  default type defined, but the user agent would <span>fetch and process the linked resource</span>
  if the type was known and supported, then the user agent should <span>fetch and process the linked
  resource</span> under the assumption that it will be supported.</p>

  <p>User agents must not consider the <code data-x="attr-link-type">type</code> attribute
  authoritative &mdash; upon fetching the resource, user agents must not use the <code
  data-x="attr-link-type">type</code> attribute to determine its actual type. Only the actual type
  (as defined in the next paragraph) is used to determine whether to <em>apply</em> the resource,
  not the aforementioned assumed type.</p>

  <p id="concept-link-type-sniffing">If the <span>external resource link</span> type defines rules
  for processing the resource's <span data-x="Content-Type">Content-Type metadata</span>, then those
  rules apply.  Otherwise, if the resource is expected to be an image, user agents may apply the
  <span data-x="Content-Type sniffing: image">image sniffing rules</span>, with the <var>official
  type</var> being the type determined from the resource's <span data-x="Content-Type">Content-Type
  metadata</span>, and use the resulting <span data-x="Content-Type sniffing">computed type of the
  resource</span> as if it was the actual type.  Otherwise, if neither of these conditions apply or
  if the user agent opts not to apply the image sniffing rules, then the user agent must use the
  resource's <span data-x="Content-Type">Content-Type metadata</span> to determine the type of the
  resource. If there is no type metadata, but the <span>external resource link</span> type has a
  default type defined, then the user agent must assume that the resource is of that type.</p>

  <p class="note">The <code data-x="rel-stylesheet">stylesheet</code> link type defines rules for
  processing the resource's <span data-x="Content-Type">Content-Type metadata</span>.</p>

  <p>Once the user agent has established the type of the resource, the user agent must apply the
  resource if it is of a supported type and the other relevant conditions apply, and must ignore the
  resource otherwise.</p>

  <div class="example">

   <p>If a document contains style sheet links labeled as follows:</p>

   <pre><code class="html">&lt;link rel="stylesheet" href="A" type="text/plain"&gt;
&lt;link rel="stylesheet" href="B" type="text/css"&gt;
&lt;link rel="stylesheet" href="C"&gt;</code></pre>

   <p>...then a compliant UA that supported only CSS style sheets would fetch the B and C files, and
   skip the A file (since <code>text/plain</code> is not the <span>MIME type</span> for CSS style
   sheets).</p>

   <p>For files B and C, it would then check the actual types returned by the server. For those that
   are sent as <code>text/css</code>, it would apply the styles, but for those labeled as
   <code>text/plain</code>, or any other type, it would not.</p>

   <p>If one of the two files was returned without a <span>Content-Type</span> metadata, or with a
   syntactically incorrect type like <code data-x="">Content-Type:&nbsp;"null"</code>, then the
   default type for <code data-x="rel-stylesheet">stylesheet</code> links would kick in. Since that
   default type is <code>text/css</code>, the style sheet <em>would</em> nonetheless be applied.</p>

  </div>

  <h5><span id="obtaining-a-resource-from-a-link-element"></span>Fetching and processing a resource
  from a <code>link</code> element</h5>

  <p id="concept-link-obtain">All <span data-x="external resource link">external resource
  links</span> have a <dfn>fetch and process the linked resource</dfn> algorithm, which takes a
  <code>link</code> element <var>el</var>. They also have <dfn>linked resource fetch setup
  steps</dfn> which take a <code>link</code> element <var>el</var> and <span
  data-x="concept-request">request</span> <var>request</var>. Individual link types may provide
  their own <span>fetch and process the linked resource</span> algorithm, but unless explicitly
  stated, they use the <span>default fetch and process the linked resource</span> algorithm.
  Similarly, individual link types may provide their own <span>linked resource fetch setup
  steps</span>, but unless explicitly stated, these steps just return true.</p>

  <p>The <dfn>default fetch and process the linked resource</dfn>, given a <code>link</code> element
  <var>el</var>, is as follows:</p>

  <ol>
   <li><p>Let <var>options</var> be the result of <span data-x="create link options from
   element">creating link options</span> from <var>el</var>.</p></li>

   <li><p>Let <var>request</var> be the result of <span data-x="create a link request">creating a
   link request</span> given <var>options</var>.</p></li>

   <li><p>If <var>request</var> is null, then return.</p></li>

   <li><p>Set <var>request</var>'s <span>synchronous flag</span>.</p></li>

   <li><p>Run the <span>linked resource fetch setup steps</span>, given <var>el</var> and
   <var>request</var>. If the result is false, then return.</p></li>

   <li><p>Set <var>request</var>'s <span data-x="concept-request-initiator-type">initiator
   type</span> to "<code data-x="">css</code>" if <var>el</var>'s <code
   data-x="attr-link-rel">rel</code> attribute contains the keyword <code
   data-x="rel-stylesheet">stylesheet</code>; "<code data-x="">link</code>" otherwise.</p></li>

   <li>
    <p><!--FETCH--><span data-x="concept-fetch">Fetch</span> <var>request</var> with <i
    data-x="processResponseConsumeBody">processResponseConsumeBody</i> set to the following steps
    given <span data-x="concept-response">response</span> <var>response</var> and null, failure, or
    a <span>byte sequence</span> <var>bodyBytes</var>:</p>

    <ol>
     <li><p>Let <var>success</var> be true.</p></li>

     <li>
      <p>If either of the following conditions are met:</p>

      <ul>
       <li><p><var>bodyBytes</var> is null or failure; or</p></li>

       <li><p><var>response</var>'s <span data-x="concept-response-status">status</span> is not an
       <span>ok status</span>,</p></li>
      </ul>

      <p>then set <var>success</var> to false.</p>

      <p class="note">Note that content-specific errors, e.g., CSS parse errors or PNG decoding
      errors, do not affect <var>success</var>.</p>
     </li>

     <li>
      <p>Otherwise, wait for the <span data-x="external resource link">link
      resource</span>'s <span>critical subresources</span> to finish loading.</p>

      <p class="XXX">The specification that defines a link type's <span>critical subresources</span>
      (e.g., CSS) is expected to describe how these subresources are fetched and processed. However,
      since this is not currently explicit, this specification describes waiting for a <span
      data-x="external resource link">link resource</span>'s <span>critical subresources</span> to
      be fetched and processed, with the expectation that this will be done correctly.</p>
     </li>

     <li><p><span>Process the linked resource</span> given <var>el</var>, <var>success</var>,
     <var>response</var>, and <var>bodyBytes</var>.</li>
    </ol>
   </li>
  </ol>

  <p>To <dfn>create a link request</dfn> given a <span>link processing options</span>
  <var>options</var>:</p>

  <ol>
   <li><p><span>Assert</span>: <var>options</var>'s <span data-x="link options href">href</span> is
   not the empty string.</p></li>

   <li><p>If <var>options</var>'s <span data-x="link options destination">destination</span> is not
   a <span data-x="concept-request-destination">destination</span>, then return null.</p></li>

   <li><p><span>Parse a URL</span> given <var>options</var>'s <span data-x="link options
   href">href</span>, relative to <var>options</var>'s <span data-x="link options base url">base
   URL</span>. If that fails, then return null. Otherwise, let <var>url</var> be the
   <span>resulting URL record</span>.</p></li>

   <li><p>Let <var>request</var> be the result of <span data-x="create a potential-CORS
   request">creating a potential-CORS request</span> given <var>url</var>, <var>options</var>'s
   <span data-x="link options destination">destination</span>, and <var>options</var>'s <span
   data-x="link options crossorigin">crossorigin</span>.</p></li>

   <li><p>Set <var>request</var>'s <span data-x="concept-request-policy-container">policy
   container</span> to <var>options</var>'s <span data-x="link options policy container">policy
   container</span>.</p></li>

   <li><p>Set <var>request</var>'s <span data-x="concept-request-integrity-metadata">integrity
   metadata</span> to <var>options</var>'s <span data-x="link options
   integrity">integrity</span>.</p></li>

   <li><p>Set <var>request</var>'s <span data-x="concept-request-nonce-metadata">cryptographic
   nonce metadata</span> to <var>options</var>'s <span data-x="link options nonce">cryptographic
   nonce metadata</span>.</p></li>

   <li><p>Set <var>request</var>'s <span data-x="concept-request-referrer-policy">referrer
   policy</span> to <var>options</var>'s <span data-x="link options referrer policy">referrer
   policy</span>.</p></li>

   <li><p>Set <var>request</var>'s <span data-x="concept-request-client">client</span> to
   <var>options</var>'s <span data-x="link options environment">environment</span>.</p></li>

   <li><p>Set <var>request</var>'s <span data-x="concept-request-priority">priority</span> to
   <var>options</var>'s <span data-x="link options fetch priority">fetch priority</span>.</p></li>

   <li><p>Return <var>request</var>.</p></li>
  </ol>

  <p>User agents may opt to only try to <span data-x="fetch and process the linked resource">fetch
  and process</span> such resources when they are needed, instead of pro-actively fetching all the
  <span data-x="external resource link">external resources</span> that are not applied.</p>

  <!-- the next few paragraphs are similar to text in the <style> element section -->
  <!-- TODO: integrate this better with Fetch's process response definition -->
  <p>Similar to the <span>fetch and process the linked resource</span> algorithm, all <span
  data-x="external resource link">external resource links</span> have a <dfn>process the linked
  resource</dfn> algorithm which takes a <code>link</code> element <var>el</var>, boolean
  <var>success</var>, a <span data-x="concept-response">response</span> <var>response</var>, and a
  <span>byte sequence</span> <var>bodyBytes</var>. Individual link types may provide their own
  <span>process the linked resource</span> algorithm, but unless explicitly stated, that algorithm
  does nothing.</p>

  <p>Unless otherwise specified for a given <code data-x="attr-link-rel">rel</code> keyword, the
  element must <span>delay the load event</span> of the element's <span>node document</span> until
  all the attempts to <span>fetch and process the linked resource</span> and its <span>critical
  subresources</span> are complete. (Resources that the user agent has not yet attempted to fetch
  and process, e.g., because it is waiting for the resource to be needed, do not <span>delay the
  load event</span>.)</p>

  <h5>Processing `<code data-x="http-link">Link</code>` headers</h5>

  <p>All link types that can be <span data-x="external resource link">external resource
  links</span> define a <dfn>process a link header</dfn> algorithm, which takes a <span>link
  processing options</span>. This algorithm defines whether and how they react to appearing in an
  HTTP `<code data-x="http-link">Link</code>` response header.</p>

  <p class="note">For most link types, this algorithm does nothing. The <a
  href="#table-link-relations">summary table</a> is a good reference to quickly know whether a link
  type has defined <span>process a link header</span> steps.</p>

  <p>A <dfn>link processing options</dfn> is a <span>struct</span>. It has the following
  <span data-x="struct item">items</span>:</p>

  <dl>
   <dt><dfn data-x="link options href">href</dfn> (default the empty string)</dt>
   <dt><dfn data-x="link options destination">destination</dfn> (default the empty string)</dt>
   <dt><dfn data-x="link options initiator">initiator</dfn> (default "<code
   data-x="">link</code>")</dt>
   <dt><dfn data-x="link options integrity">integrity</dfn> (default the empty string)</dt>
   <dt><dfn data-x="link options type">type</dfn> (default the empty string)</dt>
   <dt><dfn data-x="link options nonce">cryptographic nonce metadata</dfn> (default the empty
   string)</dt>
   <dd>A string</dd>

   <dt><dfn data-x="link options crossorigin">crossorigin</dfn> (default <span
   data-x="attr-crossorigin-none">No CORS</span>)</dt>
   <dd>A <span>CORS settings attribute</span> state</dd>

   <dt><dfn data-x="link options referrer policy">referrer policy</dfn> (default the empty
   string)</dt>
   <dd>A <span>referrer policy</span></dd>

   <dt><dfn data-x="link options source set">source set</dfn> (default null)</dt>
   <dd>Null or a  <span>source set</span></dd>

   <dt><dfn data-x="link options base URL">base URL</dfn></dt>
   <dd>A <span>URL</span></dd>

   <dt><dfn data-x="link options origin">origin</dfn></dt>
   <dd>An <span>origin</span></dd>

   <dt><dfn data-x="link options environment">environment</dfn></dt>
   <dd>An <span>environment</span></dd>

   <dt><dfn data-x="link options policy container">policy container</dfn></dt>
   <dd>A <span>policy container</span></dd>

   <dt><dfn data-x="link options document">document</dfn> (default null)</dt>
   <dd>Null or a <code>Document</code></dd>

   <dt><dfn data-x="link options on document ready">on document ready</dfn> (default null)</dt>
   <dd>Null or an algorithm accepting a <code>Document</code></dd>

   <dt><dfn data-x="link options fetch priority">fetch priority</dfn> (default <code
   data-x="attr-fetchpriority-auto-state">auto</code>)</dt>
   <dd>A <span>fetch priority attribute</span> state</dd>
  </dl>

  <p class="note">A <span>link processing options</span> has a <span
  data-x="link options base URL">base URL</span> and an <span data-x="link options href">href</span>
  rather than a parsed URL because the URL could be a result of the options's <span
  data-x="link options source set">source set</span>.</p>

  <p>To <dfn>create link options from element</dfn> given a <code>link</code> element
  <var>el</var>:</p>

  <ol>
   <li><p>Let <var>document</var> be <var>el</var>'s <span>node document</span>.</p></li>

   <li>
    <p>Let <var>options</var> be a new <span>link processing options</span> with</p>

    <dl class="props">
     <dt><span data-x="link options destination">destination</span></dt>
     <dd>the result of <span data-x="concept-potential-destination-translate">translating</span> the
     state of <var>el</var>'s <code data-x="attr-link-as">as</code> attribute</dd>

     <dt><span data-x="link options crossorigin">crossorigin</span></dt>
     <dd>the state of <var>el</var>'s <code data-x="attr-link-crossorigin">crossorigin</code>
     content attribute</dd>

     <dt><span data-x="link options referrer policy">referrer policy</span></dt>
     <dd>the state of <var>el</var>'s <code data-x="attr-link-referrerpolicy">referrerpolicy</code>
     content attribute</dd>

     <dt><span data-x="link options source set">source set</span></dt>
     <dd><var>el</var>'s <span>source set</span></dd>

     <dt><span data-x="link options base URL">base URL</span></dt>
     <dd><var>document</var>'s <span>document base URL</span></dd>

     <dt><span data-x="link options origin">origin</span></dt>
     <dd><var>document</var>'s <span data-x="concept-document-origin">origin</span></dd>

     <dt><span data-x="link options environment">environment</span></dt>
     <dd><var>document</var>'s <span>relevant settings object</span></dd>

     <dt><span data-x="link options policy container">policy container</span></dt>
     <dd><var>document</var>'s <span
     data-x="concept-document-policy-container">policy container</span></dd>

     <dt><span data-x="link options document">document</span></dt>
     <dd><var>document</var></dd>

     <dt><span data-x="link options nonce">cryptographic nonce metadata</span></dt>
     <dd>The current value of <var>el</var>'s <span>[[CryptographicNonce]]</span> internal slot</dd>

     <dt><span data-x="link options fetch priority">fetch priority</span></dt>
     <dd>the state of <var>el</var>'s <code data-x="attr-link-fetchpriority">fetchpriority</code>
     content attribute</dd>
    </dl>
   </li>

   <li><p>If <var>el</var> has an <code data-x="attr-link-href">href</code> attribute, then set
   <var>options</var>'s <span data-x="link options href">href</span> to the value of
   <var>el</var>'s <code data-x="attr-link-href">href</code> attribute.</p></li>

   <li><p>If <var>el</var> has an <code data-x="attr-link-integrity">integrity</code> attribute,
   then set <var>options</var>'s <span data-x="link options integrity">integrity</span> to the
   value of <var>el</var>'s <code data-x="attr-link-integrity">integrity</code> content
   attribute.</p></li>

   <li><p>If <var>el</var> has a <code data-x="attr-link-type">type</code> attribute, then set
   <var>options</var>'s <span data-x="link options type">type</span> to the value of
   <var>el</var>'s <code data-x="attr-link-type">type</code> attribute.</p></li>

   <li>
    <p><span>Assert</span>: <var>options</var>'s <span data-x="link options href">href</span> is not
    the empty string, or <var>options</var>'s <span data-x="link options source set">source
    set</span> is not null.</p>

    <p>A <code>link</code> element with neither an <code data-x="attr-link-href">href</code> or an
    <code data-x="attr-link-imagesrcset">imagesrcset</code> does not represent a link.</p>
   </li>

   <li><p>Return <var>options</var>.</p></li>
  </ol>

  <p>To <dfn>extract links from headers</dfn> given a <span data-x="concept-header-list">header
  list</span> <var>headers</var>:</p>

  <ol>
   <li><p>Let <var>links</var> be a new <span>list</span>.</p></li>

   <li><p>Let <var>rawLinkHeaders</var> be the result of <span
   data-x="concept-header-list-get-decode-split">getting, decoding, and splitting</span>
   `<code>Link</code>` from <var>response</var>'s <span
   data-x="concept-response-header-list">header list</span>.</p></li>

   <li>
    <p><span data-x="list iterate">For each</span> <var>linkHeader</var> of
    <var>rawLinkHeaders</var>:</p>

    <ol>
     <li><p>Let <var>linkObject</var> be the result of <span data-x="parsing a link field
     value">parsing</span> <var>linkHeader</var>. <ref spec=WEBLINK></p></li>

     <li><p>If <var>linkObject</var>["<code data-x="">target_uri</code>"] does not
     <span data-x="map exists">exist</span>, then <span>continue</span>.</p></li>

     <li><p><span data-x="list append">Append</span> <var>linkObject</var> to
     <var>links</var>.</p></li>
    </ol>
   </li>
   <li><p>Return <var>links</var>.</p></li>
  </ol>

  <p>To <dfn>process link headers</dfn> given a <code>Document</code> <var>doc</var>,
  a <span data-x="concept-response">response</span> <var>response</var>, and a
  "<code data-x="">pre-media</code>" or "<code data-x="">media</code>" <var>phase</var>:</p>

  <ol>
   <li><p>Let <var>links</var> be the result of <span data-x="extract links from
   headers">extracting links</span> from <var>response</var>'s <span
   data-x="concept-response-header-list">header list</span>.</p></li>

   <li>
    <p><span data-x="list iterate">For each</span> <var>linkObject</var> in <var>links</var>:</p>

    <ol>
     <li><p>Let <var>rel</var> be <var>linkObject</var>["<code
     data-x="">relation_type</code>"].</p></li>

     <li><p>Let <var>attribs</var> be <var>linkObject</var>["<code
     data-x="">target_attributes</code>"].</p></li>

     <li><p>Let <var>expectedPhase</var> be "<code data-x="">media</code>" if either "<code
     data-x="attr-img-srcset">srcset</code>", "<code
     data-x="attr-link-imagesrcset">imagesrcset</code>", or "<code
     data-x="attr-link-media">media</code>" <span data-x="map exists">exist</span> in
     <var>attribs</var>; otherwise "<code data-x="">pre-media</code>".</p></li>

     <li><p>If <var>expectedPhase</var> is not <var>phase</var>, then
     <span>continue</span>.</p></li>

     <li><p>If <var>attribs</var>["<code data-x="attr-link-media">media</code>"] <span data-x="map
     exists">exists</span> and <var>attribs</var>["<code data-x="attr-link-media">media</code>"]
     does not <span data-x="matches the environment">match the environment</span>, then
     <span>continue</span>.</p></li>

     <li>
      <p>Let <var>options</var> be a new <span>link processing options</span> with</p>

      <dl class="props">
       <dt><span data-x="link options href">href</span></dt>
       <dd><var>linkObject</var>["<code data-x="">target_uri</code>"]</dd>

       <dt><span data-x="link options base URL">base URL</span></dt>
       <dd><var>doc</var>'s <span>document base URL</span></dd>

       <dt><span data-x="link options origin">origin</span></dt>
       <dd><var>doc</var>'s <span data-x="concept-document-origin">origin</span></dd>

       <dt><span data-x="link options environment">environment</span></dt>
       <dd><var>doc</var>'s <span>relevant settings object</span></dd>

       <dt><span data-x="link options policy container">policy container</span></dt>
       <dd><var>doc</var>'s <span data-x="concept-document-policy-container">policy
       container</span></dd>

       <dt><span data-x="link options document">document</span></dt>
       <dd><var>doc</var></dd>
      </dl>
     </li>

     <li><p><span>Apply link options from parsed header attributes</span> to <var>options</var>
     given <var>attribs</var>.</p></li>

     <li><p>If <var>attribs</var>["<code data-x="attr-link-imagesrcset">imagesrcset</code>"] <span
     data-x="map exists">exists</span> and <var>attribs</var>["<code
     data-x="attr-link-imagesizes">imagesizes</code>"] <span data-x="map exists">exists</span>,
     then set <var>options</var>'s <span data-x="link options source set">source set</span> to the
     result of <span data-x="create a source set">creating a source set</span> given
     <var>linkObject</var>["<code data-x="">target_uri</code>"], <var>attribs</var>["<code
     data-x="attr-link-imagesrcset">imagesrcset</code>"], and <var>attribs</var>["<code
     data-x="attr-link-imagesizes">imagesizes</code>"].</p></li>

     <li><p>Run the <span>process a link header</span> steps for <var>rel</var> given
     <var>options</var>.</p></li>
    </ol>
   </li>
  </ol>

  <p>To <dfn>apply link options from parsed header attributes</dfn> to a <span>link processing
  options</span> <var>options</var> given <var>attribs</var>:</p>

  <ol>
   <li><p>If <var>attribs</var>["<code data-x="attr-link-as">as</code>"] <span data-x="map
   exists">exists</span>, then set <var>options</var>'s <span data-x="link options
   destination">destination</span> to the result of <span
   data-x="concept-potential-destination-translate">translating</span> <var>attribs</var>["<code
   data-x="attr-link-as">as</code>"].</p></li>

   <li><p>If <var>attribs</var>["<code data-x="attr-link-crossorigin">crossorigin</code>"] <span
   data-x="map exists">exists</span> and is an <span>ASCII case-insensitive</span> match for one of
   the <span>CORS settings attribute</span> <span data-x="enumerated attribute">keywords</span>,
   then set <var>options</var>'s <span data-x="link options crossorigin">crossorigin</span> to the
   <span>CORS settings attribute</span> state corresponding to that keyword.</p></li>

   <li><p>If <var>attribs</var>["<code data-x="attr-link-integrity">integrity</code>"] <span
   data-x="map exists">exists</span>, then set <var>options</var>'s <span data-x="link options
   integrity">integrity</span> to <var>attribs</var>["<code
   data-x="attr-link-integrity">integrity</code>"].</p></li>

   <li><p>If <var>attribs</var>["<code data-x="attr-link-referrerpolicy">referrerpolicy</code>"]
   <span data-x="map exists">exists</span> and is an <span>ASCII case-insensitive</span> match for
   some <span>referrer policy</span>, then set <var>options</var>'s <span data-x="link options
   referrer policy">referrer policy</span> to that <span>referrer policy</span>.</p></li>

   <li><p>If <var>attribs</var>["<code data-x="attr-nonce">nonce</code>"]
   <span data-x="map exists">exists</span>, then set <var>options</var>'s <span data-x="link
   options nonce">nonce</span> to <var>attribs</var>["<code
   data-x="attr-nonce">nonce</code>"].</p></li>

   <li><p>If <var>attribs</var>["<code data-x="attr-link-type">type</code>"] <span data-x="map
   exists">exists</span>, then set <var>options</var>'s <span data-x="link options
   type">type</span> to <var>attribs</var>["<code data-x="attr-link-type">type</code>"].</p></li>

   <li><p>If <var>attribs</var>["<code data-x="attr-link-fetchpriority">fetchpriority</code>"]
   <span data-x="map exists">exists</span> and is an <span>ASCII case-insensitive</span> match for
   a <span>fetch priority attribute</span> keyword, then set <var>options</var>'s <span
   data-x="link options fetch priority">fetch priority</span> to that <span>fetch priority
   attribute</span> keyword.</p></li>
  </ol>



  <h5>Early hints</h5>

  <p><dfn>Early hints</dfn> allow user-agents to perform some operations, such as to speculatively
  load resources that are likely to be used by the document, before the navigation request is fully
  handled by the server and a response code is served. Servers can indicate early hints by serving a
  <span data-x="concept-response">response</span> with a 103 status code before serving the final
  <span data-x="concept-response">response</span>.<ref spec=RFC8297></p>

  <div class="example">
   <p>For example, given the following sequence of responses:</p>
   <pre>103 Early Hint
Link: &lt;/image.png&gt;; <span data-x="attr-link-rel">rel</span>=<span
data-x="rel-preload">preload</span>; <span data-x="attr-link-as">as</span>=image</pre>

   <pre>200 OK
Content-Type: text/html

&lt;!DOCTYPE html&gt;
...
&lt;img src="/image.png"&gt;</pre>

   <p>the image will start loading before the HTML content arrives.</p>
  </div>

  <p class="note">Only the first early hint response served during the navigation is handled, and it
  is discarded if it is succeeded by a cross-origin redirect.</p>

  <p>In addition to the `<code data-x="http-link">Link</code>` headers, it is possible that the 103
  response contains a <span>Content Security Policy</span> header, which is enforced when processing
  the early hint.</p>

  <div class="example">
   <p>For example, given the following sequence of responses:</p>
   <pre>103 Early Hint
Content-Security-Policy: style-src: self;
Link: &lt;/style.css&gt;; <span data-x="attr-link-rel">rel</span>=<span
data-x="rel-preload">preload</span>; <span data-x="attr-link-as">as</span>=style</pre>

   <pre>103 Early Hint
Link: &lt;/image.png&gt;; <span data-x="attr-link-rel">rel</span>=<span
data-x="rel-preload">preload</span>; <span data-x="attr-link-as">as</span>=image</pre>

   <pre>302 Redirect
Location: /alternate.html</pre>

   <pre>200 OK
Content-Security-Policy: style-src: none;
Link: &lt;/font.ttf&gt;; <span data-x="attr-link-rel">rel</span>=<span
data-x="rel-preload">preload</span>; <span data-x="attr-link-as">as</span>=font</pre>

   <p>The font and style would be loaded, and the image will be discarded, as only the first early
   hint response in the final redirect chain is respected. The late <span>Content Security
   Policy</span> header comes after the request to fetch the style has already been performed, but
   the style will not be accessible to the document.</p>
  </div>

  <p>To <dfn>process early hint headers</dfn> given a <span
  data-x="concept-response">response</span> <var>response</var> and an <span>environment</span>
  <var>reservedEnvironment</var>:</p>

  <p class="note">Early-hint `<code data-x="http-link">Link</code>` headers are always processed
  before `<code data-x="http-link">Link</code>` headers from the final <span
  data-x="concept-response">response</span>, followed by <code>link</code> elements. This is
  equivalent to prepending the contents of the early and final `<code
  data-x="http-link">Link</code>` headers to the <code>Document</code>'s <code>head</code> element,
  in respective order.</p>

  <ol>
   <li>
    <p>Let <var>earlyPolicyContainer</var> be the result of <span>creating a policy container from
    a fetch response</span> given <var>response</var> and <var>reservedEnvironment</var>.</p>

    <p class="note">This allows the early hint <span data-x="concept-response">response</span> to
    include a <span>Content Security Policy</span> which would be <span data-x="enforce the
    policy">enforced</span> when fetching the early hint <span
    data-x="concept-request">request</span>.</p>
   </li>

   <li><p>Let <var>links</var> be the result of <span data-x="extract links from
   headers">extracting links</span> from <var>response</var>'s <span
   data-x="concept-response-header-list">header list</span>.</p></li>

   <li><p>Let <var>earlyHints</var> be an empty <span>list</span>.</p></li>

   <li>
    <p><span data-x="list iterate">For each</span> <var>linkObject</var> in <var>links</var>:</p>

    <p class="note">The moment we receive the early hint link header, we begin <span
    data-x="concept-fetch">fetching</span> <var>earlyRequest</var>. If it comes back before the
    <code>Document</code> is created, we set <var>earlyResponse</var> to the <span
    data-x="concept-response">response</span> of that <span data-x="concept-fetch">fetch</span> and
    once the <code>Document</code> is created we commit it (by making it available in the <span>map
    of preloaded resources</span> as if it was a <code>link</code> element). If the
    <code>Document</code> is created first, the <span data-x="concept-response">response</span> is
    committed as soon as it becomes available.</p>

    <ol>
     <li><p>Let <var>rel</var> be <var>linkObject</var>["<code
     data-x="">relation_type</code>"].</p></li>

     <li>
      <p>Let <var>options</var> be a new <span>link processing options</span> with</p>

      <dl class="props">
       <dt><span data-x="link options href">href</span></dt>
       <dd><var>linkObject</var>["<code data-x="">target_uri</code>"]</dd>

       <dt><span data-x="link options initiator">initiator</span></dt>
       <dd>"<code data-x="">early-hint</code>"</dd>

       <dt><span data-x="link options base URL">base URL</span></dt>
       <dd><var>response</var>'s <span data-x="concept-response-url">URL</span></dd>

       <dt><span data-x="link options origin">origin</span></dt>
       <dd><var>response</var>'s <span data-x="concept-response-url">URL</span>'s <span
       data-x="concept-url-origin">origin</span></dd>

       <dt><span data-x="link options environment">environment</span></dt>
       <dd><var>reservedEnvironment</var></dd>

       <dt><span data-x="link options policy container">policy container</span></dt>
       <dd><var>earlyPolicyContainer</var></dd>
      </dl>
     </li>

     <li>
      <p>Let <var>attribs</var> be <var>linkObject</var>["<code
      data-x="">target_attributes</code>"].</p>

      <p class="note">Only the <code data-x="attr-link-as">as</code>, <code
      data-x="attr-link-crossorigin">crossorigin</code>, <code
      data-x="attr-link-integrity">integrity</code>, and <code data-x="attr-link-type">type</code>
      attributes are handled as part of early hint processing. The other ones, in particular <code
      data-x="attr-link-blocking">blocking</code>, <code
      data-x="attr-link-imagesrcset">imagesrcset</code>, <code
      data-x="attr-link-imagesizes">imagesizes</code>, and <code
      data-x="attr-link-media">media</code> are only applicable once a <code>Document</code> is
      created.</p>
     </li>

     <li><p><span>Apply link options from parsed header attributes</span> to <var>options</var>
     given <var>attribs</var>.</p></li>

     <li><p>Run the <span>process a link header</span> steps for <var>rel</var> given
     <var>options</var>.</p></li>

     <li><p><span data-x="list append">Append</span> <var>options</var> to
     <var>earlyHints</var>.</p></li>
    </ol>
   </li>

   <li>
    <p>Return the following substeps given <code>Document</code> <var>doc</var>: <span
    data-x="list iterate">for each</span> <var>options</var> in <var>earlyHints</var>:</p>

    <ol>
     <li><p>If <var>options</var>'s <span
     data-x="link options on document ready">on document ready</span> is null, then set
     <var>options</var>'s <span data-x="link options document">document</span> to
     <var>doc</var>s.</p></li>

     <li><p>Otherwise, call <var>options</var>'s <span
     data-x="link options on document ready">on document ready</span> with <var>doc</var>.</p></li>
    </ol>
   </li>
  </ol>

  </div>

  <h5>Providing users with a means to follow hyperlinks created using the <code>link</code>
  element</h5>

  <p id="linkui">Interactive user agents may provide users with a means to <span data-x="following
  hyperlinks">follow the hyperlinks</span> created using the <code>link</code> element, somewhere
  within their user interface. The exact interface is not defined by this specification, but it
  could include the following information (obtained from the element's attributes, again as defined
  below), in some form or another (possibly simplified), for each <span>hyperlink</span> created
  with each <code>link</code> element in the document:</p>

  <ul> <!-- the order here is the order that makes most sense for a UI -->

   <li>The relationship between this document and the resource (given by the <code
   data-x="attr-link-rel">rel</code> attribute)</li>

   <li>The title of the resource (given by the <code data-x="attr-link-title">title</code>
   attribute).</li>

   <li>The address of the resource (given by the <code data-x="attr-link-href">href</code>
   attribute).</li>

   <li>The language of the resource (given by the <code data-x="attr-link-hreflang">hreflang</code>
   attribute).</li>

   <li>The optimum media for the resource (given by the <code data-x="attr-link-media">media</code>
   attribute).</li>

  </ul>

  <p>User agents could also include other information, such as the type of the resource (as given by
  the <code data-x="attr-link-type">type</code> attribute).</p>




  <h4 id="the-meta-element">The <dfn element id="meta"><code>meta</code></dfn>
  element</h4>

  <dl class="element">
   <dt><span data-x="concept-element-categories">Categories</span>:</dt>
   <dd><span>Metadata content</span>.</dd>
   <dd>If the <code data-x="attr-itemprop">itemprop</code> attribute is present: <span>flow content</span>.</dd>
   <dd>If the <code data-x="attr-itemprop">itemprop</code> attribute is present: <span>phrasing content</span>.</dd>
   <dt><span data-x="concept-element-contexts">Contexts in which this element can be used</span>:</dt>
   <dd>If the <code data-x="attr-meta-charset">charset</code> attribute is present, or if the element's <code data-x="attr-meta-http-equiv">http-equiv</code> attribute is in the <span data-x="attr-meta-http-equiv-content-type">Encoding declaration state</span>: in a <code>head</code> element.</dd>
   <dd>If the <code data-x="attr-meta-http-equiv">http-equiv</code> attribute is present but not in the <span data-x="attr-meta-http-equiv-content-type">Encoding declaration state</span>: in a <code>head</code> element.</dd>
   <dd>If the <code data-x="attr-meta-http-equiv">http-equiv</code> attribute is present but not in the <span data-x="attr-meta-http-equiv-content-type">Encoding declaration state</span>: in a <code>noscript</code> element that is a child of a <code>head</code> element.</dd>
   <dd>If the <code data-x="attr-meta-name">name</code> attribute is present: where <span>metadata content</span> is expected.</dd>
   <dd>If the <code data-x="attr-itemprop">itemprop</code> attribute is present: where <span>metadata content</span> is expected.</dd>
   <dd>If the <code data-x="attr-itemprop">itemprop</code> attribute is present: where <span>phrasing content</span> is expected.</dd>
   <dt><span data-x="concept-element-content-model">Content model</span>:</dt>
   <dd><span data-x="concept-content-nothing">Nothing</span>.</dd>
   <dt><span data-x="concept-element-attributes">Content attributes</span>:</dt>
   <dd><span>Global attributes</span></dd>
   <dd><code data-x="attr-meta-name">name</code></dd>
   <dd><code data-x="attr-meta-http-equiv">http-equiv</code></dd>
   <dd><code data-x="attr-meta-content">content</code></dd>
   <dd><code data-x="attr-meta-charset">charset</code></dd>
   <dd><code data-x="attr-meta-media">media</code></dd>
   <dt><span
   data-x="concept-element-accessibility-considerations">Accessibility considerations</span>:</dt>
   <dd><a href="https://w3c.github.io/html-aria/#el-meta">For authors</a>.</dd>
   <dd><a href="https://w3c.github.io/html-aam/#el-meta">For implementers</a>.</dd>
   <dt><span data-x="concept-element-dom">DOM interface</span>:</dt>
   <dd w-nodev>
    <pre><code class="idl">[Exposed=Window]
interface <dfn interface>HTMLMetaElement</dfn> : <span>HTMLElement</span> {
  [<span>HTMLConstructor</span>] constructor();

  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-meta-name">name</span>;
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-meta-httpEquiv">httpEquiv</span>;
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-meta-content">content</span>;
  [<span>CEReactions</span>] attribute DOMString <span data-x="dom-meta-media">media</span>;

  // <a href="#HTMLMetaElement-partial">also has obsolete members</a>
};</code></pre>
   </dd>
   <dd w-dev>Uses <code>HTMLMetaElement</code>.</dd>
  </dl>

  <p>The <code>meta</code> element <span>represents</span> various kinds of metadata that cannot be
  expressed using the <code>title</code>, <code>base</code>, <code>link</code>, <code>style</code>,
  and <code>script</code> elements.</p>

  <p>The <code>meta</code> element can represent document-level metadata with the <code
  data-x="attr-meta-name">name</code> attribute, pragma directives with the <code
  data-x="attr-meta-http-equiv">http-equiv</code> attribute, and the file's <span>character encoding
  declaration</span> when an HTML document is serialized to string form (e.g. for transmission over
  the network or for disk storage) with the <code data-x="attr-meta-charset">charset</code>
  attribute.</p>

  <p>Exactly one of the <code data-x="attr-meta-name">name</code>, <code
  data-x="attr-meta-http-equiv">http-equiv</code>, <code data-x="attr-meta-charset">charset</code>,
  and <code data-x="attr-itemprop">itemprop</code> attributes must be specified.</p>

  <p>If either <code data-x="attr-meta-name">name</code>, <code
  data-x="attr-meta-http-equiv">http-equiv</code>, or <code data-x="attr-itemprop">itemprop</code> is
  specified, then the <code data-x="attr-meta-content">content</code> attribute must also be
  specified. Otherwise, it must be omitted.</p>

  <p>The <dfn element-attr for="meta"><code data-x="attr-meta-charset">charset</code></dfn>
  attribute specifies the <span data-x="encoding">character encoding</span> used by the document.
  This is a <span>character encoding declaration</span>. If the attribute is present, its value must
  be an <span>ASCII case-insensitive</span> match for the string "<code data-x="">utf-8</code>".</p>

  <p class="note">The <code data-x="attr-meta-charset">charset</code> attribute on the
  <code>meta</code> element has no effect in XML documents, but is allowed in XML documents in order
  to facilitate migration to and from XML.</p>

  <p>There must not be more than one <code>meta</code> element with a <code
  data-x="attr-meta-charset">charset</code> attribute per document.</p>

  <p>The <dfn for="meta" element-attr><code data-x="attr-meta-content">content</code></dfn>
  attribute gives the value of the document metadata or pragma directive when the element is used
  for those purposes. The allowed values depend on the exact context, as described in subsequent
  sections of this specification.</p>

  <p>If a <code>meta</code> element has a <dfn element-attr for="meta"><code
  data-x="attr-meta-name">name</code></dfn> attribute, it sets document metadata. Document metadata
  is expressed in terms of name-value pairs, the <code data-x="attr-meta-name">name</code> attribute
  on the <code>meta</code> element giving the name, and the <code
  data-x="attr-meta-content">content</code> attribute on the same element giving the value. The name
  specifies what aspect of metadata is being set; valid names and the meaning of their values are
  described in the following sections. If a <code>meta</code> element has no <code
  data-x="attr-meta-content">content</code> attribute, then the value part of the metadata
  name-value pair is the empty string.</p>

  <p>The <dfn element-attr for="meta"><code data-x="attr-meta-media">media</code></dfn> attribute
  says which media the metadata applies to. The value must be a <span>valid media query list</span>.
  Unless the <code data-x="attr-meta-name">name</code> is <code
  data-x="meta-theme-color">theme-color</code>, the <code data-x="attr-meta-media">media</code>
  attribute has no effect on the processing model and must not be used by authors.</p>

  <div w-nodev>

  <p>The <dfn attribute for="HTMLMetaElement"><code data-x="dom-meta-name">name</code></dfn>, <dfn
  attribute for="HTMLMetaElement"><code data-x="dom-meta-content">content</code></dfn>, and <dfn
  attribute for="HTMLMetaElement"><code data-x="dom-meta-media">media</code></dfn> IDL attributes
  must <span>reflect</span> the respective content attributes of the same name. The IDL attribute
  <dfn attribute for="HTMLMetaElement"><code data-x="dom-meta-httpEquiv">httpEquiv</code></dfn> must
  <span>reflect</span> the content attribute <code
  data-x="attr-meta-http-equiv">http-equiv</code>.</p>

  </div>


  <h5>Standard metadata names</h5>

  <p>This specification defines a few names for the <code data-x="attr-meta-name">name</code>
  attribute of the <code>meta</code> element.</p>

  <p>Names are case-insensitive<span class=impl>, and must be compared in an <span>ASCII
  case-insensitive</span> manner</span>.</p>

  <dl>
   <dt><dfn attr-value for="meta/name"><code
   data-x="meta-application-name">application-name</code></dfn></dt>

   <dd>
    <p>The value must be a short free-form string giving the name of the web application that the
    page represents. If the page is not a web application, the <code
    data-x="meta-application-name">application-name</code> metadata name must not be used.
    Translations of the web application's name may be given, using the <code
    data-x="attr-lang">lang</code> attribute to specify the language of each name.</p>

    <p>There must not be more than one <code>meta</code> element with a given <span>language</span>
    and where the <code data-x="attr-meta-name">name</code> attribute value is an
    <span>ASCII case-insensitive</span> match for
    <code data-x="meta-application-name">application-name</code> per document.</p>

    <div w-nodev>

    <p>User agents may use the application name in UI in preference to the page's
    <code>title</code>, since the title might include status messages and the like relevant to the
    status of the page at a particular moment in time instead of just being the name of the
    application.</p>

    <p>To find the application name to use given an ordered list of languages (e.g. British English,
    American English, and English), user agents must run the following steps:</p>

    <ol>
     <li><p>Let <var>languages</var> be the list of languages.</p></li>

     <li><p>Let <var>default language</var> be the <span>language</span> of the
     <code>Document</code>'s <span>document element</span>, if any, and if that language is not
     unknown.</p>

     <li><p>If there is a <var>default language</var>, and if it is not the same language
     as any of the languages in <var>languages</var>, append it to <var>languages</var>.</p></li>

     <li>
      <p>Let <var>winning language</var> be the first language in <var>languages</var> for which
      there is a <code>meta</code> element in the <code>Document</code> where the
      <code data-x="attr-meta-name">name</code> attribute value is an
      <span>ASCII case-insensitive</span> match for
      <code data-x="meta-application-name">application-name</code> and whose
      <span>language</span> is the language in question.</p>

      <p>If none of the languages have such a <code>meta</code> element, then return;
      there's no given application name.</p>
     </li>

     <li>
      <p>Return the value of the <code data-x="attr-meta-content">content</code> attribute of the
      first <code>meta</code> element in the <code>Document</code> in <span>tree order</span> where the
      <code data-x="attr-meta-name">name</code> attribute value is an
      <span>ASCII case-insensitive</span> match for <code data-x="meta-application-name">application-name</code>
      and whose <span>language</span> is <var>winning language</var>.</p>
     </li>
    </ol>

    <p class="note">This algorithm would be used by a browser when it needs a name for the page, for
    instance, to label a bookmark. The languages it would provide to the algorithm would be the
    user's preferred languages.</p>

    </div>
   </dd>

   <dt><dfn attr-value for="meta/name"><code data-x="meta-author">author</code></dfn></dt>

   <dd><p>The value must be a free-form string giving the name of one of the page's
   authors.</p></dd>

   <dt><dfn attr-value for="meta/name"><code data-x="meta-description">description</code></dfn></dt>

   <dd><p>The value must be a free-form string that describes the page. The value must be
   appropriate for use in a directory of pages, e.g. in a search engine. There must not be more than
   one <code>meta</code> element where the <code data-x="attr-meta-name">name</code> attribute value
   is an <span>ASCII case-insensitive</span> match for
   <code data-x="meta-description">description</code> per document.</p></dd>

   <dt><dfn attr-value for="meta/name"><code data-x="meta-generator">generator</code></dfn></dt>

   <dd>
    <p>The value must be a free-form string that identifies one of the software packages used to
    generate the document. This value must not be used on pages whose markup is not generated by
    software, e.g. pages whose markup was written by a user in a text editor.</p>

    <div class="example">

     <p>Here is what a tool called "Frontweaver" could include in its output, in the page's
     <code>head</code> element, to identify itself as the tool used to generate the page:</p>

     <pre><code class="html">&lt;meta name=generator content="Frontweaver 8.2"></code></pre>

    </div>
   </dd>

   <dt><dfn attr-value for="meta/name"><code data-x="meta-keywords">keywords</code></dfn></dt>

   <dd>
    <p>The value must be a <span>set of comma-separated tokens</span>, each of which is a keyword
    relevant to the page.</p>

    <div class="example">

     <p>This page about typefaces on British motorways uses a <code>meta</code> element to specify
     some keywords that users might use to look for the page:</p>

     <pre><code class="html">&lt;!DOCTYPE HTML>
&lt;html lang="en-GB">
 &lt;head>
  &lt;title>Typefaces on UK motorways&lt;/title>
  &lt;meta name="keywords" content="british,type face,font,fonts,highway,highways">
 &lt;/head>
 &lt;body>
  ...</code></pre>

    </div>

    <p class="note">Many search engines do not consider such keywords, because this feature has
    historically been used unreliably and even misleadingly as a way to spam search engine results
    in a way that is not helpful for users.</p>

    <div w-nodev>

    <p>To obtain the list of keywords that the author has specified as applicable to the page, the
    user agent must run the following steps:</p>

    <ol>
     <li><p>Let <var>keywords</var> be an empty list.</p></li>

     <li>
      <p>For each <code>meta</code> element with a <code data-x="attr-meta-name">name</code>
      attribute and a <code data-x="attr-meta-content">content</code> attribute and where the <code
      data-x="attr-meta-name">name</code> attribute value is an <span>ASCII case-insensitive</span>
      match for <code data-x="meta-keywords">keywords</code>:</p>

      <ol>
       <li><p><span data-x="split a string on commas">Split the value of the element's <code
       data-x="attr-meta-content">content</code> attribute on commas</span>.</p></li>

       <li><p>Add the resulting tokens, if any, to <var>keywords</var>.</p></li>
      </ol>
     </li>

     <li><p>Remove any duplicates from <var>keywords</var>.</p></li>

     <li><p>Return <var>keywords</var>. This is the list of keywords that the author has
     specified as applicable to the page.</p></li>
    </ol>

    <p>User agents should not use this information when there is insufficient confidence in the
    reliability of the value.</p>

    <p class="example">For instance, it would be reasonable for a content management system to use
    the keyword information of pages within the system to populate the index of a site-specific
    search engine, but a large-scale content aggregator that used this information would likely find
    that certain users would try to game its ranking mechanism through the use of inappropriate
    keywords.</p>

    </div>
   </dd>

   <dt><dfn attr-value for="meta/name"><code data-x="meta-referrer">referrer</code></dfn></dt>

   <dd>
    <p>The value must be a <span>referrer policy</span>, which defines the default <span>referrer
    policy</span> for the <code>Document</code>. <ref spec=REFERRERPOLICY></p>

    <div w-nodev>

    <p>If any <code>meta</code> element <var>element</var> is <span data-x="node is inserted into a
    document">inserted into the document</span>, or has its <code
    data-x="attr-meta-name">name</code> or <code data-x="attr-meta-content">content</code>
    attributes changed, user agents must run the following algorithm:</p>

    <ol>
     <li><p>If <var>element</var> is not <span>in a document tree</span>, then return.</p></li>

     <li><p>If <var>element</var> does not have a <code data-x="attr-meta-name">name</code>
     attribute whose value is an <span>ASCII case-insensitive</span> match for "<code
     data-x="meta-referrer">referrer</code>", then return.</p></li>

     <li><p>If <var>element</var> does not have a <code data-x="attr-meta-content">content</code>
     attribute, or that attribute's value is the empty string, then return.</p></li>

     <li><p>Let <var>value</var> be the value of <var>element</var>'s <code
     data-x="attr-meta-content">content</code> attribute, <span>converted to ASCII
     lowercase</span>.</p></li>

     <li>
      <p>If <var>value</var> is one of the values given in the first column of the following table,
      then set <var>value</var> to the value given in the second column:</p>

      <table>
       <thead>
        <tr>
         <th>Legacy value
         <th>Referrer policy
       <tbody>
        <tr>
         <td><code data-x="">never</code>
         <td><code data-x="referrer-policy-no-referrer">no-referrer</code>
        <tr>
         <td><code data-x="">default</code>
         <td>the <span>default referrer policy</span>
        <tr>
         <td><code data-x="">always</code>
         <td><code data-x="referrer-policy-unsafe-url">unsafe-url</code>
        <tr>
         <td><code data-x="">origin-when-crossorigin</code>
         <td><code data-x="referrer-policy-origin-when-cross-origin">origin-when-cross-origin</code>
      </table>
     </li>

     <li><p>If <var>value</var> is a <span>referrer policy</span>, then set <var>element</var>'s
     <span>node document</span>'s <span data-x="concept-document-policy-container">policy
     container</span>'s <span data-x="policy-container-referrer-policy">referrer policy</span> to
     <var>policy</var>.</p></li>
    </ol>

    <p class="note">For historical reasons, unlike other standard metadata names, the processing
    model for <code data-x="meta-referrer">referrer</code> is not responsive to element removals,
    and does not use <span>tree order</span>. Only the most-recently-inserted or
    most-recently-modified <code>meta</code> element in this state has an effect.</p>

    </div>
   </dd>

   <dt><dfn attr-value for="meta/name"><code data-x="meta-theme-color">theme-color</code></dfn></dt>

   <dd>
    <p>The value must be a string that matches the CSS <span>&lt;color></span> production, defining
    a suggested color that user agents should use to customize the display of the page or of the
    surrounding user interface. For example, a browser might color the page's title bar with the
    specified value, or use it as a color highlight in a tab bar or task switcher.</p>

    <p>Within an HTML document, the <code data-x="attr-meta-media">media</code> attribute value must
    be unique amongst all the <code>meta</code> elements with their <code
    data-x="attr-meta-name">name</code> attribute value set to an <span>ASCII
    case-insensitive</span> match for <code data-x="meta-theme-color">theme-color</code>.</p>

    <div class="example">

     <p>This standard itself uses "WHATWG green" as its theme color:</p>

     <pre><code class="html">&lt;!DOCTYPE HTML>
&lt;title>HTML Standard&lt;/title>
&lt;meta name="theme-color" content="#3c790a">
...</code></pre>

    </div>

    <p>The <code data-x="attr-meta-media">media</code> attribute may be used to describe the context
    in which the provided color should be used.</p>

    <div class="example">
     <p>If we only wanted to use "WHATWG green" as this standard's theme color in dark mode,
     we could use the <code data-x="">prefers-color-scheme</code> media feature:</p>

     <pre><code class="html">&lt;!DOCTYPE HTML>
&lt;title>HTML Standard&lt;/title>
&lt;meta name="theme-color" content="#3c790a" media="(prefers-color-scheme: dark)">
...</code></pre>
    </div>

    <div w-nodev>

     <p>To obtain a page's theme color, user agents must run the following steps:</p>

     <ol>
      <li>
       <p>Let <var>candidate elements</var> be the list of all <code>meta</code> elements that
       meet the following criteria, in <span>tree order</span>:</p>

       <ul class="brief">
        <li>The element is <span>in a document tree</span></li>
        <li>The element has a <code data-x="attr-meta-name">name</code> attribute, whose value is
        an <span>ASCII case-insensitive</span> match for <code data-x="meta-theme-color">theme-color</code></li>
        <li>The element has a <code data-x="attr-meta-content">content</code> attribute</li>
       </ul>
      </li>

      <li>
       <p>For each <var>element</var> in <var>candidate elements</var>:</p>

       <ol>
        <li><p>If <var>element</var> has a <code data-x="attr-link-media">media</code> attribute
        and the value of <var>element</var>'s <code data-x="attr-meta-media">media</code>
        attribute does not <span data-x="matches the environment">match the environment</span>, then
        <span>continue</span>.</p></li>

        <li><p>Let <var>value</var> be the result of <span data-x="strip leading and trailing ASCII
        whitespace">stripping leading and trailing ASCII whitespace</span> from the value of
        <var>element</var>'s <code data-x="attr-meta-content">content</code> attribute.</p></li>

        <li><p>Let <var>color</var> be the result of <span data-x="parse a CSS &lt;color>
        value">parsing</span> <var>value</var>.</p></li>

        <li><p>If <var>color</var> is not failure, then return <var>color</var>.</p></li>
       </ol>
      </li>

      <li><p>Return nothing (the page has no theme color).</p></li>
     </ol>

     <p>If any <code>meta</code> elements are <span data-x="node is inserted into a
     document">inserted into the document</span> or <span data-x="node is removed from a
     document">removed from the document</span>, or existing <code>meta</code> elements have their
     <code data-x="attr-meta-name">name</code>, <code data-x="attr-meta-content">content</code>, or
     <code data-x="attr-link-media">media</code> attributes changed, or if the environment changes
     such that any <code>meta</code> element's <code data-x="attr-link-media">media</code>
     attribute's value may now or may no longer <span data-x="matches the environment">match the
     environment</span>, user agents must re-run the above algorithm and apply the result to any
     affected UI.</p>

    </div>

    <p>When using the theme color in UI, user agents may adjust it in implementation-specific ways
    to make it more suitable for the UI in question. For example, if a user agent intends to use
    the theme color as a background and display white text over it, it might use a darker variant of
    the theme color in that part of the UI, to ensure adequate contrast.</p>
   </dd>

   <dt><dfn attr-value for="meta/name"><code
   data-x="meta-color-scheme">color-scheme</code></dfn></dt>

   <dd>
    <p>To aid user agents in rendering the page background with the desired color scheme immediately
    (rather than waiting for all CSS in the page to load), a <span>'color-scheme'</span> value can
    be provided in a <code>meta</code> element.</p>

    <p>The value must be a string that matches the syntax for the CSS <span>'color-scheme'</span>
    property value. It determines the <span>page's supported color-schemes</span>.</p>

    <p>There must not be more than one <code>meta</code> element with its <code
    data-x="attr-meta-name">name</code> attribute value set to an
    <span>ASCII case-insensitive</span> match for <code
    data-x="meta-color-scheme">color-scheme</code> per document.</p>

    <div class="example">
     <p>The following declaration indicates that the page is aware of and can handle a color scheme
     with dark background colors and light foreground colors:</p>

     <pre><code class="html">&lt;meta name="color-scheme" content="dark"></code></pre>
    </div>

    <div w-nodev>

     <p>To obtain a <span>page's supported color-schemes</span>, user agents must run the following steps:</p>

     <ol>
      <li>
       <p>Let <var>candidate elements</var> be the list of all <code>meta</code> elements that
       meet the following criteria, in <span>tree order</span>:</p>

       <ul class="brief">
        <li>The element is <span>in a document tree</span></li>
        <li>The element has a <code data-x="attr-meta-name">name</code> attribute, whose value is
        an <span>ASCII case-insensitive</span> match for
        <code data-x="meta-color-scheme">color-scheme</code></li>
        <li>The element has a <code data-x="attr-meta-content">content</code> attribute</li>
       </ul>
      </li>

      <li>
       <p>For each <var>element</var> in <var>candidate elements</var>:</p>

       <ol>
        <li>Let <var>parsed</var> be the result of <span data-x="parse a list of component
        values">parsing a list of component values</span> given the value of <var>element</var>'s
        <code data-x="attr-meta-content">content</code> attribute.</li>

        <li>If <var>parsed</var> is a valid CSS <span>'color-scheme'</span> property value, then
        return <var>parsed</var>.</li>
       </ol>
      </li>

      <li><p>Return null.</p></li>
     </ol>

     <p>If any <code>meta</code> elements are <span data-x="node is inserted into a
     document">inserted into the document</span> or <span data-x="node is removed from a
     document">removed from the document</span>, or existing <code>meta</code> elements have their
     <code data-x="attr-meta-name">name</code> or <code data-x="attr-meta-content">content</code>
     attributes changed, user agents must re-run the above algorithm.</p>

    </div>

    <p class="note">Because these rules check successive elements until they find a match, an
    author can provide multiple such values to handle fallback for legacy user agents. Opposite to
    how CSS fallback works for properties, the multiple meta elements needs to be arranged with the
    legacy values after the newer values.</p>
   </dd>
  </dl>



  <h5>Other metadata names</h5>

  <p>Anyone can create and use their own <dfn data-x="concept-meta-extensions">extensions to the
  predefined set of metadata names</dfn>. There is no requirement to register such extensions.</p>

  <p>However, a new metadata name should not be created in any of the following cases:</p>

  <ul>
   <li><p>If either the name is a <span>URL</span>, or the value of its accompanying <code
   data-x="attr-meta-content">content</code> attribute is a <span>URL</span>; in those cases,
   registering it as an <span data-x="concept-rel-extensions">extension to the predefined set of
   link types</span> is encouraged (rather than creating a new metadata name).</p></li>

   <li><p>If the name is for something expected to have processing requirements in user agents; in
   that case it ought to be standardized.</p></li>
  </ul>

  <p>Also, before creating and using a new metadata name, consulting the <a
  href="https://wiki.whatwg.org/wiki/MetaExtensions">WHATWG Wiki MetaExtensions page</a> is
  encouraged — to avoid choosing a metadata name that's already in use, and to avoid duplicating the
  purpose of any metadata names that are already in use, and to avoid new standardized names
  clashing with your chosen name. <ref spec=WHATWGWIKI></p>

  <p>Anyone is free to edit the WHATWG Wiki MetaExtensions page at any time to add a metadata name.
  New metadata names can be specified with the following information:</p>

  <dl>
   <dt>Keyword</dt>

   <dd><p>The actual name being defined. The name should not be confusingly similar to any other
   defined name (e.g. differing only in case).</p></dd>


   <dt>Brief description</dt>

   <dd><p>A short non-normative description of what the metadata name's meaning is, including the
   format the value is required to be in.</p></dd>


   <dt>Specification</dt>

   <dd>A link to a more detailed description of the metadata name's semantics and requirements. It
   could be another page on the wiki, or a link to an external page.</dd>


   <dt>Synonyms</dt>

   <dd><p>A list of other names that have exactly the same processing requirements. Authors should
   not use the names defined to be synonyms (they are only intended to allow user agents to support
   legacy content). Anyone may remove synonyms that are not used in practice; only names that need to
   be processed as synonyms for compatibility with legacy content are to be registered in this
   way.</p></dd>


   <dt>Status</dt>

   <dd>
    <p>One of the following:</p>

    <dl>
     <dt>Proposed</dt>

     <dd>The name has not received wide peer review and approval. Someone has proposed it and is, or
     soon will be, using it.</dd>

     <dt>Ratified</dt>

     <dd>The name has received wide peer review and approval. It has a specification that
     unambiguously defines how to handle pages that use the name, including when they use it in
     incorrect ways.</dd>

     <dt>Discontinued</dt>

     <dd>The metadata name has received wide peer review and it has been found wanting. Existing
     pages are using this metadata name, but new pages should avoid it. The "brief description" and
     "specification" entries will give details of what authors should use instead, if anything.</dd>
    </dl>

    <p>If a metadata name is found to be redundant with existing values, it should be removed and
    listed as a synonym for the existing value.</p>

    <p>If a metadata name is added in the "proposed" state for a period of a month or more without
    being used or specified, then it may be removed from the WHATWG Wiki MetaExtensions page.</p>

    <p>If a metadata name is added with the "proposed" status and found to be redundant with
    existing values, it should be removed and listed as a synonym for the existing value. If a
    metadata name is added with the "proposed" status and found to be harmful, then it should be
    changed to "discontinued" status.</p>

    <p>Anyone can change the status at any time, but should only do so in accordance with the
    definitions above.</p>
   </dd>
  </dl>



  <h5>Pragma directives</h5>

  <p>When the <dfn for="meta" element-attr><code
  data-x="attr-meta-http-equiv">http-equiv</code></dfn> attribute is specified on a
  <code>meta</code> element, the element is a pragma directive.</p>

  <p>The <code data-x="attr-meta-http-equiv">http-equiv</code> attribute is an <span>enumerated
  attribute</span>. The following table lists the keywords defined for this attribute. The states
  given in the first cell of the rows with keywords give the states to which those keywords map.
  <span w-nodev>Some of the keywords are non-conforming, as noted in the last
  column.</span></p>

  <table id="table-http-equiv">
   <thead>
    <tr>
     <th>State
     <th>Keyword
     <th>Notes
   <tbody>
    <tr w-nodev>
     <td><span data-x="attr-meta-http-equiv-content-language">Content Language</span>
     <td><dfn attr-value for="meta/http-equiv"><code
     data-x="attr-meta-http-equiv-keyword-content-language">content-language</code></dfn>
     <td>Non-conforming
    <tr>
     <td><span data-x="attr-meta-http-equiv-content-type">Encoding declaration</span>
     <td><dfn attr-value for="meta/http-equiv"><code data-x="attr-meta-http-equiv-keyword-content-type">content-type</code></dfn>
     <td>
    <tr>
     <td><span data-x="attr-meta-http-equiv-default-style">Default style</span>
     <td><dfn attr-value for="meta/http-equiv"><code
     data-x="attr-meta-http-equiv-keyword-default-style">default-style</code></dfn>
     <td>
    <tr>
     <td><span data-x="attr-meta-http-equiv-refresh">Refresh</span>
     <td><dfn attr-value for="meta/http-equiv"><code
     data-x="attr-meta-http-equiv-keyword-refresh">refresh</code></dfn>
     <td>
    <tr w-nodev>
     <td><span data-x="attr-meta-http-equiv-set-cookie">Set-Cookie</span>
     <td><dfn attr-value for="meta/http-equiv"><code
     data-x="attr-meta-http-equiv-keyword-set-cookie">set-cookie</code></dfn>
     <td>Non-conforming
    <tr>
     <td><span data-x="attr-meta-http-equiv-x-ua-compatible">X-UA-Compatible</span>
     <td><dfn attr-value for="meta/http-equiv"><code
     data-x="attr-meta-http-equiv-keyword-x-ua-compatible">x-ua-compatible</code></dfn>
     <td>
    <tr>
     <td><span data-x="attr-meta-http-equiv-content-security-policy">Content security policy</span>
     <td><dfn attr-value for="meta/http-equiv"><code
     data-x="attr-meta-http-equiv-keyword-content-security-policy">content-security-policy</code></dfn>
     <td>
  </table>

<!--
Content-Script-Type and Content-Style-Type don't do anything (and are non-conforming).

DATA: According to Henri's validator stats, here are common
non-conforming values used by people who validate (sample of 400
pages):

COUNT ERROR
   20 Bad value "Content-Language" for attribute "http-equiv" on element "meta".
   17 Bad value "Content-Style-Type" for attribute "http-equiv" on element "meta".
   12 Bad value "Expires" for attribute "http-equiv" on element "meta".
   11 Bad value "Pragma" for attribute "http-equiv" on element "meta".
   11 Bad value "imagetoolbar" for attribute "http-equiv" on element "meta".
   10 Bad value "Content-Script-Type" for attribute "http-equiv" on element "meta".
   10 Bad value "content-language" for attribute "http-equiv" on element "meta".
 [...]
https://hsivonen.com/test/moz/analysis.txt

Here's some more data, this time from Philip`, on a sample of 15k pages.

  COUNT VALUE
   1181 Content-Language
    430 Content-Style-Type
    342 imagetoolbar
    276 content-language
    269 Pragma
    260 expires
    227 Expires
    211 pragma
    146 Content-Script-Type
    132 keywords
    119 Page-Enter
    116 description
    106 reply-to
    102 Cache-Control
   [...]
https://philip.html5.org/data/meta-http-equiv.txt

These numbers are low; further study is required to establish what
people expect to have work and what is necessary.
-->

  <div w-nodev>

  <p>When a <code>meta</code> element is <span data-x="node is inserted into a document">inserted
  into the document</span>, if its <code data-x="attr-meta-http-equiv">http-equiv</code> attribute is
  present and represents one of the above states, then the user agent must run the algorithm
  appropriate for that state, as described in the following list:</p>

  </div>

  <dl>
   <dt w-nodev><dfn data-x="attr-meta-http-equiv-content-language">Content language state</dfn>
   (<code data-x="">http-equiv="<code data-x="attr-meta-http-equiv-keyword-content-language">content-language</code>"</code>)

   <dd w-nodev>

    <p class="note">This feature is non-conforming. Authors are encouraged to use the <code
    data-x="attr-lang">lang</code> attribute instead.</p>

    <p>This pragma sets the <dfn>pragma-set default language</dfn>. Until such a pragma is
    successfully processed, there is no <span>pragma-set default language</span>.</p>

    <!-- https://www.hixie.ch/tests/adhoc/html/meta/content-language/ -->

    <ol>
     <li><p>If the <code>meta</code> element has no <code data-x="attr-meta-content">content</code>
     attribute, then return.</p></li>

     <li><p>If the element's <code data-x="attr-meta-content">content</code> attribute contains a
     U+002C COMMA character (,) then return.</p></li><!-- if you remove this,
     un-comment-out the corresponding bits in the step below. -->

     <li><p>Let <var>input</var> be the value of the element's <code
     data-x="attr-meta-content">content</code> attribute.</p></li>

     <li><p>Let <var>position</var> point at the first character of <var>input</var>.</p></li>

     <li><p><span>Skip ASCII whitespace</span> within <var>input</var> given
     <var>position</var>.</p></li>

     <li><p><span>Collect a sequence of code points</span> that are not <span>ASCII
     whitespace</span> from <var>input</var> given <var>position</var>.</p></li>

     <li><p>Let <var>candidate</var> be the string that resulted from the previous
     step.</p></li>

     <li><p>If <var>candidate</var> is the empty string, return.</p></li>

     <li>
      <p>Set the <span>pragma-set default language</span> to <var>candidate</var>.</p>

      <p class="note">If the value consists of multiple space-separated tokens, tokens after the
      first are ignored.</p>
     </li>
    </ol>

    <p class="note">This pragma is almost, but not quite, entirely unlike the HTTP `<code
    data-x="http-content-language">Content-Language</code>` header of the same name. <ref
    spec=HTTP></p>
   </dd>

   <dt><dfn data-x="attr-meta-http-equiv-content-type">Encoding declaration state</dfn> (<code data-x="">http-equiv="<code data-x="attr-meta-http-equiv-keyword-content-type">content-type</code>"</code>)

   <dd>
    <p>The <span data-x="attr-meta-http-equiv-content-type">Encoding declaration state</span> is
    just an alternative form of setting the <code data-x="attr-meta-charset">charset</code>
    attribute: it is a <span>character encoding declaration</span>. <span w-nodev>This state's user
    agent requirements are all handled by the parsing section of the specification.</span></p>

    <p>For <code>meta</code> elements with an <code data-x="attr-meta-http-equiv">http-equiv</code>
    attribute in the <span data-x="attr-meta-http-equiv-content-type">Encoding declaration
    state</span>, the <code data-x="attr-meta-content">content</code> attribute must have a value
    that is an <span>ASCII case-insensitive</span> match for a string that consists of: the literal
    string "<code data-x="">text/html;</code>", optionally followed by any number of <span>ASCII
    whitespace</span>, followed by the literal string "<code data-x="">charset=utf-8</code>".</p>

    <p>A document must not contain both a <code>meta</code> element with an <code
    data-x="attr-meta-http-equiv">http-equiv</code> attribute in the <span
    data-x="attr-meta-http-equiv-content-type">Encoding declaration state</span> and a
    <code>meta</code> element with the <code data-x="attr-meta-charset">charset</code> attribute
    present.</p>

    <p>The <span data-x="attr-meta-http-equiv-content-type">Encoding declaration state</span> may be
    used in <span>HTML documents</span>, but elements with an <code
    data-x="attr-meta-http-equiv">http-equiv</code> attribute in that state must not be used in
    <span>XML documents</span>.</p>
   </dd>

   <dt><dfn data-x="attr-meta-http-equiv-default-style">Default style state</dfn> (<code data-x="">http-equiv="<code data-x="attr-meta-http-equiv-keyword-default-style">default-style</code>"</code>)

   <dd>
    <p>This pragma sets the <span data-x="CSS style sheet set name">name</span> of the default
    <span>CSS style sheet set</span>.</p>

    <div w-nodev>

    <ol>
     <li><p>If the <code>meta</code> element has no <code data-x="attr-meta-content">content</code>
     attribute, or if that attribute's value is the empty string, then return.</p></li>

     <li><p><span>Change the preferred CSS style sheet set name</span> with the name being the value
     of the element's <code data-x="attr-meta-content">content</code> attribute. <ref
     spec=CSSOM></p></li>
    </ol>

    </div>
   </dd>

   <dt><dfn data-x="attr-meta-http-equiv-refresh">Refresh state</dfn> (<code data-x="">http-equiv="<code data-x="attr-meta-http-equiv-keyword-refresh">refresh</code>"</code>)

   <dd>
    <p>This pragma acts as a timed redirect.</p>

    <p>A <code>Document</code> object has an associated <dfn for="Document">will declaratively
    refresh</dfn> (a boolean). It is initially false.</p>

    <div w-nodev>

    <ol>
     <li><p>If the <code>meta</code> element has no <code data-x="attr-meta-content">content</code>
     attribute, or if that attribute's value is the empty string, then return.</p></li>

     <li><p>Let <var>input</var> be the value of the element's <code
     data-x="attr-meta-content">content</code> attribute.</p></li>

     <li><p>Run the <span>shared declarative refresh steps</span> with the <code>meta</code>
     element's <span>node document</span>, <var>input</var>, and the <code>meta</code>
     element.</p></li>
    </ol>

    <p>The <dfn>shared declarative refresh steps</dfn>, given a <code>Document</code> object
    <var>document</var>, string <var>input</var>, and optionally a <code>meta</code> element
    <var>meta</var>, are as follows:</p>

    <ol>
     <li><p>If <var>document</var>'s <span>will declaratively refresh</span> is true, then
     return.</p></li>

     <li><p>Let <var>position</var> point at the first <span>code point</span> of
     <var>input</var>.</p></li>

     <li><p><span>Skip ASCII whitespace</span> within <var>input</var> given
     <var>position</var>.</p></li>

     <li><p>Let <var>time</var> be 0.</p></li>

     <li><p><span>Collect a sequence of code points</span> that are <span>ASCII digits</span> from
     <var>input</var> given <var>position</var>, and let the result be
     <var>timeString</var>.</p></li>

     <li>
      <p>If <var>timeString</var> is the empty string, then:</p>

      <ol>
       <li><p>If the <span>code point</span> in <var>input</var> pointed to by <var>position</var>
       is not U+002E (.), then return.</p></li>
      </ol>
     </li>

     <li><p>Otherwise, set <var>time</var> to the result of parsing <var>timeString</var> using the
     <span>rules for parsing non-negative integers</span>.</p></li>

     <li><p><span>Collect a sequence of code points</span> that are <span>ASCII digits</span> and
     U+002E FULL STOP characters (.) from <var>input</var> given <var>position</var>. Ignore any
     collected characters.</p></li>

     <li><p>Let <var>urlRecord</var> be <var>document</var>'s <span
     data-x="concept-document-URL">URL</span>.</p></li>

     <li>
      <p>If <var>position</var> is not past the end of <var>input</var>, then:</p>

      <ol>
       <li><p>If the <span>code point</span> in <var>input</var> pointed to by <var>position</var>
       is not U+003B (;), U+002C (,), or <span>ASCII whitespace</span>, then return.</p></li>

       <li><p><span>Skip ASCII whitespace</span> within <var>input</var> given
       <var>position</var>.</p></li>

       <li><p>If the <span>code point</span> in <var>input</var> pointed to by <var>position</var>
       is U+003B (;) or U+002C (,), then advance <var>position</var> to the next <span>code
       point</span>.</p></li>

       <li><p><span>Skip ASCII whitespace</span> within <var>input</var> given
       <var>position</var>.</p></li>
      </ol>
     </li>

     <li>
      <p>If <var>position</var> is not past the end of <var>input</var>, then:</p>

      <ol>
       <li><p>Let <var>urlString</var> be the substring of <var>input</var> from the
       <span>code point</span> at <var>position</var> to the end of the string.</p></li>

       <li><p>If the <span>code point</span> in <var>input</var> pointed to by <var>position</var>
       is U+0055 (U) or U+0075 (u), then advance <var>position</var> to the next <span>code
       point</span>. Otherwise, jump to the step labeled <i>skip quotes</i>.</p></li>

       <li><p>If the <span>code point</span> in <var>input</var> pointed to by <var>position</var>
       is U+0052 (R) or U+0072 (r), then advance <var>position</var> to the next <span>code
       point</span>. Otherwise, jump to the step labeled <i>parse</i>.</p></li>

       <li><p>If the <span>code point</span> in <var>input</var> pointed to by <var>position</var>
       is U+004C (L) or U+006C (l), then advance <var>position</var> to the next <span>code
       point</span>. Otherwise, jump to the step labeled <i>parse</i>.</p></li>

       <li><p><span>Skip ASCII whitespace</span> within <var>input</var> given
       <var>position</var>.</p></li>

       <li><p>If the <span>code point</span> in <var>input</var> pointed to by <var>position</var>
       is U+003D (=), then advance <var>position</var> to the next <span>code point</span>.
       Otherwise, jump to the step labeled <i>parse</i>.</p></li>

       <li><p><span>Skip ASCII whitespace</span> within <var>input</var> given
       <var>position</var>.</p></li>

       <li><p><i>Skip quotes</i>: If the <span>code point</span> in <var>input</var> pointed to by
       <var>position</var> is U+0027 (') or U+0022 ("), then let <var>quote</var> be that <span>code
       point</span>, and advance <var>position</var> to the next <span>code point</span>. Otherwise,
       let <var>quote</var> be the empty string.</p></li>

       <li><p>Set <var>urlString</var> to the substring of <var>input</var> from the <span>code
       point</span> at <var>position</var> to the end of the string.</p></li>

       <li><p>If <var>quote</var> is not the empty string, and there is a <span>code point</span> in
       <var>urlString</var> equal to <var>quote</var>, then truncate <var>urlString</var> at that
       <span>code point</span>, so that it and all subsequent <span data-x="code point">code
       points</span> are removed.</p>

       <li><p><i>Parse</i>: <span data-x="parse a url">Parse</span> <var>urlString</var> relative to
       <var>document</var>. If that fails, return. Otherwise, set <var>urlRecord</var> to the
       <span>resulting URL record</span>.</p></li>
      </ol>
     </li>

     <li><p>Set <var>document</var>'s <span>will declaratively refresh</span> to true.</p></li>

     <li>
      <p>Perform one or more of the following steps:</p>

      <ul>
       <li>
        <p>After the refresh has come due (as defined below), if the user has not canceled the
        redirect and, if <var>meta</var> is given, <var>document</var>'s <span>active sandboxing
        flag set</span> does not have the <span>sandboxed automatic features browsing context
        flag</span> set, then <span data-x="navigate">navigate</span><!--DONAV meta refresh-->
        <var>document</var>'s <span>node navigable</span> to <var>urlRecord</var> using
        <var>document</var>, with <i data-x="navigation-hh">historyHandling</i> set to "<code
        data-x="hh-replace">replace</code>".</p>

        <p>For the purposes of the previous paragraph, a refresh is said to have come due as soon as
        the <em>later</em> of the following two conditions occurs:</p>

        <ul>
         <li>At least <var>time</var> seconds have elapsed since <var>document</var>'s
         <span>completely loaded time</span>, adjusted to take into account user or user agent
         preferences.</li>
         <!-- https://software.hixie.ch/utilities/js/live-dom-viewer/?saved=774 -->

         <li>If <var>meta</var> is given, at least <var>time</var> seconds have elapsed since
         <var>meta</var> was <span data-x="node is inserted into a document">inserted into the
         document</span> <var>document</var>, adjusted to take into account user or user agent
         preferences.</li>
         <!-- https://software.hixie.ch/utilities/js/live-dom-viewer/?saved=772 -->
        </ul>

        <p class="note">It is important to use <var>document</var> here, and not <var>meta</var>'s
        <span>node document</span>, as that might have changed between the initial set of steps and
        the refresh coming due and <var>meta</var> is not always given (in case of the HTTP
        `<code>Refresh</code>` header).</p>
       </li>

       <li><p>Provide the user with an interface that, when selected, <span
       data-x="navigate">navigates</span><!--DONAV meta refresh--> <var>document</var>'s <span>node
       navigable</span> to <var>urlRecord</var> using <var>document</var>.</p></li>

       <li><p>Do nothing.</p></li>
      </ul>

      <p>In addition, the user agent may, as with anything, inform the user of any and all aspects
      of its operation, including the state of any timers, the destinations of any timed redirects,
      and so forth.</p>
     </li>
    </ol>

    </div>

    <p id="conformance-attr-meta-http-equiv-refresh">For <code>meta</code> elements with an <code
    data-x="attr-meta-http-equiv">http-equiv</code> attribute in the <span
    data-x="attr-meta-http-equiv-refresh">Refresh state</span>, the <code
    data-x="attr-meta-content">content</code> attribute must have a value consisting either of:</p>

    <ul>
     <li>just a <span>valid non-negative integer</span>, or</li>

     <li>a <span>valid non-negative integer</span>, followed by a U+003B SEMICOLON character
     (;)<!--(add this at some point once the browsers all support it) or a U+002C COMMA character
     (,)-->, followed by one or more <span>ASCII whitespace</span>, followed by a substring that is
     an <span>ASCII case-insensitive</span> match for the string "<code data-x="">URL</code>",
     followed by a U+003D EQUALS SIGN character (=), followed by a <span>valid URL string</span>
     that does not start with a literal U+0027 APOSTROPHE (') or U+0022 QUOTATION MARK (")
     character.</li>
    </ul>

    <p>In the former case, the integer represents a number of seconds before the page is to be
    reloaded; in the latter case the integer represents a number of seconds before the page is to be
    replaced by the page at the given <span>URL</span>.</p>

    <div class="example">
     <p>A news organization's front page could include the following markup in the page's
     <code>head</code> element, to ensure that the page automatically reloads from the server every
     five minutes:</p>

     <pre><code class="html">&lt;meta http-equiv="Refresh" content="300"></code></pre>
    </div>

    <div class="example">
     <p>A sequence of pages could be used as an automated slide show by making each page refresh to
     the next page in the sequence, using markup such as the following:</p>

     <pre><code class="html">&lt;meta http-equiv="Refresh" content="20; URL=page4.html"></code></pre>
    </div>
   </dd>

   <dt w-nodev><dfn data-x="attr-meta-http-equiv-set-cookie">Set-Cookie state</dfn> (<code data-x="">http-equiv="<code data-x="attr-meta-http-equiv-keyword-set-cookie">set-cookie</code>"</code>)

   <dd w-nodev>
    <p>This pragma is non-conforming and has no effect.</p>

    <p>User agents are required to ignore this pragma.</p>
   </dd>


   <dt><dfn data-x="attr-meta-http-equiv-x-ua-compatible">X-UA-Compatible state</dfn> (<code data-x="">http-equiv="<code data-x="attr-meta-http-equiv-keyword-x-ua-compatible">x-ua-compatible</code>"</code>)

   <dd>
    <p>In practice, this pragma encourages Internet Explorer to more closely follow the
    specifications.</p>

    <p>For <code>meta</code> elements with an <code data-x="attr-meta-http-equiv">http-equiv</code>
    attribute in the <span data-x="attr-meta-http-equiv-x-ua-compatible">X-UA-Compatible state</span>, the
    <code data-x="attr-meta-content">content</code> attribute must have a value that is an
    <span>ASCII case-insensitive</span> match for the string "<code data-x="">IE=edge</code>".</p>

    <p>User agents are required to ignore this pragma.</p>
   </dd>


   <dt><dfn export data-x="attr-meta-http-equiv-content-security-policy">Content security policy state</dfn> (<code data-x="">http-equiv="<code data-x="attr-meta-http-equiv-keyword-content-security-policy">content-security-policy</code>"</code>)

   <dd>
    <p>This pragma <span data-x="enforce the policy">enforces</span> a <span>Content Security
    Policy</span> on a <code>Document</code>. <ref spec=CSP></p>

    <div w-nodev>

    <ol>
     <li><p>If the <code>meta</code> element is not a child of a <code>head</code> element,
     return.</p></li>

     <li><p>If the <code>meta</code> element has no <code data-x="attr-meta-content">content</code>
     attribute, or if that attribute's value is the empty string, then return.</p></li>

     <li><p>Let <var>policy</var> be the result of executing Content Security Policy's <span>parse
     a serialized Content Security Policy</span> algorithm on the <code>meta</code> element's
     <code data-x="attr-meta-content">content</code> attribute's value, with a source of "meta",
     and a disposition of "enforce".</p></li>

     <li><p>Remove all occurrences of the <code
     data-x="report-uri directive">report-uri</code>, <code
     data-x="frame-ancestors directive">frame-ancestors</code>, and <code
     data-x="sandbox directive">sandbox</code> <span data-x="Content Security Policy
     directive">directives</span> from <var>policy</var>.</p></li>

     <li><p><span>Enforce the policy</span> <var>policy</var>.</p></li>
    </ol>

    </div>

    <p>For <code>meta</code> elements with an <code data-x="attr-meta-http-equiv">http-equiv</code>
    attribute in the <span data-x="attr-meta-http-equiv-content-security-policy">Content security
    policy state</span>, the <code data-x="attr-meta-content">content</code> attribute must have a
    value consisting of a <span data-x="Content Security Policy syntax">valid Content Security
    Policy</span>, but must not contain any <code data-x="report-uri directive">report-uri</code>,
    <code data-x="frame-ancestors directive">frame-ancestors</code>, or <code data-x="sandbox
    directive">sandbox</code> <span data-x="Content Security Policy directive">directives</span>.
    The <span>Content Security Policy</span> given in the <code
    data-x="attr-meta-content">content</code> attribute will be <span
    data-x="enforce the policy">enforced</span> upon the current document. <ref spec=CSP></p>

    <p class="note">At the time of inserting the <code>meta</code> element to the document, it is
    possible that some resources have already been fetched. For example, images might be stored in
    the <span>list of available images</span> prior to dynamically inserting a <code>meta</code>
    element with an <code data-x="attr-meta-http-equiv">http-equiv</code> attribute in the <span
    data-x="attr-meta-http-equiv-content-security-policy">Content security policy state</span>.
    Resources that have already been fetched are not guaranteed to be blocked by a <span>Content
    Security Policy</span> that's <span data-x="enforce the policy">enforced</span> late.</p>

    <div class="example">

     <p>A page might choose to mitigate the risk of cross-site scripting attacks by preventing the
     execution of inline JavaScript, as well as blocking all plugin content, using a policy such
     as the following:

     <pre><code class="html">&lt;meta http-equiv="Content-Security-Policy" content="script-src 'self'; object-src 'none'"></code></pre>

    </div>
   </dd>
  </dl>

  <p>There must not be more than one <code>meta</code> element with any particular state in the
  document at a time.</p>


  <h5 id="charset">Specifying the document's character encoding</h5>

  <!-- READ ME WHEN EDITING: if we ever move this to the "writing HTML" section, then we have to
  duplicate the requirements in the parsing section for conformance checkers, and we have to make
  sure that the requirements for charset="" apply even in XML, for the <meta charset=""> polyglot
  hack. -->

  <p>A <dfn>character encoding declaration</dfn> is a mechanism by which the <span
  data-x="encoding">character encoding</span> used to store or transmit a document is specified.</p>

  <p>The Encoding standard requires use of the <span>UTF-8</span> <span data-x="encoding">character
  encoding</span> and requires use of the "<code data-x="">utf-8</code>" <span>encoding label</span>
  to identify it. Those requirements necessitate that the document's <span>character encoding
  declaration</span>, if it exists, specifies an <span>encoding label</span> using an <span>ASCII
  case-insensitive</span> match for "<code data-x="">utf-8</code>". Regardless of whether a
  <span>character encoding declaration</span> is present or not, the actual <span data-x="document's
  character encoding">character encoding</span> used to encode the document must be
  <span>UTF-8</span>. <ref spec=ENCODING></p>

  <p w-nodev>To enforce the above rules, authoring tools must default to using <span>UTF-8</span>
  for newly-created documents.</p>

  <p>The following restrictions also apply:</p>

  <ul>
   <li>The character encoding declaration must be serialized without the use of <span
   data-x="syntax-charref">character references</span> or character escapes of any kind.</li>

   <li id="charset1024"><span data-x="" id="charset512">The element containing the character encoding
   declaration must be serialized completely within the first 1024 bytes of the
   document.</span></li> <!-- span is for historical reasons, to keep an old ID alive -->
  </ul>

  <p>In addition, due to a number of restrictions on <code>meta</code> elements, there can only be
  one <code>meta</code>-based character encoding declaration per document.</p> <!-- conformance
  criteria for this one are given in the XML spec, the <meta> section just after defining
  charset="", and the character encoding pragma section. Note that you _can_ have two character
  encoding declarations per document, if the document is an XML document and one is an XML
  declaration, the other is <meta charset>, and the encoding is UTF-8. -->

  <p>If an <span data-x="HTML documents">HTML document</span> does not start with a BOM, and its
  <span>encoding</span> is not explicitly given by <span data-x="Content-Type">Content-Type
  metadata</span>, and the document is not <span>an <code>iframe</code> <code
  data-x="attr-iframe-srcdoc">srcdoc</code> document</span>, then the encoding must be specified
  using a <code>meta</code> element with a <code data-x="attr-meta-charset">charset</code> attribute
  or a <code>meta</code> element with an <code data-x="attr-meta-http-equiv">http-equiv</code>
  attribute in the <span data-x="attr-meta-http-equiv-content-type">Encoding declaration
  state</span>.</p>

  <div class="note">
   <p>A character encoding declaration is required (either in the <span
   data-x="Content-Type">Content-Type metadata</span> or explicitly in the file) even when all
   characters are in the ASCII range, because a character encoding is needed to process non-ASCII
   characters entered by the user in forms, in URLs generated by scripts, and so forth.</p>

   <p>Using non-UTF-8 encodings can have unexpected results on form submission and URL encodings,
   which use the <span>document's character encoding</span> by default.</p>
  </div>

  <p>If the document is <span>an <code>iframe</code> <code data-x="attr-iframe-srcdoc">srcdoc</code>
  document</span>, the document must not have a <span>character encoding declaration</span>. (In
  this case, the source is already decoded, since it is part of the document that contained the
  <code>iframe</code>.)</p>

  <p>In XML, the XML declaration should be used for inline character encoding information, if
  necessary.</p>

  <div class="example">

   <p>In HTML, to declare that the character encoding is <span>UTF-8</span>, the author could
   include the following markup near the top of the document (in the <code>head</code> element):</p>

   <pre><code class="html">&lt;meta charset="utf-8"></code></pre>

   <p>In XML, the XML declaration would be used instead, at the very top of the markup:</p>

   <pre><code class="html">&lt;?xml version="1.0" encoding="utf-8"?></code></pre>

  </div>



  <h4>The <dfn element><code>style</code></dfn> element</h4>

  <dl class="element">
   <dt><span data-x="concept-element-categories">Categories</span>:</dt>
   <dd><span>Metadata content</span>.</dd>
   <dt><span data-x="concept-element-contexts">Contexts in which this element can be used</span>:</dt>
   <dd>Where <span>metadata content</span> is expected.</dd>
   <dd>In a <code>noscript</code> element that is a child of a <code>head</code> element.</dd>
   <dt><span data-x="concept-element-content-model">Content model</span>:</dt>